<!--
/*********************************************************************
* Copyright (c) 06.10.2023 Thomas Zierer
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
**********************************************************************/
-->
<plicomp-rules>
<rule>
    <key>IBM1018I</key>
    <name>option-name should be specified within OPTIONS, but is accepted as is. </name>
    <internalKey>IBM1018I</internalKey>
    <description>This message is used in building the options listing. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1035I</key>
    <name>The next statement was merged with this statement. </name>
    <internalKey>IBM1035I</internalKey>
    <description>The statement following the statement for which this message was issued were merged with that statement. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1036I</key>
    <name>The next statement-count statements were merged with this statement. </name>
    <internalKey>IBM1036I</internalKey>
    <description>The specified number of statements following the statement for which this message was issued were merged with that statement. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1038I</key>
    <name>note </name>
    <internalKey>IBM1038I</internalKey>
    <description>This message is used to report back end informational messages. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1039I</key>
    <name>Variable variable name is implicitly declared. </name>
    <internalKey>IBM1039I</internalKey>
    <description>All variables should be declared except for contextual declarations of built-in functions, SYSPRINT and SYSIN. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1040I</key>
    <name>note </name>
    <internalKey>IBM1040I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 0. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1041I</key>
    <name>Comment spans line-count lines. </name>
    <internalKey>IBM1041I</internalKey>
    <description>A comment ends on a different line than it begins. This may indicate that an end-of-comment delimiter is missing. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1042I</key>
    <name>String spans line-count lines. </name>
    <internalKey>IBM1042I</internalKey>
    <description>A string ends on a different line than it begins. This may indicate that a closing quote is missing. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1043I</key>
    <name>variable name is contextually declared as attribute. </name>
    <internalKey>IBM1043I</internalKey>
    <description>There is no declare statement for the named variable, but it has been given the indicated attribute because of its usage. For instance, if the variable is used as a locator, it will be given the POINTER attribute. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1044I</key>
    <name>FIXED BINARY with precision 7 or less is mapped to 1 byte. </name>
    <internalKey>IBM1044I</internalKey>
    <description>The OS/370 PL/I and PL/I for MVS compilers would have mapped this to 2 bytes. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1045I</key>
    <name>Code generated for the REFER object reference name would be more efficient if the REFER object had the attributes REAL FIXED BIN(p,0). </name>
    <internalKey>IBM1045I</internalKey>
    <description>If the REFER object has any other attributes, it will be converted to and from REAL FIXED BIN(31,0) via library calls. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1046I</key>
    <name>UNSPEC applied to an array is handled as a scalar reference. </name>
    <internalKey>IBM1046I</internalKey>
    <description>The OS/370 PL/I and PL/I for MVS compilers would have handled UNSPEC applied to an array as an array of scalars. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1047I</key>
    <name>ORDER option may inhibit optimization. </name>
    <internalKey>IBM1047I</internalKey>
    <description>If the ORDER option applies to a block, optimization is likely to be inhibited, especially if the block contains ON-units that refer to variables declared outside the ON-unit. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1048I</key>
    <name>GET/PUT DATA without a data-list inhibits optimization. </name>
    <internalKey>IBM1048I</internalKey>
    <description>A GET DATA statement can alter almost any variable, and a PUT DATA statement requires almost all variables to be stored home anytime a PUT DATA statement might be executed. Both of these requirements inhibit optimization. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1050I</key>
    <name>INITIAL attribute for RESERVED STATIC is ignored. </name>
    <internalKey>IBM1050I</internalKey>
    <description>The INITIAL attribute has been specified for a variable with the attributes RESERVED STATIC. Unless such a variable is listed in the EXPORTS clause of a PACKAGE statement, the variable will not be initialized. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1051I</key>
    <name>Argument to BUILTIN name built-in may not be byte aligned. </name>
    <internalKey>IBM1051I</internalKey>
    <description>This message applies to the ADDR, CURRENTSTORAGE/SIZE and STORAGE/SIZE built-in functions. Applying any one of these built-in functions to an unaligned bit variable may not produce the results you expected. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1052I</key>
    <name>The NODESCRIPTOR attribute is accepted even though some arguments have * extents. </name>
    <internalKey>IBM1052I</internalKey>
    <description>When a string with * extent or an array with * extents is passed, PL/I normally passes a descriptor so that the called routine knows how big the passed argument really is. The NODESCRIPTOR attribute indicates that no descriptor should be passed; this is invalid if the called routine is a PL/I procedure. dcl x entry( char(*), fixed bin(31) ) options( nodescriptor ); </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1053I</key>
    <name>Scaled FIXED operation evaluated as FIXED DECIMAL. </name>
    <internalKey>IBM1053I</internalKey>
    <description>If one of the built-in functions ADD, DIVIDE, MULTIPLY or SUBTRACT is invoked with argument that have type FIXED, if either operand has a non-zero scale factor, the result will have type FIXED DEC. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1058I</key>
    <name>Conversion from source type to target type will be done by library call. </name>
    <internalKey>IBM1058I</internalKey>
    <description>This message can be used to help find code that may be very expensive if executed as part of a loop or to find code involving conversions of unlike types. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1059I</key>
    <name>SELECT statement contains no OTHERWISE clause. </name>
    <internalKey>IBM1059I</internalKey>
    <description>The ERROR condition will be raised if no WHEN clause is satisfied. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1060I</key>
    <name>Name resolution for identifier selected its declaration in a structure, rather than its non-member declaration in a parent block. </name>
    <internalKey>IBM1060I</internalKey>
    <description>The PL/I language rules require this, but it might be a little surprising. In the following code fragment, for instance, the display statement would display the value of x.y. a: proc; dcl y fixed bin init(3); call b; b: proc; dcl 1 x, 2 y fixed bin init(5), 2 z fixed bin init(7); display( y ); end; end a; </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1061I</key>
    <name>Probable DATE calculation should be examined for validity after the year 1999. </name>
    <internalKey>IBM1061I</internalKey>
    <description>Use of any of the constants 365, 1900 or '19' may indicate a date calculation. If this is true, you should examine the calculation to determine if it will be valid after the year 1999. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1062I</key>
    <name>variable inferred to contain a two-digit year. </name>
    <internalKey>IBM1062I</internalKey>
    <description>The indicated was inferred to contain a two-digit year because, for example, it was assigned the DATE built-in function. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1063I</key>
    <name>Code generated for DO group would be more efficient if control variable were a 4-byte integer. </name>
    <internalKey>IBM1063I</internalKey>
    <description>The control variable in the DO loop is a 1-byte integer, 2-byte integer, fixed decimal or fixed picture, and consequently, the code generated for the loop will not be optimal. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1064I</key>
    <name>Use of OPT(2) forces TEST(BLOCK). </name>
    <internalKey>IBM1064I</internalKey>
    <description>Under OPT(2), any specification of TEST hooks stronger than TEST(BLOCK) is not supported. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1065I</key>
    <name>Float constant constant would be more precise if specified as a long float. </name>
    <internalKey>IBM1065I</internalKey>
    <description>The named short floating-point constant cannot be exactly represented. It could be more accurately represented if it were specified as a long floating-point constant. For example, the 1.3E0 cannot be exactly represented, but could be better represented as 1.3D0. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1067I</key>
    <name>UNTIL clause ignored. </name>
    <internalKey>IBM1067I</internalKey>
    <description>If a DO specification has no clause such as TO, BY or REPEAT that could cause the loop to be repeated, then the UNTIL clause will have no effect on the loop and will be ignored. do x = y until ( z &gt; 0 ); ... end; </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1068I</key>
    <name>Procedure has no RETURNS attribute, but contains a RETURN statement. A RETURNS attribute will be assumed. </name>
    <internalKey>IBM1068I</internalKey>
    <description>If a procedure contains a RETURN statement, it should have the RETURNS attribute specified on its PROCEDURE statement. a: proc; return( 0 ); end; </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1069I</key>
    <name>The AUTOMATIC variables in a block should not be used in the prologue of that block. </name>
    <internalKey>IBM1069I</internalKey>
    <description>The AUTOMATIC variables in a block may be used in the declare statements and the executable statements of any contained block, but in the block in which they are declared, they should be used only in the executable statements. dcl x fixed bin(15) init(5); dcl y(x) fixed bin(15); </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2800I</key>
    <name>The procedure proc name is not referenced. </name>
    <internalKey>IBM2800I</internalKey>
    <description>The named procedure is not external and is never referenced in the compilation unit. This may represent an error (if it was supposed to be called) or an opportunity to eliminate some dead code. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2801I</key>
    <name>FIXED DEC(source-precision,source-scale) operand will be converted to FIXED BIN(target-precision,target-scale). This introduces a non-zero scale factor into an integer operation and will produce a res</name>
    <internalKey>IBM2801I</internalKey>
    <description>Under RULES(IBM), when an arithmetic operation has an operand that is FIXED BIN and an operand that is FIXED DEC with a non-zero scale factor, then the FIXED DEC operand will be converted to FIXED BIN. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2802I</key>
    <name>Aggregate mapping will be done by library call. </name>
    <internalKey>IBM2802I</internalKey>
    <description>This message can be used to help find code that may be very expensive if executed as part of a loop. It may be produced, for example, if your code refers to an element of a structure that uses REFER. If the structure uses multiple REFERs and the element occurs after the last REFER, the single reference to that element may produce multiple copies of this message (because multiple library calls will be made). </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2803I</key>
    <name>keyword STRING EDIT statement optimized. </name>
    <internalKey>IBM2803I</internalKey>
    <description>This message is issued when a PUT or GET STRING EDIT statement has been optimized by the compiler so that most of it is done inline. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2804I</key>
    <name>Boolean is compared with something other than '1'b or '0'b. </name>
    <internalKey>IBM2804I</internalKey>
    <description>This message will flag statements such as the following, where "true" is a BIT(1) STATIC INIT('1'b). It would be better if "true" were a named constant, i.e. if it were declared with the VALUE attribute rather than STATIC INIT if ( a &lt; b ) = true then </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2805I</key>
    <name>For assignment to variable name, conversion from source type to target type will be done by library call. </name>
    <internalKey>IBM2805I</internalKey>
    <description>This message can be used to help find code that may be very expensive if executed as part of a loop or to find code involving conversions of unlike types. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2806I</key>
    <name>Passing a LABEL to another routine is poor coding practice and will cause the compiler to generate less than optimal code. </name>
    <internalKey>IBM2806I</internalKey>
    <description>It is generally very unwise to pass a label to another routine. It would be good to think about redesigning any code doing this. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2809I</key>
    <name>FIXED DEC(source-precision,source-scale) operand will be converted to FIXED BIN(target-precision,target-scale). This introduces 8-byte integer arithmetic into an operation that might be faster if comp</name>
    <internalKey>IBM2809I</internalKey>
    <description>If the LIMITS option specifies a maximum FIXED precision greater than 31, then an operation involving a FIXED DEC and a FIXED BIN operand might produce an 8-byte integer result even if both operands are "small". For example, if you add a FIXED DEC(13) and a FIXED BIN(31), the result would be an 8-byte integer (because a FIXED DEC(13) value might be too large to fit in a 4-byte integer). To avoid this, you could apply the DECIMAL built-in function to the FIXED BIN operand. 3 </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2810I</key>
    <name>Conversion of FIXED BIN(source-precision,source-scale) to FIXED DEC(target-precision,target-scale) may produce a more accurate result than under the old compiler. </name>
    <internalKey>IBM2810I</internalKey>
    <description>In certain conversions of FIXED BIN(p,q) to FIXED DEC, the old compiler slightly rounded the result if q was positive. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2811I</key>
    <name>Use of PICTURE as DO control variable is not recommended. </name>
    <internalKey>IBM2811I</internalKey>
    <description>If the control variable in a DO loop is a PICTURE variable, then more code will be generated for the loop than if the control variable were a FIXED BIN variable. Moreover, such loops may easily be miscoded so that they will loop infinitely. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2812I</key>
    <name>Argument number argument number to BUILTIN name built-in would lead to much better code if declared with the VALUE attribute. </name>
    <internalKey>IBM2812I</internalKey>
    <description>For functions such as VERIFY(x,y), if y is a constant, it is much better for performance to declare y with the VALUE attribute rather than with the INITIAL attribute. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2814I</key>
    <name>Aggregate mapping for storage allocation will be done by library call. </name>
    <internalKey>IBM2814I</internalKey>
    <description>This message can be used to help find code that may be expensive if invoked many times. This message may be produced for ALLOCATE statements for BASED and CONTROLLED variables with non-constant extents, and it may also be produced for the prologue of PROCEDUREs that use AUTOMATIC variables with non-constant extents. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2815I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is not recommended to be passed BYVALUE. </name>
    <internalKey>IBM2815I</internalKey>
    <description>A BYVALUE argument should be one that could reasonably be passed in a register. Hence its type should be either one of REAL FIXED BIN, REAL FLOAT, POINTER, OFFSET, HANDLE, LIMITED ENTRY, FILE, ORDINAL, CHAR(1), WCHAR(1), or ALIGNED BIT(n) with n less than or equal to 8. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2816I</key>
    <name>BYVALUE parameters should ideally be ones that can reasonably be passed in registers. </name>
    <internalKey>IBM2816I</internalKey>
    <description>A BYVALUE parameter should be one that could reasonably be passed in a register. Hence its type should be either one of REAL FIXED BIN, REAL FLOAT, POINTER, OFFSET, HANDLE, LIMITED ENTRY, FILE, ORDINAL, CHAR(1), WCHAR(1), or ALIGNED BIT(n) with n less than or equal to 8. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2817I</key>
    <name>BYVALUE in RETURNS is recommended only for types that can reasonably be returned in registers. </name>
    <internalKey>IBM2817I</internalKey>
    <description>Using BYVALUE in RETURNS is recommended only if the value to be returned has a type that could reasonably be returned in a register. Hence its type should be either one of REAL FIXED BIN, REAL FLOAT, POINTER, OFFSET, HANDLE, LIMITED ENTRY, FILE, ORDINAL, CHAR(1), WCHAR(1), or ALIGNED BIT(n) with n less than or equal to 8. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2818I</key>
    <name>Addition or subtraction of FIXED DEC(precision,scale-factor) and FIXED DEC(precision,scale-factor) may raise FIXEDOVERFLOW. </name>
    <internalKey>IBM2818I</internalKey>
    <description>The precision required to hold the result as defined by PL/I of this add (or subtract) is greater than the LIMITS(FIXEDDEC) maximum for the operands and hence depending on the data values, FIXEDOVERFLOW may be raised by the operation. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2819I</key>
    <name>Multiplication of FIXED DEC(precision,scale-factor) and FIXED DEC(precision,scale-factor) may raise FIXEDOVERFLOW. </name>
    <internalKey>IBM2819I</internalKey>
    <description>The precision required to hold the result as defined by PL/I of this multiply is greater than the LIMITS(FIXEDDEC) maximum for the operands and hence depending on the data values, FIXEDOVERFLOW may be raised by the operation. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2820I</key>
    <name>The option-name option is not supported on this platform. </name>
    <internalKey>IBM2820I</internalKey>
    <description>The named compiler option is not supported on this platform. For example, the BLKOFF option is an option on the z/OS platform, but not on AIX or Windows. If specified on those platforms, it is ignored. Chapter 2. Compiler Warning Messages (1078-1225, 2600-2799) </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1078I</key>
    <name>Statement may never be executed. </name>
    <internalKey>IBM1078I</internalKey>
    <description>This message warns that the compiler has detected a statement that can never be run as the flow of control must always pass it by. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1079I</key>
    <name>Too few arguments have been specified for the ENTRY ENTRY name. </name>
    <internalKey>IBM1079I</internalKey>
    <description>The number of arguments should match the number of parameters in the ENTRY declaration. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1080I</key>
    <name>The keyword label-name, which could form a complete statement, is accepted as a label name, but a colon may have been used where a semicolon was meant. </name>
    <internalKey>IBM1080I</internalKey>
    <description>A PL/I keyword which could form a complete statement has been used as statement label. This usage is accepted, but a colon may have been used where a semicolon was intended. dcl a fixed bin(31) ext; if a = 0 then put skip list( ’a = 0’ ) else: a = a + 1; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1081I</key>
    <name>keyword expression should be scalar. Lower bounds assumed for any missing subscripts. </name>
    <internalKey>IBM1081I</internalKey>
    <description>The expression in the named keyword clause should be a scalar, but an array reference was specified. dcl p pointer; dcl x based char(10); dcl a(10) area(1000); allocate x in(a) set(p); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1082I</key>
    <name>Argument number argument-number in entry reference entry name is a scalar, but its declare specifies a structure. </name>
    <internalKey>IBM1082I</internalKey>
    <description>A scalar may be passed as the argument when a structure is expected, but this require building a "dummy" structure and assigning the scalar to each field in that structure. dcl e entry( 1 2 fixed bin(31), 2 fixed bin(31) ); dcl i fixed bin(15); call e( i ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1083I</key>
    <name>Source in label assignment is inside a DO-loop, and an illegal jump into the loop may be attempted. Optimization will also be very inhibited. </name>
    <internalKey>IBM1083I</internalKey>
    <description>GOTO statements may not jump into DO loops, and the compiler will flag any GOTO whose target is a label constant inside a (different) DO loop. However, if a label inside a DO loop is assigned to a label variable, then this kind of error may go undetected. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1084I</key>
    <name>Nonblanks after right margin are not allowed under RULES(NOLAXMARGINS). </name>
    <internalKey>IBM1084I</internalKey>
    <description>Under RULES(NOLAXMARGINS), there should be nothing but blanks after the right margin. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1085I</key>
    <name>variable may be uninitialized when used. </name>
    <internalKey>IBM1085I</internalKey>
    <description>The indicated variable may be used before it has been initialized. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1086I</key>
    <name>built-in function will be evaluated using long rather than extended routines. </name>
    <internalKey>IBM1086I</internalKey>
    <description>The indicated built-in function has an extended float argument, but since the corresponding extended routine is not yet available, it will be evaluated using the appropriate long routine. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1087I</key>
    <name>FLOAT source is too big for its target. An appropriate HUGE value of assumed value is assumed. </name>
    <internalKey>IBM1087I</internalKey>
    <description>A value larger than HUGE(1s0) cannot be assigned to a short float. Under hexadecimal float, the value 3.141592E+40 could be assigned to a short float, but under IEEE, the maximum value that a short float can hold is about 3.40281E+38. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1088I</key>
    <name>FLOAT literal is too big for its implicit precision. The E in the exponent will be replaced by a D. </name>
    <internalKey>IBM1088I</internalKey>
    <description>The precision for a float literal is implied by the number of digits in its mantissa. For instance 1e99 is implicitly FLOAT DECIMAL(1), but the value 1e99 is larger than the largest value a FLOAT DECIMAL(1) can hold. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1089I</key>
    <name>Control variable in DO loop cannot exceed TO value, and loop may be infinite. </name>
    <internalKey>IBM1089I</internalKey>
    <description>If the TO value is equal to the maximum value that a FIXED or PICTURE variable can hold, then a loop dominated by that variable will run endlessly unless exited inside the loop by a LEAVE or GOTO. For example, in the first code fragment below, x can never be bigger than 99, and the loop would be infinite. In the second code fragment below, y can never be bigger than 32767, and the loop would be infinite. dcl x pic’99’; do x = 1 to 99; put skip list( x ); end; dcl y fixed bin(15); do y = 1 to 32767; put skip list( y ); end; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1090I</key>
    <name>Constant used as locator qualifier. </name>
    <internalKey>IBM1090I</internalKey>
    <description>An expression contains a reference to a based variable with a constant value for its locator qualifier. This may cause a protection exception on some systems. It may also indicate that the variable was declared as based on NULL or SYSNULL and that this constant value is being used as its locator qualifier. dcl a fixed bin(31) based( null() ); a = 0; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1091I</key>
    <name>FIXED BIN precision less than storage allows. </name>
    <internalKey>IBM1091I</internalKey>
    <description>Except in unusual circumstances, the precision in a FIXED BIN declaration should be 7, 15, 31 or 63 if SIGNED and one greater if UNSIGNED. This message may indicate that a declare specified, for example, FIXED BIN(8) when UNSIGNED FIXED BIN(8) was meant. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1092I</key>
    <name>GOTO whose target is or may be in another block severely limits optimization. </name>
    <internalKey>IBM1092I</internalKey>
    <description>Try to change the code so that it sets and tests a switch instead, or limit GOTOs to very small modules that do not need optimization. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1093I</key>
    <name>PLIXOPT string is invalid. See related runtime message message-number. </name>
    <internalKey>IBM1093I</internalKey>
    <description>The PLIXOPT string could not be parsed. See the cited LE message for more detail. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1094I</key>
    <name>Element option in PLIXOPT is invalid. See related runtime message message-number. </name>
    <internalKey>IBM1094I</internalKey>
    <description>The PLIXOPT string contains an invalid item. See the cited LE message for more detail. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1095I</key>
    <name>Element option in PLIXOPT has been remapped to option. See related runtime message message-number. </name>
    <internalKey>IBM1095I</internalKey>
    <description>The PLIXOPT string contains a run-time option which is not supported by LE. See the cited LE message for more detail. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1096I</key>
    <name>STAE and SPIE in PLIXOPT is not supported. See related runtime message message-number. </name>
    <internalKey>IBM1096I</internalKey>
    <description>The SPIE and STAE options have been replaced by the TRAP option. TRAP(ON) is equivalent to SPIE and STAE; TRAP(OFF) is equivalent to NOSPIE and NOSTAE. The combination SPIE and NOSTAE and the combination NOSPIE and STAE are no longer supported. See the cited LE message for more detail. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1097I</key>
    <name>Scalar accepted as argument number argument-number in ENTRY reference ENTRY name although parameter description specifies an array. </name>
    <internalKey>IBM1097I</internalKey>
    <description>Generally, scalars should not be passed where arrays are expected, but in some situations, this may be what you want. dcl a entry( (*) fixed bin ) option(nodescriptor); call a( 0 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1098I</key>
    <name>Extraneous comma at end of statement ignored. </name>
    <internalKey>IBM1098I</internalKey>
    <description>A comma was followed by a semicolon rather than by a valid syntactical element (such as an identifier). The comma will be ignored in order to make the semicolon valid. dcl 1 a, 2 b fixed bin, 2 c fixed bin, ; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1099I</key>
    <name>FIXED DEC(source-precision,source-scale) operand will be converted to FIXED BIN(target-precision,target-scale). Significant digits may be lost. </name>
    <internalKey>IBM1099I</internalKey>
    <description>Under RULES(IBM), when a comparison or arithmetic operation has an operand that is FIXED BIN and an operand that is FIXED DEC with a non-zero scale factor, then the FIXED DEC operand will be converted to FIXED BIN. Under RULES(ANS), when a comparison or arithmetic operation has an operand that is FIXED BIN and an operand that is FIXED DEC with a zero scale factor, then the FIXED DEC operand will be converted to FIXED BIN. In each case, significant digits may be lost, and if there is a fractional part, it may not be exactly represented as binary. For instance, under RULES(IBM), the assignment statement below will cause the target to have the value 29.19, and in the comparison, C will be converted to FIXED BIN(31,10) and significant digits will be lost (in fact, SIZE would be raised, but since it is disabled, this program would be in error). dcl a fixed dec(07,2) init(12.2); dcl b fixed bin(31,0) init(17); dcl c fixed dec(15,3) init(2097151); dcl d fixed bin(31,0) init(0); a = a + b; if c = d then; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1100I</key>
    <name>The attribute attribute-option is not valid on BEGIN blocks and is ignored. </name>
    <internalKey>IBM1100I</internalKey>
    <description>An attribute (REDUCIBLE in the example below) has been specified in the OPTIONS clause on a BEGIN statement, but that attribute is not valid for BEGIN blocks. begin options( reducible ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1101I</key>
    <name>option-name is not a known PROCEDURE attribute and is ignored. </name>
    <internalKey>IBM1101I</internalKey>
    <description>An attribute (DATAONLY in the example below) has been specified in the OPTIONS clause on a PROCEDURE statement, but that attribute is not valid for PROCEDUREs. a: proc options( dataonly ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1102I</key>
    <name>option-name is not a known BEGIN attribute and is ignored. </name>
    <internalKey>IBM1102I</internalKey>
    <description>The indicated attribute is valid on PROCEDURE statements, but not on BEGIN statements. begin recursive; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1103I</key>
    <name>option-name is not a supported compiler option and is ignored. </name>
    <internalKey>IBM1103I</internalKey>
    <description>The compiler option is not supported on this platform. *process map; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1104I</key>
    <name>Suboptions of the compiler option option-name are not supported and are ignored. </name>
    <internalKey>IBM1104I</internalKey>
    <description>Suboptions of the compiler option are not supported on this platform. *process list(4); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1105I</key>
    <name>A suboption of the compiler option option-name is too long. It is shortened to length number-of-letters. </name>
    <internalKey>IBM1105I</internalKey>
    <description>Various compiler options have limits on the size of subfields. Refer to the Programming Guide for the limits of specific compiler options. *process margini( ’+-’ ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1106I</key>
    <name>Condition prefixes on keyword statements are ignored. </name>
    <internalKey>IBM1106I</internalKey>
    <description>Condition prefixes are not allowed on DECLARE, DEFAULT, IF, ELSE, DO, END, SELECT, WHEN or OTHERWISE statements. (nofofl): if (x+y) &gt; 0 then </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1107I</key>
    <name>option-name is not a known ENTRY statement attribute and is ignored. </name>
    <internalKey>IBM1107I</internalKey>
    <description>An attribute (DATAONLY in the example below) has been specified in the OPTIONS clause on an ENTRY statement, but that attribute is not valid for ENTRY statements. a: entry options( dataonly ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1108I</key>
    <name>The character char specified in the option option is already defined and may not be redefined. The redefinition will be ignored. </name>
    <internalKey>IBM1108I</internalKey>
    <description>A character specified in the OR, NOT, QUOTE or NAMES compiler option is already defined in the PL/I character set or by another compiler option. 7 *process not(’=’); *process not(’!’) or(’!’); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1109I</key>
    <name>The second argument in the C-format item will be ignored. </name>
    <internalKey>IBM1109I</internalKey>
    <description>If you wish to display the real and imaginary parts of a complex number using different formats, use the REAL and IMAG built-in functions and 2 format items. put edit ( x ) ( c( e(10,6), e(10,6) ) ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1110I</key>
    <name>The %INCLUDE statement should be on a line by itself. The source on the line after the %INCLUDE statement is ignored. </name>
    <internalKey>IBM1110I</internalKey>
    <description>Split the text into 2 lines. %include x; %include y; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1111I</key>
    <name>CHECK prefix is not supported and is ignored. </name>
    <internalKey>IBM1111I</internalKey>
    <description>The CHECK prefix is not part of the SAA PL/I language. (check): i = j + 1; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1112I</key>
    <name>condition-name condition is not supported and is ignored. </name>
    <internalKey>IBM1112I</internalKey>
    <description>The CHECK and PENDING conditions are not part of the SAA PL/I language. on check ... </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1113I</key>
    <name>verb-name statement is not supported and is ignored. </name>
    <internalKey>IBM1113I</internalKey>
    <description>The named statement, for example the CHECK statement, is not part of the SAA PL/I language. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1114I</key>
    <name>Comparands are both constant. </name>
    <internalKey>IBM1114I</internalKey>
    <description>Both operands in a comparison are constant, and consequently, the result of the comparison is also a constant. If this comparison is the expression in an IF clause, for example, this means that either the THEN or ELSE clause will never be executed. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1115I</key>
    <name>INITIAL list contains count items, but the array variable name contains only array size. Excess is ignored. </name>
    <internalKey>IBM1115I</internalKey>
    <description>For an array, an INITIAL list should not contain more values than the array has elements. dcl a init( 1, 2 ), b(5) init( (10) 0 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1116I</key>
    <name>Comment spans more than one file. </name>
    <internalKey>IBM1116I</internalKey>
    <description>A comment ends in a different file than it begins. This may indicate that an end-of-comment statement is missing. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1117I</key>
    <name>String spans more than one file. </name>
    <internalKey>IBM1117I</internalKey>
    <description>A string ends in a different file than it begins. This may indicate that a closing quote is missing. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1118I</key>
    <name>Delimiter missing between nondelimiter and nondelimiter. A blank is assumed. </name>
    <internalKey>IBM1118I</internalKey>
    <description>A delimiter (for example, a blank or a comma) is required between all identifiers and constants. dcl 1 a, 2 b, 3c; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1119I</key>
    <name>Code generated for DO group would be more efficient if control variable name were not an aggregate member. </name>
    <internalKey>IBM1119I</internalKey>
    <description>The control variable in the DO loop is a member of an array, a structure or a union, and consequently, the code generated for the loop will not be optimal. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1120I</key>
    <name>Multiple closure of groups. END statements will be inserted to close intervening groups. </name>
    <internalKey>IBM1120I</internalKey>
    <description>Using one END statement to close more than one group of statements is permitted, but it may indicate a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1121I</key>
    <name>Missing character assumed. </name>
    <internalKey>IBM1121I</internalKey>
    <description>The indicated character is missing, and there are no more characters in the source. The missing character has been inserted by the parser in order to correct your source. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1122I</key>
    <name>Missing character assumed before character. </name>
    <internalKey>IBM1122I</internalKey>
    <description>The indicated character is missing and has been inserted by the parser in order to correct your source. display( ’Program starting’ ; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1123I</key>
    <name>The ENVIRONMENT option option-name has been specified without a suboption. The option option-name is ignored. </name>
    <internalKey>IBM1123I</internalKey>
    <description>Certain ENVIRONMENT options, such as RECSIZE, require suboptions. dcl f file env( recsize ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1124I</key>
    <name>A suboption has been specified for the ENVIRONMENT option option-name. The suboption will be ignored. </name>
    <internalKey>IBM1124I</internalKey>
    <description>Certain ENVIRONMENT options, such as CONSECUTIVE, should be specified without any suboptions. dcl f file env( consecutive(1) ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1125I</key>
    <name>The ENVIRONMENT option option-name has been specified more than once. </name>
    <internalKey>IBM1125I</internalKey>
    <description>ENVIRONMENT options should not be repeated. dcl f file env( consecutive consecutive ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1126I</key>
    <name>The ENVIRONMENT option option-name has an invalid suboption. The option will be ignored. </name>
    <internalKey>IBM1126I</internalKey>
    <description>The suboption type is incorrect. dcl f file env( regional(5) ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1127I</key>
    <name>option-name is not a known ENVIRONMENT option. It will be ignored. </name>
    <internalKey>IBM1127I</internalKey>
    <description>There is no such supported ENVIRONMENT option. dcl f file env( unknown ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1128I</key>
    <name>The ENVIRONMENT option option-name conflicts with the LANGLVL compiler option. The option will be ignored. </name>
    <internalKey>IBM1128I</internalKey>
    <description>The indicated option is valid only with LANGLVL(OS). dcl f file env( fb ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1129I</key>
    <name>verb-name processor-name statement ignored up to closing semicolon. </name>
    <internalKey>IBM1129I</internalKey>
    <description>An EXEC SQL or EXEC CICS statement has been found in the source program. The compiler will ignore these statements. exec sql ...; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1130I</key>
    <name>The external name identifier is too long. It will be shortened to identifier. </name>
    <internalKey>IBM1130I</internalKey>
    <description>The maximum length of external names is set by the EXTNAME suboption of the LIMITS compiler option. dcl this_name_is_long static external pointer; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1131I</key>
    <name>An EXTERNAL name specification for name has been specified on its PROCEDURE statement and in the EXPORTS clause of the PACKAGE statement. The EXPORTS specification will be used. </name>
    <internalKey>IBM1131I</internalKey>
    <description>The name specified in the EXTERNAL attribute in the EXPORTS clause overrides the name specified in the EXTERNAL attribute on the PROCEDURE statement. a: package exports( b ext(’_B’) ); b: proc ext( ’BB’ ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1132I</key>
    <name>An EXTERNAL name specification for name has been specified in its declaration and in the RESERVES clause of the PACKAGE statement. The RESERVES specification will be used. </name>
    <internalKey>IBM1132I</internalKey>
    <description>The name specified in the EXTERNAL attribute in the RESERVES clause overrides the name specified in the EXTERNAL attribute in the DECLARE statement. 9 a: package reserves( b ext(’_B’) ); dcl b ext( ’BB’ ) static ... </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1133I</key>
    <name>The FORMAT CONSTANT array label-name is not fully initialized. </name>
    <internalKey>IBM1133I</internalKey>
    <description>An element of a FORMAT CONSTANT array has not been defined, for example, f(2) in the example below. f(1): format( x(2), a ); f(3): format( x(4), a ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1134I</key>
    <name>The LABEL CONSTANT array label-reference is not fully initialized. </name>
    <internalKey>IBM1134I</internalKey>
    <description>The named variable defines a statement label array, but not all the elements in that array are labels for statements in the containing procedure. l(1): display( ... ); l(3): display( ... ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1135I</key>
    <name>Logical operand is constant. </name>
    <internalKey>IBM1135I</internalKey>
    <description>An argument to one of the logical operators (or, and or not) is a constant. The result of the operation may also be a constant. If this operation is the expression in an IF clause, for example, this means that either the THEN or ELSE clause will never be executed. if a | ’1’b then </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1136I</key>
    <name>Function invoked as a subroutine. </name>
    <internalKey>IBM1136I</internalKey>
    <description>A function, for example, a PROCEDURE or ENTRY statement with the RETURNS attribute, has been invoked in a CALL statement. The value that is returned by the function will be discarded, but the OPTIONAL attribute should be used to indicate that this is valid. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1137I</key>
    <name>The attribute attribute is invalid in GENERIC descriptions and will be ignored. </name>
    <internalKey>IBM1137I</internalKey>
    <description>The named attribute is invalid in GENERIC description lists. dcl g generic ( f1 when( connected ), f2 otherwise ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1138I</key>
    <name>Number of items in INITIAL list is count for the array variable name which contains array size elements. </name>
    <internalKey>IBM1138I</internalKey>
    <description>The array will be incompletely initialized. If the named variable is part of a structure, subsequent elements in that structure with this problem will be flagged with message 2602. This may be a programming error (in the example below, 4 should probably have been 6) and may cause exceptions when the program is run. dcl a(8) fixed dec init( 1, 2, (4) 0 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1139I</key>
    <name>Syntax of the %CONTROL statement is incorrect. </name>
    <internalKey>IBM1139I</internalKey>
    <description>The %CONTROL statement must be followed by FORMAT or NOFORMAT option enclosed in parentheses and then a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1140I</key>
    <name>Syntax of the LANGLVL option in the %OPTION statement is incorrect. </name>
    <internalKey>IBM1140I</internalKey>
    <description>The LANGLVL option in the %OPTION statement must be specified as either LANGLVL(SAA) or LANGLVL(SAA2). </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1141I</key>
    <name>Syntax of the %NOPRINT statement is incorrect. </name>
    <internalKey>IBM1141I</internalKey>
    <description>The %NOPRINT statement must be followed, with optional intervening blanks, by a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1142I</key>
    <name>Syntax of the %PAGE statement is incorrect. </name>
    <internalKey>IBM1142I</internalKey>
    <description>The %PAGE statement must be followed, with optional intervening blanks, by a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1143I</key>
    <name>Syntax of the %PRINT statement is incorrect. </name>
    <internalKey>IBM1143I</internalKey>
    <description>The %PRINT statement must be followed, with optional intervening blanks, by a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1144I</key>
    <name>Number of lines specified with %SKIP must be between 0 and 999 inclusive. </name>
    <internalKey>IBM1144I</internalKey>
    <description>Skip amounts greater than 999 are not supported. %skip(2000); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1145I</key>
    <name>Syntax of the %SKIP statement is incorrect. </name>
    <internalKey>IBM1145I</internalKey>
    <description>The %SKIP statement must be followed by a semicolon with optional intervening blanks and a parenthesized integer. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1146I</key>
    <name>Syntax of the TEST option in the %OPTION statement is incorrect. </name>
    <internalKey>IBM1146I</internalKey>
    <description>The TEST option in the %OPTION statement must be specified without any suboptions. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1147I</key>
    <name>Syntax of the NOTEST option in the %OPTION statement is incorrect. </name>
    <internalKey>IBM1147I</internalKey>
    <description>The NOTEST option in the %OPTION statement must be specified without any suboptions. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1148I</key>
    <name>Syntax of the %PUSH statement is incorrect. </name>
    <internalKey>IBM1148I</internalKey>
    <description>The %PUSH statement must be followed, with optional intervening blanks, by a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1149I</key>
    <name>Syntax of the %POP statement is incorrect. </name>
    <internalKey>IBM1149I</internalKey>
    <description>The %POP statement must be followed, with optional intervening blanks, by a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1150I</key>
    <name>Syntax of the %NOTE statement is incorrect. </name>
    <internalKey>IBM1150I</internalKey>
    <description>The %NOTE statement must be followed by, in parentheses, a note and an optional return code, and then a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1151I</key>
    <name>FIXED BINARY precision is reduced to maximum value. </name>
    <internalKey>IBM1151I</internalKey>
    <description>The maximum FIXED BIN precision depends on the LIMITS option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1152I</key>
    <name>FIXED DECIMAL precision is reduced to maximum value. </name>
    <internalKey>IBM1152I</internalKey>
    <description>The maximum FIXED DEC precision depends on the LIMITS option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1153I</key>
    <name>FLOAT BINARY precision is reduced to maximum value. </name>
    <internalKey>IBM1153I</internalKey>
    <description>The maximum FLOAT BIN precision is 64 on Intel, 106 on AIX and 109 on z/OS. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1154I</key>
    <name>FLOAT DECIMAL precision is reduced to maximum value. </name>
    <internalKey>IBM1154I</internalKey>
    <description>The maximum FLOAT DEC precision is 18 on Intel, 32 on AIX and 33 on z/OS except for DFP which has a maximum of 34. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1155I</key>
    <name>The aggregate aggregate-name contains noncomputational values. Those values will be ignored. </name>
    <internalKey>IBM1155I</internalKey>
    <description>Some members of an aggregate referenced in an I/O statement are noncomputational. The computational members will be correctly processed, but the noncomputational ones will be ignored. dcl 1 x, 2 y ptr, 3 fixed bin(31); put skip list(x); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1156I</key>
    <name>Arguments to MAIN procedure are not all POINTER. </name>
    <internalKey>IBM1156I</internalKey>
    <description>Under SYSTEM(CICS), SYSTEM(TSO) and SYSTEM(IMS), the arguments to the MAIN procedure should all have type POINTER. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1157I</key>
    <name>note </name>
    <internalKey>IBM1157I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 4. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1158I</key>
    <name>A option is missing in the specification of the option option. One is assumed. </name>
    <internalKey>IBM1158I</internalKey>
    <description>A closing quote or parenthesis is missing in the specification of a compiler option. A quoted string must not cross line boundaries. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1159I</key>
    <name>The string option is not recognized as a valid option keyword and is ignored. </name>
    <internalKey>IBM1159I</internalKey>
    <description>An invalid compiler option has been specified. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1160I</key>
    <name>The third argument to the MARGINS option is not supported. </name>
    <internalKey>IBM1160I</internalKey>
    <description>Printer control characters are not supported on input source records. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1161I</key>
    <name>The suboption suboption is not valid for the option compiler option. </name>
    <internalKey>IBM1161I</internalKey>
    <description>A suboption of a compiler option is incorrect. The suboption may be unknown or outside the allowable range. 11 *process flag(q) margins(1002); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1162I</key>
    <name>A required suboption is missing for the suboption option. </name>
    <internalKey>IBM1162I</internalKey>
    <description>A required suboption of a compiler option is missing. *process or; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1163I</key>
    <name>Required sub-fields are missing for the option option. Default values are assumed. </name>
    <internalKey>IBM1163I</internalKey>
    <description>Required suboptions of a compiler option are missing. *process margins; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1164I</key>
    <name>option-name should be specified within OPTIONS, but is accepted as is. </name>
    <internalKey>IBM1164I</internalKey>
    <description>The option, for example REORDER, is accepted outside of the OPTIONS attribute, but it should be specified within the OPTIONS attribute. This would also conform to the ANSI standard. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1165I</key>
    <name>The OPTIONS option option-name has been specified more than once. </name>
    <internalKey>IBM1165I</internalKey>
    <description>The only supported LINKAGE options are OPTLINK and SYSTEM. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1166I</key>
    <name>option-name is not a known LINKAGE suboption. The LINKAGE option will be ignored. </name>
    <internalKey>IBM1166I</internalKey>
    <description>The only supported LINKAGE options are OPTLINK and SYSTEM. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1167I</key>
    <name>Maximum number of %PUSH statements exceeded. The control statement is ignored. </name>
    <internalKey>IBM1167I</internalKey>
    <description>The maximum number of pending %PUSH statements is 63. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1168I</key>
    <name>No %PUSH statements are in effect. The %POP control statement is ignored. </name>
    <internalKey>IBM1168I</internalKey>
    <description>A %POP has been issued when no %PUSH statement are pending. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1169I</key>
    <name>No precision was specified for the result of the builtin name built-in. The precision will be determined from the argument. </name>
    <internalKey>IBM1169I</internalKey>
    <description>This message applies to the FIXED and FLOAT built-in functions when only one argument is given. The precision is not set to a default, but is instead derived from the argument. For example, if x is FLOAT BIN(21), FIXED(x) will return a FIXED BIN(21) value. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1170I</key>
    <name>The OPTIONS attribute option-attribute is not supported and is ignored. </name>
    <internalKey>IBM1170I</internalKey>
    <description>The indicated element of the OPTIONS list is not supported. dcl a ext entry options( nomap ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1171I</key>
    <name>SELECT statement contains no WHEN or OTHERWISE clauses. </name>
    <internalKey>IBM1171I</internalKey>
    <description>WHEN or OTHERWISE clauses are not required on SELECT statements, but their absence may indicate a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1172I</key>
    <name>A zero length string has been entered for the option-name option. The option is ignored. </name>
    <internalKey>IBM1172I</internalKey>
    <description>User-specified string has zero length. This can occur when OR('') has been specified on the command line or when the backslash character is specified as the only character in the OR string. In the latter case, the backslash character has been interpreted as an escape character, and so the string appears to have zero length. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1173I</key>
    <name>SELECT statement contains no WHEN clauses. </name>
    <internalKey>IBM1173I</internalKey>
    <description>SELECT statements do not require WHEN clauses, but their absence may indicate a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1174I</key>
    <name>The reference in the from-into clause clause may not be byte-aligned. </name>
    <internalKey>IBM1174I</internalKey>
    <description>The reference specified in the FROM or INTO clause may not be byte-aligned. If the reference is indeed not byte-aligned, unpredictable results may occur. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1175I</key>
    <name>FIXED BINARY constant contains too many digits. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM1175I</internalKey>
    <description>The maximum precision for FIXED BINARY constants is specified by the FIXEDBIN suboption of the LIMITS compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1176I</key>
    <name>FIXED DECIMAL constant contains too many digits. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM1176I</internalKey>
    <description>The maximum precision for FIXED DECIMAL constants is specified by the FIXEDDEC suboption of the LIMITS compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1177I</key>
    <name>Mantissa in FLOAT BINARY constant contains more digits than the implementation maximum. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM1177I</internalKey>
    <description>Float binary constants are limited to 64 digits on Intel, 32 on AIX and 33 on z/OS. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1178I</key>
    <name>Mantissa in FLOAT DECIMAL constant contains more digits than the implementation maximum. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM1178I</internalKey>
    <description>Float decimal constants are limited to 18 digits on Intel, 106 on AIX and 109 on z/OS. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1179I</key>
    <name>FLOAT literal is too big for its implicit precision. An appropriate HUGE value of assumed value is assumed. </name>
    <internalKey>IBM1179I</internalKey>
    <description>The precision for a float literal is implied by the number of digits in its mantissa. For instance 1e99 is implicitly FLOAT DECIMAL(1), but the value 1e99 is larger than the largest value a FLOAT DECIMAL(1) can hold. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1180I</key>
    <name>Argument to BUILTIN name built-in is not byte aligned. </name>
    <internalKey>IBM1180I</internalKey>
    <description>This message applies to the ADDR, CURRENTSTORAGE/SIZE and STORAGE/SIZE built-in functions. Applying any one of these built-in functions to a variable that is not byte-aligned may not produce the results you expect. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1181I</key>
    <name>A WHILE or UNTIL option at the end of a series of DO specifications applies only to the last specification. </name>
    <internalKey>IBM1181I</internalKey>
    <description>In the following code snippet, the WHILE clause applies only to the last DO specification, that is only when I = 5; do i = 1, 3, 5 while( j &lt; 5 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1182I</key>
    <name>Invocation of a NONRECURSIVE procedure from within that procedure is invalid. RECURSIVE attribute is assumed. </name>
    <internalKey>IBM1182I</internalKey>
    <description>A procedure contains code that will cause it to be recursively invoked, but the procedure was not declared with RECURSIVE attribute. a: proc( n ); ... if n &gt; 0 then call a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1183I</key>
    <name>condition-name condition is disabled. Statement is ignored. </name>
    <internalKey>IBM1183I</internalKey>
    <description>The SIGNAL statement is ignored if the condition it would raise is disabled. Some conditions, like SIZE, are disabled by default. (nofofl): signal fixedoverflow; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1184I</key>
    <name>Source with length string-length in INITIAL clause for variable name is longer than target. Source will be truncated. </name>
    <internalKey>IBM1184I</internalKey>
    <description>The string in the INITIAL clause ('TooBig' in the example below) will be trimmed to fit (to 'TooB'). dcl x char(4) static init(’tooBig’); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1185I</key>
    <name>Source in RETURN statement has length greater than that in the corresponding RETURNS attribute. </name>
    <internalKey>IBM1185I</internalKey>
    <description>The string in the RETURNS clause ('TooBig' in the example below) will be trimmed to fit (to 'TooB'). x: proc returns( char(4) ); ... return( ’TooBig’ ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1186I</key>
    <name>Source in string assignment is longer than target. </name>
    <internalKey>IBM1186I</internalKey>
    <description>The source in the assignment ('TooBig' in the example below) will be trimmed to fit (to 'TooB'). dcl x char(4); x = ’TooBig’; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1187I</key>
    <name>Argument number argument-number in entry reference entry name is longer than the corresponding parameter. </name>
    <internalKey>IBM1187I</internalKey>
    <description>The source in the entry invocation ('TooBig' in the example below) will be trimmed to fit (to 'TooB'). 13 dcl x entry( char(4) ); call x( ’TooBig’ ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1188I</key>
    <name>Result of concatenating two strings is too long. </name>
    <internalKey>IBM1188I</internalKey>
    <description>The length of the string produced by concatenating two strings must not be greater than the maximum allowed for the derived string type. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1189I</key>
    <name>NODESCRIPTOR attribute conflicts with the NONCONNECTED attribute for the parameter parameter name. CONNECTED is assumed. </name>
    <internalKey>IBM1189I</internalKey>
    <description>If NODESCRIPTOR is specified (or implied) for a procedure, aggregate parameters should have the CONNECTED attribute. The CONNECTED attribute can be explicitly coded, or it can be implied by the DEFAULT(CONNECTED) compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1190I</key>
    <name>The OPTIONS option option-name conflicts with the LANGLVL compiler option. The option will be applied. </name>
    <internalKey>IBM1190I</internalKey>
    <description>The named option is not part of the PL/I language definition as specified in the LANGLVL compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1191I</key>
    <name>Result of FIXED BIN divide will not be scaled. </name>
    <internalKey>IBM1191I</internalKey>
    <description>When dividing a FIXED BIN(p1,0) value by a FIXED BIN(p2,0) value where 31 &gt; p1, the result will have the attributes FIXED BIN(p1,0). With ANSI 76, it would have the attributes FIXED BIN(31,31-p1). </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1192I</key>
    <name>WHEN clauses contain duplicate values. </name>
    <internalKey>IBM1192I</internalKey>
    <description>In a dominated SELECT statement, if a WHEN clause has the same value as an earlier WHEN clause, the code for the second WHEN clause will never be executed. This message will be produced only if the SELECT statement is otherwise suitable for transformation into a branch table. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1193I</key>
    <name>statement count statements in block block name. Optimization restricted. </name>
    <internalKey>IBM1193I</internalKey>
    <description>Optimization will be restricted for any procedure or begin-block. that contains more statements than specified in the MAXSTMT option. To avoid this, the block could be split up into more manageable parts. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1194I</key>
    <name>More than one argument to MAIN procedure. </name>
    <internalKey>IBM1194I</internalKey>
    <description>A MAIN procedure should have at most one argument, except under SYSTEM(CICS) and SYSTEM(IMS). </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1195I</key>
    <name>Argument to MAIN procedure is not CHARACTER VARYING. </name>
    <internalKey>IBM1195I</internalKey>
    <description>The argument to the MAIN procedure should be CHARACTER VARYING, except under SYSTEM(CICS), SYSTEM(TSO) and SYSTEM(IMS). </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1196I</key>
    <name>AREA initialized with EMPTY - INITIAL attribute is ignored. </name>
    <internalKey>IBM1196I</internalKey>
    <description>Any INITIAL attribute specified for an AREA variable is ignored. The variable will, instead, be initialized with the EMPTY built-in function. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1197I</key>
    <name>file-name assumed as file condition reference. </name>
    <internalKey>IBM1197I</internalKey>
    <description>All file conditions should be qualified with a file reference, but ENDFILE and ENDPAGE are accepted without a file reference. SYSIN and SYSPRINT are then assumed, respectively. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1198I</key>
    <name>A null argument list is assumed for variable name. </name>
    <internalKey>IBM1198I</internalKey>
    <description>An ENTRY reference is used where the result of invoking that entry is probably meant to be used. dcl e1 entry returns( ptr ); dcl q ptr based; e1-&gt;q = null(); dcl e2 entry returns( bit(1) ); if e2 then ... </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1199I</key>
    <name>Syntax of the %LINE directive is incorrect. </name>
    <internalKey>IBM1199I</internalKey>
    <description>The %LINE directive must be followed, with optional intervening blanks, by a parenthesis, a line number, a comma, a file name and a closing parenthesis. %line( 19, test.pli ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1200I</key>
    <name>Use of DATE built-in function may cause problems. </name>
    <internalKey>IBM1200I</internalKey>
    <description>The DATE built-in returns a two-digit year. It might be better to use the DATETIME built-in which returns a four-digit year. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1201I</key>
    <name>suboption conflicts with a previously specified suboption for the option compiler option. </name>
    <internalKey>IBM1201I</internalKey>
    <description>There is a conflict of suboptions for the LANGLVL compiler option. The SAA2 and OS suboptions are mutually exclusive. *process langlvl(saa2 os); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1202I</key>
    <name>Syntax of the %OPTION statement is incorrect. </name>
    <internalKey>IBM1202I</internalKey>
    <description>The only option supported in the %OPTION statement is the LANGLVL option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1203I</key>
    <name>Argument to PLITEST built-in subroutine is ignored. </name>
    <internalKey>IBM1203I</internalKey>
    <description>Change the invocation of PLITEST so that no argument is passed. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1204I</key>
    <name>INTERNAL CONSTANT assumed for initialized STATIC LABEL. </name>
    <internalKey>IBM1204I</internalKey>
    <description>LABEL variables require block activation information, and hence they cannot be initialized at compile-time. For a STATIC LABEL variable with the INITIAL attribute, if the variable is a member of a structure or a union, a severe message will be issued. Otherwise, its attributes will be changed to INTERNAL CONSTANT in order to eliminate the requirement for block activation information. Such a variable must be initialized with LABEL CONSTANTs from containing blocks. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1205I</key>
    <name>Arguments of the option compiler option must be the same length. </name>
    <internalKey>IBM1205I</internalKey>
    <description>If two arguments of the NAMES option are specified, they must be the same length. The second argument is the uppercase value of the first. If a character in the first string does not have an uppercase value, use the character itself as the uppercase value. For example: names( ’$!@’ ’$!@’) </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1206I</key>
    <name>BIT operators should be applied only to BIT operands. </name>
    <internalKey>IBM1206I</internalKey>
    <description>In an expression of the form x &amp; y, x | y, or x ^ y, x and y should both have BIT type. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1207I</key>
    <name>Operand to LENGTH built-in should have string type. </name>
    <internalKey>IBM1207I</internalKey>
    <description>If the operand has a numeric type, the result is the length that value would have after it was converted to string. The length of a numeric type is NOT the same as its storage requirement. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1208I</key>
    <name>INITIAL list for the array variable name contains only one item. </name>
    <internalKey>IBM1208I</internalKey>
    <description>The array will be incompletely initialized. If the named variable is part of a structure, subsequent elements in that structure with this problem will be flagged with message 2603. An asterisk can be used as an initialization factor to initialize all the elements with one value. In the example below, a(1) is initialized with the value 13, while the elements a(2) through a(8) are uninitialized. In contrast, all the elements in b are initialized to 13. dcl a(8) fixed bin init( 13 ); dcl b(8) fixed bin init( (*) 13 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1209I</key>
    <name>INDEXED environment option for file file name will be treated as ORGANIZATION(INDEXED). </name>
    <internalKey>IBM1209I</internalKey>
    <description>Since ISAM is not being simulated on the OS/2 platform, the file will be treated in a manner similar to VSAM KSDS. The file specified in the first declaration below would be handled in the same manner as the file in the second declaration. Both are treated as ORGANIZATION(INDEXED). dcl f1 file env(indexed); dcl f2 file env(organization(indexed)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1210I</key>
    <name>The field width specified in the keyword-format item may be too small for complete output of the data item. </name>
    <internalKey>IBM1210I</internalKey>
    <description>The format width will be too small for output if the number is negative. It might be valid if the format is being used for input. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1211I</key>
    <name>Source with length string-length is longer than the target variable. </name>
    <internalKey>IBM1211I</internalKey>
    <description>The source in the assignment ('TooBig' in the example below) will be trimmed to fit (to 'TooB'). If the target is a pseudovariable, message 1186 is issued instead. dcl x char(4); x = ’TooBig’; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1212I</key>
    <name>The A format item requires an argument when used in GET statement. An L format item is assumed in its place. </name>
    <internalKey>IBM1212I</internalKey>
    <description>A width must be specified on A format items when specified on a GET statement. 15 get edit(name) (a); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1213I</key>
    <name>The procedure proc name is not referenced. </name>
    <internalKey>IBM1213I</internalKey>
    <description>The named procedure is not external and is never referenced in any live code in the compilation unit. This may represent an error (if it was supposed to be called) or an opportunity to eliminate some dead code. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1214I</key>
    <name>A dummy argument will be created for argument number argument-number in entry reference entry name. </name>
    <internalKey>IBM1214I</internalKey>
    <description>An argument passed BYADDR to an entry does not match the corresponding parameter in the entry description. The address of the argument will not be passed to the entry. Instead, the argument will be assigned to a temporary with attributes that do match the parameter in the entry description, and the address of that temporary will be passed to the entry. This means that if the entry alters the value of this parameter, the alteration will not be visible in the calling routine. dcl e entry( fixed bin(31) ); dcl i fixed bin(15); call e( i ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1215I</key>
    <name>The variable variable name is declared without any data attributes. </name>
    <internalKey>IBM1215I</internalKey>
    <description>It will be given the default attributes, but this may be because of an error in the declare. For instance, in the following example, parentheses may be missing dcl a, b fixed bin; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1216I</key>
    <name>The structure member variable name is declared without any data attributes. A level number may be incorrect. </name>
    <internalKey>IBM1216I</internalKey>
    <description>It will be given the default attributes, but this may be because of an error in the declare. For instance, in the following example, the level number on c and d should probably be 3. dcl a, b fixed bin; 1 a, 2 b, 2 c, 2 d; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1217I</key>
    <name>An unnamed structure member is declared without any data attributes. A level number may be incorrect. </name>
    <internalKey>IBM1217I</internalKey>
    <description>It will be given the default attributes, but this may be because of an error in the declare. For instance, in the following example, the level number on c and d should probably be 3. dcl a, b fixed bin; 1 a, 2 *, 2 c, 2 d; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1218I</key>
    <name>First argument to BUILTIN name built-in should have string type. </name>
    <internalKey>IBM1218I</internalKey>
    <description>To eliminate this message, apply the CHAR or BIT built-in function to the first argument. dcl i fixed bin; display( substr(i,4) ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1219I</key>
    <name>LEAVE will exit noniterative DO-group. </name>
    <internalKey>IBM1219I</internalKey>
    <description>This message is not produced if the LEAVE statement specifies a label. In the following loop, the LEAVE statement will cause only the immediately enclosing DO-group to be exited; the loop will not be exited. do i = 1 to n; if a(i) &gt; 0 then do; call f; leave; end; else; end; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1220I</key>
    <name>Result of comparison is always constant. </name>
    <internalKey>IBM1220I</internalKey>
    <description>This message is produced when a variable is compared to a constant equal to the largest or smallest value that the variable could assume. In the following loop, the variable x can never be greater than 99, and hence the implied comparison executed each time through the loop will always result in a '1'b. do x pic’99’; do x = 1 to 99; end; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1221I</key>
    <name>Statement uses count bytes for temporaries. </name>
    <internalKey>IBM1221I</internalKey>
    <description>This message is produced if a statement uses more bytes for temporaries than allowed by the MAXTEMP compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1222I</key>
    <name>Comparison involving 2-digit year is problematic. </name>
    <internalKey>IBM1222I</internalKey>
    <description>Comparisons involving data containing 2-digit year fields may cause problems if exactly one of the years is later than 1999. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1223I</key>
    <name>Literal in comparison interpreted with DATE attribute. </name>
    <internalKey>IBM1223I</internalKey>
    <description>In a comparison, if one comparand has the DATE attribute, the other should also. If the non-date is a literal with a value that is valid for the date pattern, it will be viewed as if it had the same DATE attribute as the date comparand. So, in the following code, '670101' will be interpreted as if it had the DATE('YYMMDD') attribute. dcl x char(6) date(’YYMMDD’); if x &gt; ’670101’ then ... </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1224I</key>
    <name>DATE attribute ignored in comparison with non-date literal. </name>
    <internalKey>IBM1224I</internalKey>
    <description>In a comparison, if one comparand has the DATE attribute, the other should also. If the non-date is a literal with a value that is not valid for the date pattern, the DATE attribute will be ignored. So, in the following code, the comparison will be evaluated as if x did not have the DATE attribute. dcl x char(6) date(’YYMMDD’); if x &gt; ’’ then ... </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1225I</key>
    <name>DATE attribute ignored in conversion from literal. </name>
    <internalKey>IBM1225I</internalKey>
    <description>If the target in an explicit or implicit assignment has the DATE attribute, the source should also. If it does not, the DATE attribute will be ignored. So, in the following code, the assignment will be performed as if x did not have the DATE attribute. dcl x char(6) date(’YYMMDD’); x = ’’; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2600I</key>
    <name>Compiler backend issued warning messages to STDOUT. </name>
    <internalKey>IBM2600I</internalKey>
    <description>Look in STDOUT to see the message issued by the compiler backend. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2601I</key>
    <name>Missing character assumed before character. DECLARE and other nonexecutable statements should not have labels. </name>
    <internalKey>IBM2601I</internalKey>
    <description>The indicated character is missing and has been inserted by the parser in order to correct your source. xx: dcl test fixed bin; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2602I</key>
    <name>Number of items in INITIAL list is count for the array variable name which contains array size elements. </name>
    <internalKey>IBM2602I</internalKey>
    <description>The array will be incompletely initialized. If the named variable is part of a structure, the first element in that structure with this problem will be flagged with message 1138. This may be a programming error (in the example below, 6 should probably have been 7) and may cause exceptions when the program is run. dcl 1 a, 2 b(8) fixed bin init( 1, (7) 29 ), 2 c(8) fixed bin init( 1, (6) 29 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2603I</key>
    <name>INITIAL list for the array variable name contains only one item. </name>
    <internalKey>IBM2603I</internalKey>
    <description>The array will be incompletely initialized. If the named variable is part of a structure, the first element in that structure with this problem will be flagged with message 1208. An asterisk can be used as an initialization factor to initialize all the elements with one value. In the example below, b(1) and c(1) are initialized with the value 13, while the elements b(2) through b(8) and c(2) through c(8) are uninitialized. In contrast, all the elements in d are initialized to 13. dcl 1 a, 2 b(8) fixed bin init( 13 ), 2 d(8) fixed bin init( 13 ), 2 e(8) fixed bin init( (*) 13 ); 17 </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2604I</key>
    <name>FIXED DEC(source-precision,source-scale) will be converted to FIXED DEC(target-precision,target-scale). Significant digits may be lost. </name>
    <internalKey>IBM2604I</internalKey>
    <description>If the source in a conversion to FIXED DECIMAL is a FIXED DECIMAL or PICTURE variable with a different precision and scale factor, and if the difference between the precisions is not as large as the the difference between the scale factors, then significant digits may be lost. If the SIZE condition were enabled, code would be generated to detect any such occurrence, and this message would not be issued. dcl a fixed dec(04) init(1009); dcl b fixed dec(03); b = a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2605I</key>
    <name>Invalid carriage control character. Blank assumed. </name>
    <internalKey>IBM2605I</internalKey>
    <description>The specified line contains an invalid ANS print control character. The valid characters are: blank, 0, -, + and 1. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2607I</key>
    <name>PICTURE representing FIXED DEC(source-precision,source-scale) will be converted to FIXED DEC(target- precision,target-scale). Significant digits may be lost. </name>
    <internalKey>IBM2607I</internalKey>
    <description>If the source in a conversion to FIXED DECIMAL is a PICTURE variable with a different precision and scale factor, and if the difference between the precisions is not as large as the the difference between the scale factors, then significant digits may be lost. If the SIZE condition were enabled, code would be generated to detect any such occurrence, and this message would not be issued. dcl a pic’(4)9’ init(1009); dcl b fixed dec(03); b = a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2608I</key>
    <name>PICTURE representing FIXED DEC(source-precision,source-scale) will be converted to PICTURE representing FIXED DEC(target-precision,target-scale). Significant digits may be lost. </name>
    <internalKey>IBM2608I</internalKey>
    <description>If the source in a conversion to a PICTURE is a PICTURE variable with a different precision and scale factor, and if the difference between the precisions is not as large as the the difference between the scale factors, then significant digits may be lost. If the SIZE condition were enabled, code would be generated to detect any such occurrence, and this message would not be issued. dcl a pic’(4)9’ init(1009); dcl b pic’(3)9’; b = a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2609I</key>
    <name>Comment contains a semicolon on line line-number.file-number. </name>
    <internalKey>IBM2609I</internalKey>
    <description>If a comment contains a semicolon, it may indicate that there is an earlier unintentionally unclosed comment that is accidentally commenting out some source as in this example /* start of unclosed comment dcl b pic’(3)9’; /* next comment */ </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2610I</key>
    <name>One argument to BUILTIN name built-in is FIXED DEC while the other is FIXED BIN. Compiler will not interpret precision as FIXED DEC. </name>
    <internalKey>IBM2610I</internalKey>
    <description>This message applies to the MULTIPLY, DIVIDE, ADD, and SUBTRACT built-in functions: if one argument to one of these functions is FIXED DEC while the other is FIXED BIN, then the specified precision will not be interpreted as a FIXED DEC precision. This may cause improper truncation of data. For example, the result of the following multiply will have the attributes FIXED BIN(15), not FIXED DEC(15), and that might cause the result to be improperly truncated. dcl a fixed bin(31); dcl b fixed dec(15); b = multiply( a, 1000, 15 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2611I</key>
    <name>The binary value binary value appears in more than one WHEN clause. </name>
    <internalKey>IBM2611I</internalKey>
    <description>In a dominated SELECT statement, if a WHEN clause has the same value as an earlier WHEN clause, the code for the second WHEN clause will never be executed. This message will be produced only if the SELECT statement is otherwise suitable for transformation into a branch table. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2612I</key>
    <name>The character string character string appears in more than one WHEN clause. </name>
    <internalKey>IBM2612I</internalKey>
    <description>In a dominated SELECT statement, if a WHEN clause has the same value as an earlier WHEN clause, the code for the second WHEN clause will never be executed. This message will be produced only if the SELECT statement is otherwise suitable for transformation into a branch table. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2613I</key>
    <name>Unless it is an output-only parameter, variable may be uninitialized when used. </name>
    <internalKey>IBM2613I</internalKey>
    <description>The indicated variable may be used before it has been initialized. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2614I</key>
    <name>Both comparands are Booleans. </name>
    <internalKey>IBM2614I</internalKey>
    <description>This message will flag statements such as the following, where the "equals" is meant to be an "and" or "or". if ( a &lt; b ) = ( c &lt; d ) then </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2615I</key>
    <name>DO-loop will always execute exactly once. A semicolon after the DO may be missing. </name>
    <internalKey>IBM2615I</internalKey>
    <description>DO-loops should normally be iterative, but if the DO-loop specification consists of just one assignment, then it will always excute once and only once. A semicolon after the DO may be missing, as in this example do edsaup.tprs = ads162.tprs; edsaup.tops = ads162.tops; end; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2616I</key>
    <name>Size of parameter variable will return the currentsize value since no descriptor is available. </name>
    <internalKey>IBM2616I</internalKey>
    <description>If the SIZE or STG built-in function is applied to a CHAR(*) VARYING (or VARYINGZ) parameter when there is no descriptor available, then the size of the actual storage allocated to the variable cannot be determined and only the current size can be returned. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2617I</key>
    <name>Passing a LABEL to a non-PL/I routine is very poor coding practice and will cause the compiler to generate less than optimal code. </name>
    <internalKey>IBM2617I</internalKey>
    <description>It is generally very unwise to pass a label to another routine. It would be good to think about redesigning any code doing this. The compiler will issue this message when a LABEL is passed to an ENTRY declared with OPTIONS( COBOL ) or OPTIONS( ASM ) or OPTIONS( FORTRAN ). The only valid use of this label in the called routine would be to pass it on to another PL/I routine. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2618I</key>
    <name>The suboption suboption is not valid for the suboption option of the option compiler option. </name>
    <internalKey>IBM2618I</internalKey>
    <description>A suboption of a suboption of a compiler option is incorrect. The suboption may be unknown or outside the allowable range. *process limits(extname(2000)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2620I</key>
    <name>Target structure contains REFER objects. Results are undefined if the assignment changes any REFER object. </name>
    <internalKey>IBM2620I</internalKey>
    <description>Changing REFER objects may not produce the expected results. For example, in the following example, the assignment will not change any of the elements in the array d. dcl 1 a based(p), 2 b fixed bin(31), 2 c fixed bin(31), 2 d( 10 refer(c) ), 3 e fixed bin(31), 3 f fixed bin(31); a = ’’; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2621I</key>
    <name>ON ERROR block does not start with ON ERROR SYSTEM. An error inside the block may lead to an infinite loop. </name>
    <internalKey>IBM2621I</internalKey>
    <description>The first statement in an ON ERROR block should usually be an ON ERROR SYSTEM statement. This will tend to prevent an infinite loop if there is an error in the rest of the code in the ON ERROR block. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2622I</key>
    <name>ENTRY used to set the initial value in a DO loop will be invoked after any TO or BY values are set. </name>
    <internalKey>IBM2622I</internalKey>
    <description>If the initial value in a DO loop is set via an ENTRY, then you may get unexpected results if that ENTRY also changes the TO or BY value. For example, in the first loop below, the function "first" should not change the value of the variable "last". It would be better to change this code into the form of the second loop below. do x = first() to last; end; temp = first(); do x = temp to last; end; 19 </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2623I</key>
    <name>Mixing FIXED BIN and FLOAT DEC produces a FLOAT BIN result. Under DFP, this will lead to poor performance. </name>
    <internalKey>IBM2623I</internalKey>
    <description>Under DFP, the conversion of FLOAT DEC to FLOAT BIN requires an expensive library call that will lead to poor performance. To avoid this, the DECIMAL built-in function can be applied to the FIXED BIN operand. For example, it would be better to change the first assignment statement into the form of the second below. dcl n fixed bin(31); dcl f float dec(16); f = n + f; f = dec(n) + f; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2624I</key>
    <name>Mixing BIT and FLOAT DEC produces a FLOAT BIN result. Under DFP, this will lead to poor performance. </name>
    <internalKey>IBM2624I</internalKey>
    <description>Under DFP, the conversion of FLOAT DEC to FLOAT BIN requires an expensive library call that will lead to poor performance. To avoid this, the DECIMAL built-in function can be applied to the BIT operand. For example, it would be better to change the first assignment statement into the form of the second below. dcl b bit(8); dcl f float dec(16); f = b + f; f = dec(b) + f; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2625I</key>
    <name>Mixing FLOAT BIN and FLOAT DEC produces a FLOAT BIN result. Under DFP, this will lead to poor performance. </name>
    <internalKey>IBM2625I</internalKey>
    <description>Under DFP, the conversion of FLOAT DEC to FLOAT BIN requires an expensive library call that will lead to poor performance. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2626I</key>
    <name>Use of SUBSTR with a third argument equal to 0 is somewhat pointless since the result will always be a null string. </name>
    <internalKey>IBM2626I</internalKey>
    <description>While technically valid, a SUBSTR reference with a third argument that is a constant of zero probably represents a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2627I</key>
    <name>No metadata will be generated for the structure identifier since its use of REFER is too complex. </name>
    <internalKey>IBM2627I</internalKey>
    <description>XMI metadata is generated for BASED structures using REFER only if their use of REFER is "simple". </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2628I</key>
    <name>BYVALUE parameters should ideally be no larger than 32 bytes. </name>
    <internalKey>IBM2628I</internalKey>
    <description>BYVALUE parameters larger than 32 bytes require too much overhead and are bad for performance. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2629I</key>
    <name>No debug symbol information will be generated for identifier. </name>
    <internalKey>IBM2629I</internalKey>
    <description>No debug symbol information will be generated for the named variable, and hence it cannot be referenced when using the debugger. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2630I</key>
    <name>The result in an arithmetic operation has the attributes FIXED base(precision,scale-factor) which means that its scale factor is greater than its precision and that the operation may lead to an overfl</name>
    <internalKey>IBM2630I</internalKey>
    <description>If the scale factor for the result of an operation exceeds the precision of the result, then unexpected fixedoverflow exceptions may occur. This can happen, for example, when multiplying two FIXED DEC(15,8) variables under the LIMITS(FIXEDDEC(15)) option because the result of such a multiplication would have the attributes FIXED DEC(15,16). To eliminate this message, the PRECISION built-in function could be used to reduce the scale factor of one of the operands or the MULTIPLY built-in function could be used to override the default attributes for the result. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2631I</key>
    <name>One argument to BUILTIN name built-in is FIXED DEC while the other is FLOAT BIN. Compiler will not interpret precision as FIXED DEC. </name>
    <internalKey>IBM2631I</internalKey>
    <description>This message applies to the MULTIPLY, DIVIDE, ADD, and SUBTRACT built-in functions: if one argument to one of these functions is FIXED DEC while the other is FLOAT BIN, then the specified precision will not be interpreted as a FIXED DEC precision. This may cause improper truncation of data. For example, the result of the following multiply will have the attributes FLOAT BIN(15), not FIXED DEC(15), and that might cause the result to be improperly truncated. dcl a float bin(31); dcl b fixed dec(15); b = multiply( a, 1000, 15 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2632I</key>
    <name>One argument to BUILTIN name built-in is FIXED DEC while the other is FLOAT DEC. Compiler will not interpret precision as FIXED DEC. </name>
    <internalKey>IBM2632I</internalKey>
    <description>This message applies to the MULTIPLY, DIVIDE, ADD, and SUBTRACT built-in functions: if one argument to one of these functions is FIXED DEC while the other is FLOAT DEC, then the specified precision will not be interpreted as a FIXED DEC precision. This may cause improper truncation of data. For example, the result of the following multiply will have the attributes FLOAT DEC(15), not FIXED DEC(15), and that might cause the result to be improperly truncated. dcl a float dec(15); dcl b fixed dec(15); b = multiply( a, 1000, 15 ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2633I</key>
    <name>Given the support for addressing arithmetic, basing a POINTER or OFFSET on a FIXED BIN is unnecessary, and it will also fail to work properly if the size of a POINTER changes. </name>
    <internalKey>IBM2633I</internalKey>
    <description>Code using such variables will work only as long as the size of the POINTER or OFFSET variable remains the same as the size of the FIXED BIN variable. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2634I</key>
    <name>Given the support for addressing arithmetic, basing a FIXED BIN on a POINTER or OFFSET is unnecessary, and it will also fail to work properly if the size of a POINTER changes. </name>
    <internalKey>IBM2634I</internalKey>
    <description>Code using such variables will work only as long as the size of the POINTER or OFFSET variable remains the same as the size of the FIXED BIN variable. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2635I</key>
    <name>The result in an arithmetic operation has the attributes FIXED base(precision,scale-factor) which means that some significant digits may be lost. </name>
    <internalKey>IBM2635I</internalKey>
    <description>If the scale factor for the result of an operation is negative, then the ones digits will be lost and that may cause problems. This can happen, for example, when dividing a FIXED DEC(11,2) variable by a FIXED DEC(31,29) variable because the result of such a division would have the attributes FIXED DEC(31,-7). To eliminate this message, the PRECISION built-in function could be used to reduce the scale factor of one of the operands or the DIVIDE built-in function could be used to override the default attributes for the result. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2636I</key>
    <name>The ordinal ordinal name appears in more than one WHEN clause. </name>
    <internalKey>IBM2636I</internalKey>
    <description>In a dominated SELECT statement, if a WHEN clause has the same value as an earlier WHEN clause, the code for the second WHEN clause will never be executed. This message will be produced only if the SELECT statement is otherwise suitable for transformation into a branch table. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2637I</key>
    <name>An ENTRY invoked as a function should have the RETURNS attribute. </name>
    <internalKey>IBM2637I</internalKey>
    <description>If an ENTRY is used as a function, it should be declared with the RETURNS attribute. The compiler will apply the RETURNS attribute to both of the ENTRYs in this example, but for E, the compiler will assume it will return FLOAT DEC while for M, it will assume it will return FIXED BIN. dcl e entry; dcl m entry; a = e(); a = m(); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2638I</key>
    <name>Statement used count intermediate language instructions. </name>
    <internalKey>IBM2638I</internalKey>
    <description>This message is produced if a statement uses more intermediate language instructions. than allowed by the MAXGEN compiler option. It may point to statements that are excessively complex. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2639I</key>
    <name>Previous statement used count intermediate language instructions. </name>
    <internalKey>IBM2639I</internalKey>
    <description>This message is produced if a statement uses more intermediate language instructions. than allowed by the MAXGEN compiler option. It may point to statements that are excessively complex. This message, rather than message IBM2638, is produced under the same situations as message IBM2638 except the STMT number option must also be in effect. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2640I</key>
    <name>Target is a REFER object. Results are undefined if an assignment changes a REFER object. </name>
    <internalKey>IBM2640I</internalKey>
    <description>Changing REFER objects might cause subsequent code to fail. For example, in the following code, the first assignment causes the second assignment to overwrite storage. dcl 1 a based(p), 2 b fixed bin(31), 2 c fixed bin(31), 2 d( 10 refer(c) ), 21 3 e fixed bin(31), 3 f fixed bin(31); allocate a; a.c = 15; a.f = 0;; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2641I</key>
    <name>The suboption option of the option compiler option must be followed by a (possibly empty) parenthesized list. </name>
    <internalKey>IBM2641I</internalKey>
    <description>A suboption of a compiler option has been incorrectly specified. It must be followed by a left parenthesis and then a (possibly empty) list of items and a closing right parenthesis. *process deprecate(builtin); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2642I</key>
    <name>OPTIONS(REENTRANT) is ignored. </name>
    <internalKey>IBM2642I</internalKey>
    <description>Specifying OPTIONS(REENTRANT) on a PROCEDURE or BEGIN block has no effect on the generated code. Your code will be reentrant only if it does not alter any STATIC variables. You can use the DEFAULT(NONASGN) compiler option to force the compiler to flag assignments to STATIC variables. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2643I</key>
    <name>The BUILTIN function builtin will be deprecated. </name>
    <internalKey>IBM2643I</internalKey>
    <description>The named built-in function was specified in the BUILTIN suboption of the DEPRECATENEXT option, and so any explicit or contextual declaration of it is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2644I</key>
    <name>The INCLUDE file filename will be deprecated. </name>
    <internalKey>IBM2644I</internalKey>
    <description>The named INCLUDE file was specified in the INCLUDE suboption of the DEPRECATENEXT option, and so any attempt to include it is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2645I</key>
    <name>The ENTRY named entryname will be deprecated. </name>
    <internalKey>IBM2645I</internalKey>
    <description>The named ENTRY was specified in the ENTRY suboption of the DEPRECATENEXT option, and so any explicit or contextual declaration of it is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2646I</key>
    <name>The VARIABLE named variable will be deprecated. </name>
    <internalKey>IBM2646I</internalKey>
    <description>The named VARIABLE was specified in the VARIABLE suboption of the DEPRECATENEXT option, and so any explicit or contextual declaration of it is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2647I</key>
    <name>The statementname statement will be deprecated. </name>
    <internalKey>IBM2647I</internalKey>
    <description>The named statement was specified in the STMT suboption of the DEPRECATENEXT option, and so any use of that statement is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2648I</key>
    <name>Declaration contains count INITIAL items. </name>
    <internalKey>IBM2648I</internalKey>
    <description>Change the declaration to STATIC, or remove the INITIAL items and copy the INITIAL item from a STATIC variable. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2649I</key>
    <name>The binary value binary value appears more than once in the INLIST argument set. </name>
    <internalKey>IBM2649I</internalKey>
    <description>In INLIST( x, y1, y2, ... ), no y value should appear twice. This message will be produced only if the INLIST function is otherwise suitable for transformation into a branch table. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2650I</key>
    <name>The ordinal ordinal name appears more than once in the INLIST argument set. </name>
    <internalKey>IBM2650I</internalKey>
    <description>In INLIST( x, y1, y2, ... ), no y value should appear twice. This message will be produced only if the INLIST function is otherwise suitable for transformation into a branch table. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2651I</key>
    <name>Block block name contains count branches. </name>
    <internalKey>IBM2651I</internalKey>
    <description>This message is produced if a block contains more branches than allowed by the MAXBRANCH compiler option. It may point to blocks that are excessively complex. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2652I</key>
    <name>REINIT reference contains no element with an INITIAL attribute. </name>
    <internalKey>IBM2652I</internalKey>
    <description>In the statement REINIT x, x should contain some element with an INITIAL attribute. If not, no code will be generated for the statement. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2653I</key>
    <name>The list of preprocessor options must be enclosed in quotation marks. </name>
    <internalKey>IBM2653I</internalKey>
    <description>For example, rather than specifying PP(SQL(VERSION(AUTO))), specify PP(SQL('VERSION(AUTO)')). Chapter 3. Compiler Error Messages (1226-1499, 2400-2599) </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1226I</key>
    <name>Area extent is reduced to maximum value. </name>
    <internalKey>IBM1226I</internalKey>
    <description>The maximum size allowed for an AREA variable is 16777216. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1227I</key>
    <name>keyword statement is not allowed where an executable statement is required. A null statement will be inserted before the keyword statement. </name>
    <internalKey>IBM1227I</internalKey>
    <description>In certain contexts, for example after an IF-THEN clause, only executable statements are permitted. A DECLARE, DEFINE, DEFAULT or FORMAT statement has been found in one of these contexts. A null statement, (a statement consisting of only a semicolon) will be inserted before the offending statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1228I</key>
    <name>DEFAULT statement is not allowed where an executable statement is required. The DEFAULT statement will be enrolled in the current block, and a null statement will be inserted in its place. </name>
    <internalKey>IBM1228I</internalKey>
    <description>In certain contexts, for example after an IF-THEN clause, only executable statements are permitted. A DEFAULT statement has been found in one of these contexts. A null statement (a statement consisting of only a semicolon) will be inserted in place of the DEFAULT statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1229I</key>
    <name>FORMAT statement is not allowed where an executable statement is required. The FORMAT statement will be enrolled in the current block, and a null statement will be inserted in its place. </name>
    <internalKey>IBM1229I</internalKey>
    <description>In certain contexts, for example after an IF-THEN clause, only executable statements are permitted. A FORMAT statement has been found in one of these contexts. A null statement (a statement consisting of only a semicolon) will be inserted in place of the FORMAT statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1230I</key>
    <name>Arguments have been specified for the variable variable name, but it is not an entry variable. </name>
    <internalKey>IBM1230I</internalKey>
    <description>Argument lists are valid only for ENTRY references. dcl a(15) entry returns( fixed bin(31) ); i = a(3)(4); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1231I</key>
    <name>Arguments/subscripts have been specified for the variable variable name, but it is neither an entry nor an array variable. </name>
    <internalKey>IBM1231I</internalKey>
    <description>Argument/subscript lists are valid only for ENTRY and array references. dcl a fixed bin; i = a(3); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1232I</key>
    <name>Extraneous comma at end of statement ignored. </name>
    <internalKey>IBM1232I</internalKey>
    <description>A comma was followed by a semicolon rather than by a valid syntactical element (such as an identifier). The comma will be ignored in order to make the semicolon valid. Under RULES(LAXPUNC), a message with the same text, but lesser severity would be issued dcl 1 a, 2 b fixed bin, 2 c fixed bin, ; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1233I</key>
    <name>Missing character assumed. </name>
    <internalKey>IBM1233I</internalKey>
    <description>The indicated character is missing, and there are no more characters in the source. The missing character has been inserted by the parser in order to correct your source. Under RULES(LAXPUNC), a message with the same text, but lesser severity would be issued </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1234I</key>
    <name>Missing character assumed before character. </name>
    <internalKey>IBM1234I</internalKey>
    <description>The indicated character is missing and has been inserted by the parser in order to correct your source. Under RULES(LAXPUNC), a message with the same text, but lesser severity would be issued display( ’Program starting’ ; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1235I</key>
    <name>No data format item in format list. </name>
    <internalKey>IBM1235I</internalKey>
    <description>Data items cannot be transmitted unless a data format item is given in the format list. put edit ( (130)’-’ ) ( col(1) ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1236I</key>
    <name>Subscripts on keyword labels are ignored. </name>
    <internalKey>IBM1236I</internalKey>
    <description>A label specified on a PROCEDURE, PACKAGE or ENTRY statement should have no subscripts. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1237I</key>
    <name>EXTERNAL ENTRY attribute is assumed for variable-name. </name>
    <internalKey>IBM1237I</internalKey>
    <description>An undeclared variable is used with an arguments list. This should give it a contextual declaration as BUILTIN, but its name is not that of a built-in function. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1238I</key>
    <name>The second argument to the BUILTIN name built-in is greater than the precision of the result. </name>
    <internalKey>IBM1238I</internalKey>
    <description>The sift amount in ISLL is should not be greater than the precision of the result. i = isll( n, 221 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1239I</key>
    <name>The attribute attribute is not supported and is ignored. </name>
    <internalKey>IBM1239I</internalKey>
    <description>The named attribute is either not part of the SAA PL/I language and is not supported on this platform. dcl f file transient; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1240I</key>
    <name>The attribute attribute is invalid in a RETURNS descriptor. </name>
    <internalKey>IBM1240I</internalKey>
    <description>The RETURNS descriptor may not specify an array. dcl a entry returns( (12) fixed bin ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1241I</key>
    <name>Only '=' and '^=' are allowed as operators in comparisons involving complex numbers. </name>
    <internalKey>IBM1241I</internalKey>
    <description>Equal and not equal are defined for complex variables, but you have attempted to relate them in some other way. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1242I</key>
    <name>Only '=' and '^=' are allowed as operators in comparisons involving program control data. </name>
    <internalKey>IBM1242I</internalKey>
    <description>Other relationships between program control data are not defined. Perhaps a variable was misspelled. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1243I</key>
    <name>REGIONAL(integer specification (2 or 3)) ENVIRONMENT option is not supported. </name>
    <internalKey>IBM1243I</internalKey>
    <description>REGIONAL(2) and REGIONAL(3) ENVIRONMENT options are syntax-checked during compile-time but are not supported during run-time. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1244I</key>
    <name>The variable specified as the option value in an ENVIRONMENT option must be a STATIC scalar with the attributes REAL FIXED BIN(31,0). </name>
    <internalKey>IBM1244I</internalKey>
    <description>This applies to the KEYLENGTH, KEYLOC and RECSIZE suboptions. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1245I</key>
    <name>The variable specified as the option value in an ENVIRONMENT option must be a STATIC scalar with the attribute CHARACTER. </name>
    <internalKey>IBM1245I</internalKey>
    <description>This applies to the PASSWORD suboption. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1246I</key>
    <name>Argument to BUILTIN name built-in should be CONNECTED. </name>
    <internalKey>IBM1246I</internalKey>
    <description>This message applies, for example, to the ADDR built-in function. The value returned by the ADDR function is the address of the first byte of its argument. If you use this pointer to refer to a based variable, the variable may be mapped over storage occupied by some other variable, rather than the storage occupied by the argument. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1248I</key>
    <name>Argument to BUILTIN name built-in should have arithmetic type. </name>
    <internalKey>IBM1248I</internalKey>
    <description>The argument to the named built-in function should have arithmetic type. The required implicit conversion will be performed, but this may indicate a programming error. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1249I</key>
    <name>Argument to BUILTIN name built-in should have CHARACTER type. </name>
    <internalKey>IBM1249I</internalKey>
    <description>The argument to the named built-in function should have CHARACTER type. The required implicit conversion will be performed, but this may indicate a programming error. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1272I</key>
    <name>Argument number argument number to BUILTIN name built-in is negative. It will be changed to 0. </name>
    <internalKey>IBM1272I</internalKey>
    <description>The second argument to built-in functions such as COPY and REPEAT must be nonnegative. x = copy( y, -1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1273I</key>
    <name>Third argument to BUILTIN name built-in is negative. It will be changed to 0. </name>
    <internalKey>IBM1273I</internalKey>
    <description>The third argument to built-in functions such as COMPARE, PLIFILL, and PLIMOVE must be nonnegative. call plimove( a, b, -1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1274I</key>
    <name>RULES(NOLAXIF) requires BIT(1) expressions in IF, WHILE, etc. </name>
    <internalKey>IBM1274I</internalKey>
    <description>Expressions in IF, WHILE, UNTIL and undominated WHEN clauses should have the attributes BIT(1) NONVARYING. If not, the expression should be compared to an appropriate null value. This message will not be issued if the RULES(LAXIF) option is specified. dcl x bit(8) aligned; ... if x then ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1281I</key>
    <name>OPTIONS(RETCODE) on ATTACH reference is invalid and will be ignored. </name>
    <internalKey>IBM1281I</internalKey>
    <description>OPTIONS(RETCODE) is not supported on ATTACH references. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1293I</key>
    <name>WIDECHAR extent is reduced to maximum value. </name>
    <internalKey>IBM1293I</internalKey>
    <description>The maximum length allowed for a WIDECHAR variable is 32767. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1294I</key>
    <name>BIT extent is reduced to maximum value. </name>
    <internalKey>IBM1294I</internalKey>
    <description>The maximum length allowed for a BIT variable is 32767. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1295I</key>
    <name>Sole bound specified is less than 1. An upper bound of 1 is assumed. </name>
    <internalKey>IBM1295I</internalKey>
    <description>The default lower bound is 1, but the upper bound must be greater than the lower bound. dcl x(-5) fixed bin; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1296I</key>
    <name>The BYADDR option conflicts with the SYSTEM option. </name>
    <internalKey>IBM1296I</internalKey>
    <description>The arguments passed to the MAIN procedure when SYSTEM(IMS) or SYSTEM(CICS) is in effect should not have the BYADDR attribute. *process system(ims); a: proc( x ); dcl x ptr byaddr; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1297I</key>
    <name>Source and target in BY NAME assignment have no matching assignable base identifiers. </name>
    <internalKey>IBM1297I</internalKey>
    <description>In a BY NAME, the source and target structures should have at least one matching base element identifier. dcl 1 a, 2 b, 2 c, 2 d; dcl 1 w, 2 x, 2 y, 2 z; a = w, by name; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1298I</key>
    <name>Characters in B3 literals must be 0-7. </name>
    <internalKey>IBM1298I</internalKey>
    <description>In a B3 literal, each character must be either 0-7. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1299I</key>
    <name>CHARACTER extent is reduced to maximum value. </name>
    <internalKey>IBM1299I</internalKey>
    <description>The maximum length allowed for a CHARACTER variable is 32767. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1300I</key>
    <name>variable name is contextually declared as attribute. </name>
    <internalKey>IBM1300I</internalKey>
    <description>This is an E-level message because RULES(NOLAXDCL) has been specified. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1301I</key>
    <name>A DECIMAL exponent is required. </name>
    <internalKey>IBM1301I</internalKey>
    <description>An E in a FLOAT constant must be followed by at least one decimal digit (optionally preceded by a sign). </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1302I</key>
    <name>The limit on the number of DEFAULT predicates in a block has already been reached. This and subsequent DEFAULT predicates in this block will be ignored. </name>
    <internalKey>IBM1302I</internalKey>
    <description>Each block should contain no more than 31 DEFAULT predicates. 25 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1303I</key>
    <name>A second argument to the BUILTIN name built-in must be supplied for arrays with more than one dimension. A value of 1 is assumed. </name>
    <internalKey>IBM1303I</internalKey>
    <description>The LBOUND, HBOUND, and DIMENSION built-in functions require two arguments when applied to arrays having more than one dimension. dcl a(5,10) fixed bin; do i = 1 to lbound(a); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1304I</key>
    <name>Second argument to BUILTIN name built-in is not positive. A value of 1 is assumed. </name>
    <internalKey>IBM1304I</internalKey>
    <description>The DIMENSION, HBOUND and LBOUND built-in functions require that the second argument be positive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1305I</key>
    <name>Second argument to BUILTIN name built-in is greater than the number of dimensions for the first argument. A value of dimension count is assumed. </name>
    <internalKey>IBM1305I</internalKey>
    <description>The second argument to the LBOUND, HBOUND, and DIMENSION built-in functions must be no greater than the number of dimensions of their array arguments. dcl a(5,10) fixed bin; do i = 1 to lbound(a,3); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1306I</key>
    <name>Repeated declaration of identifier is invalid and will be ignored. </name>
    <internalKey>IBM1306I</internalKey>
    <description>Level 1 variable names must not be repeated in the same block. dcl a fixed bin, a float; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1307I</key>
    <name>Duplicate specification of arithmetic precision. Subsequent specification ignored. </name>
    <internalKey>IBM1307I</internalKey>
    <description>The precision attribute must be specified only once in a declare. dcl a fixed(15) bin(31); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1308I</key>
    <name>Repeated declaration of identifier is invalid. The name will be replaced by an asterisk. </name>
    <internalKey>IBM1308I</internalKey>
    <description>The variable names at any given sublevel within a structure or union must be unique. dcl 1 a, 2 b fixed, 2 b float; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1309I</key>
    <name>Duplicate specification of attribute. Subsequent specification ignored. </name>
    <internalKey>IBM1309I</internalKey>
    <description>Attributes like INITIAL must not be repeated for an element of a DECLARE statement. dcl a fixed init(0) bin init(2); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1310I</key>
    <name>The attribute character conflicts with previous attributes and is ignored. </name>
    <internalKey>IBM1310I</internalKey>
    <description>Attributes must be consistent. dcl a fixed real float; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1311I</key>
    <name>EXTERNAL name contains no non-blank characters and is ignored. </name>
    <internalKey>IBM1311I</internalKey>
    <description>The external name should contain some nonblank characters. dcl x external( ’ ’ ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1312I</key>
    <name>WX literals should contain a multiple of 4 hex digits. </name>
    <internalKey>IBM1312I</internalKey>
    <description>WX literals must represent unicode strings and hence must contain a multiple of 4 hex digits. x = ’00’wx; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1314I</key>
    <name>ELSE clause outside of an open IF-THEN statement is ignored. </name>
    <internalKey>IBM1314I</internalKey>
    <description>ELSE clauses are valid immediately after an IF-THEN statement. do; if a &gt; b then; end; else a = 0; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1315I</key>
    <name>END label matches a label on an open group, but that group label is subscripted. </name>
    <internalKey>IBM1315I</internalKey>
    <description>END statements for groups with a subscripted label must have labels that are also subscripted. a(1): do; ... end a; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1316I</key>
    <name>END label is not a label on any open group. </name>
    <internalKey>IBM1316I</internalKey>
    <description>A Label on END statement must match a LABEL on an open BEGIN, DO, PACKAGE, PROCEDURE, or SELECT statement. a: do; ... end b; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1317I</key>
    <name>An END statement may be missing after an OTHERWISE unit. One will be inserted. </name>
    <internalKey>IBM1317I</internalKey>
    <description>After an OTHERWISE unit in a SELECT statement, only an END statement is valid. select; when ( ... ) do; end; otherwise do; end; display( .... ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1318I</key>
    <name>The ENVIRONMENT option option-name conflicts with preceding ENVIRONMENT options. This option will be ignored. </name>
    <internalKey>IBM1318I</internalKey>
    <description>There was a conflict detected in the ENVIRONMENT options specification. In the example ENV(CONSECUTIVE INDEXED), the INDEXED option conflicts with the CONSECUTIVE option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1319I</key>
    <name>STRINGSIZE condition raised while evaluating expression. Result is truncated. </name>
    <internalKey>IBM1319I</internalKey>
    <description>During the conversion of a user expression during the compilation, the target string was found to be shorter than the source, thus causing the STRINGSIZE condition to be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1320I</key>
    <name>STRINGRANGE condition raised while evaluating expression. Arguments are adjusted to fit. </name>
    <internalKey>IBM1320I</internalKey>
    <description>If all the arguments in a SUBSTR reference are constants or restricted expressions, the reference will be evaluated at compile- time and the STRINGRANGE condition will occur if the arguments do not comply with the rules described for the SUBSTR built-in function. a = substr( ’abcdef’, 5, 4 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1321I</key>
    <name>LEAVE/ITERATE label matches a label on an open DO group, but that DO group label is subscripted. </name>
    <internalKey>IBM1321I</internalKey>
    <description>LEAVE/ITERATE statements for groups with a subscripted label must have labels that are also subscripted. a(1): do; ... leave a; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1322I</key>
    <name>LEAVE/ITERATE label is not a label on any open DO group in its containing block. </name>
    <internalKey>IBM1322I</internalKey>
    <description>LEAVE/ITERATE must specify a label on an open DO loop in the same block as the LEAVE/ITERATE statement. a: do loop; begin; leave a; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1323I</key>
    <name>ITERATE/LEAVE statement is invalid outside an open DO statement. The statement will be ignored. </name>
    <internalKey>IBM1323I</internalKey>
    <description>ITERATE/LEAVE statements are valid only inside DO groups. a: begin; ... leave a; ... end a; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1324I</key>
    <name>The name name occurs more than once in the EXPORTS clause. </name>
    <internalKey>IBM1324I</internalKey>
    <description>Names in the EXPORTS clause of a package statement must be unique. a: package exports( a1, a2, a1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1325I</key>
    <name>The name name occurs in the EXPORTS clause, but is not the name of any level-1 procedure. </name>
    <internalKey>IBM1325I</internalKey>
    <description>Each name in the EXPORTS clause of a package statement must be the name of some level-1 procedure in that package. a: package exports( a1, a2, a3 ); 27 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1326I</key>
    <name>Variables declared without a name must be structure members or followed by a substructure list. </name>
    <internalKey>IBM1326I</internalKey>
    <description>An asterisk may be used only for structure or union names, or for members of structures or unions. An asterisk may not be used for a level-1 structure name that specifies the LIKE attribute. dcl * char(20) static init(’who can use me’); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1327I</key>
    <name>The CHARACTER VARYING parameter to MAIN should be ASCII with the attribute NATIVE. </name>
    <internalKey>IBM1327I</internalKey>
    <description>If the parameter is EBCDIC or has the attribute NONNATIVE, unpredictable results can occur. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1328I</key>
    <name>The CHARACTER VARYING parameter to MAIN should be EBCDIC with the attribute BIGENDIAN. </name>
    <internalKey>IBM1328I</internalKey>
    <description>If the parameter is ASCII or has the attribute LITTLEENDIAN, unpredictable results can occur. This message applies only to SYSTEM(MVS) etc. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1330I</key>
    <name>The I in an iSUB token must be bigger than zero. A value of 1 is assumed. </name>
    <internalKey>IBM1330I</internalKey>
    <description>The I in an iSUB token must represent a valid dimension number. dcl b(8) fixed bin def(0sub,1); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1331I</key>
    <name>The I in an iSUB token must have no more than 2 digits. A value of 1 is assumed. </name>
    <internalKey>IBM1331I</internalKey>
    <description>The I in an iSUB token must have only 1 or 2 digits. dcl b(8) fixed bin def(001sub,1); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1332I</key>
    <name>The format-item format item requires an argument when used in GET statement. A value of 1 is assumed. </name>
    <internalKey>IBM1332I</internalKey>
    <description>A width must be specified on A, B, and G format items when specified on a GET statement. get edit(name) (a); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1333I</key>
    <name>Non-asterisk array bounds are not permitted in GENERIC descriptions. </name>
    <internalKey>IBM1333I</internalKey>
    <description>All array bounds in generic descriptions must be asterisks. dcl x generic ( e1 when( (10) fixed ), ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1334I</key>
    <name>String lengths and area sizes are not permitted in GENERIC descriptions. </name>
    <internalKey>IBM1334I</internalKey>
    <description>All string lengths and area sizes in generic descriptions must be asterisks. dcl x generic ( e1 when( char(10) ), ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1335I</key>
    <name>Entry description lists are not permitted in GENERIC descriptions. </name>
    <internalKey>IBM1335I</internalKey>
    <description>Any ENTRY attribute in a generic description list must not be qualified with an entry description list. dcl x generic ( e1 when( entry( ptr ) ), ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1336I</key>
    <name>GRAPHIC extent is reduced to maximum value. </name>
    <internalKey>IBM1336I</internalKey>
    <description>The maximum length allowed for a GRAPHIC variable is 16383. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1337I</key>
    <name>GX literals should contain a multiple of 4 hex digits. </name>
    <internalKey>IBM1337I</internalKey>
    <description>GX literals must represent graphic strings and hence must contain a multiple of 4 hex digits. x = ’00’gx; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1338I</key>
    <name>Upper bound is less than lower bound. Bounds will be reversed. </name>
    <internalKey>IBM1338I</internalKey>
    <description>A variable has been declared with an upper bound that is less than its lower bound. The upper and lower bounds will be swapped in order to correct this. For example, DECLARE x(3:1) will be changed to DECLARE x(1:3). </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1339I</key>
    <name>Identifier is too long. It will be collapsed to identifier. </name>
    <internalKey>IBM1339I</internalKey>
    <description>The maximum length of an identifier is set by the NAME suboption of the LIMITS compiler option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1340I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name contains BIT data. NOMAP is assumed. </name>
    <internalKey>IBM1340I</internalKey>
    <description>An argument containing BIT data has been found in a call to a COBOL routine. Mapping of such structures between PL/I and COBOL is not supported. dcl f ext entry options( cobol ); dcl 1 a, 2 b bit(8), 2 c bit(8); call f( a ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1341I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is or contains a UNION. NOMAP is assumed. </name>
    <internalKey>IBM1341I</internalKey>
    <description>An argument containing UNION data has been found in a call to a COBOL routine. Mapping of such structures between PL/I and COBOL is not supported. dcl f ext entry options( cobol ); dcl 1 a union, 2 b char(4), 2 c fixed bin(31); call f( a ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1342I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name contains non-constant extents. NOMAP is assumed. </name>
    <internalKey>IBM1342I</internalKey>
    <description>An argument containing non-constant extents has been found in a call to a COBOL routine. Mapping of such structures between PL/I and COBOL is not supported. dcl f ext entry options( cobol ); dcl n static fixed bin init(17); dcl 1 a, 2 b char(n), 2 c fixed bin(31); call f( a ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1343I</key>
    <name>nomap-suboption is invalid as a suboption of option. </name>
    <internalKey>IBM1343I</internalKey>
    <description>The suboption should be specified as ARGn where "n" is an integer greater than 0. dcl f ext entry options( cobol nomap(arg0) ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1344I</key>
    <name>NOMAP specifications are valid only for ILC routines. </name>
    <internalKey>IBM1344I</internalKey>
    <description>NOMAP, NOMAPIN and NOMAPOUT are valid only for COBOL, FORTRAN and ASM Procedures and Entrys. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1345I</key>
    <name>Initial level number in a structure is not 1. </name>
    <internalKey>IBM1345I</internalKey>
    <description>The level-1 DECLARE statement may be missing. dcl 2 a, 3 b, 3 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1346I</key>
    <name>INIT expression should be enclosed in parentheses. </name>
    <internalKey>IBM1346I</internalKey>
    <description>This is required to avoid ambiguities. For example, it is unclear whether all of the elements should be initialized with the value 4 or if the first element should be initialized with the value 9. dcl a(5) fixed bin init( (5)+4 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1347I</key>
    <name>B assumed to complete iSUB. </name>
    <internalKey>IBM1347I</internalKey>
    <description>There is no language element of the form 1su. dcl a(10) def b(1su, 1sub ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1348I</key>
    <name>Digit in BINARY constant is not zero or one. </name>
    <internalKey>IBM1348I</internalKey>
    <description>In a BINARY constant, each digit must be a zero or one. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1349I</key>
    <name>Characters in BIT literals must be 0 or 1. </name>
    <internalKey>IBM1349I</internalKey>
    <description>In a BIT literal, each character must be either zero or one. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1350I</key>
    <name>Character with decimal value n does not belong to the PL/I character set. It will be ignored. </name>
    <internalKey>IBM1350I</internalKey>
    <description>The indicated character is not part of the PL/I character set. This can occur if a program containing NOT or OR symbols is ported from another machine and those symbols are translated to a character that is not part of the PL/I character set. Using the NOT and OR compiler options can help avoid this problem. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1351I</key>
    <name>Characters in hex literals must be 0-9 or A-F. </name>
    <internalKey>IBM1351I</internalKey>
    <description>In a hex literal, each character must be either 0-9 or A-F. 29 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1352I</key>
    <name>The statement element character is invalid. The statement will be ignored. </name>
    <internalKey>IBM1352I</internalKey>
    <description>The statement entered could not be parsed because the specified element is invalid. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1353I</key>
    <name>Use of underscore as initial character in an identifier accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1353I</internalKey>
    <description>Under LANGLVL(SAA), identifiers must start with an alphabetic character or with one of the extralingual characters. They may not start with an underscore. Under LANGLVL(SAA2), identifiers may start with an underscore, although names starting with _IBM are reserved for use by IBM. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1354I</key>
    <name>Multiple argument lists are valid only with the last identifier in a reference. </name>
    <internalKey>IBM1354I</internalKey>
    <description>A reference of the form x(1)(2).y.z is invalid. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1355I</key>
    <name>Empty argument lists are valid only with the last identifier in a reference. </name>
    <internalKey>IBM1355I</internalKey>
    <description>A reference of the form x().y.z is invalid. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1356I</key>
    <name>Character with decimal value n does not belong to the PL/I character set. It is assumed to be an OR symbol. </name>
    <internalKey>IBM1356I</internalKey>
    <description>The indicated character is not part of the PL/I character set, but was immediately followed by the same character. This can occur if a program containing an OR symbol is ported from another machine and this symbol is translated to a character that is not part of the PL/I character set. Using the OR compiler option can help avoid this problem. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1357I</key>
    <name>Character with decimal value n does not belong to the PL/I character set. It is assumed to be a NOT symbol. </name>
    <internalKey>IBM1357I</internalKey>
    <description>The indicated character is not part of the PL/I character set, but was immediately followed by an =, &lt; or &gt; symbol. This can occur if a program containing a NOT symbol is ported from another machine and this symbol is translated to a character that is not part of the PL/I character set. Using the NOT compiler option can help avoid this problem. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1358I</key>
    <name>The scale factor specified in BUILTIN name built-in with a floating-point argument must be positive. It will be changed to 1. </name>
    <internalKey>IBM1358I</internalKey>
    <description>This applies to the ROUND built-in function. The non-positive value will be changed to 1. dcl x float bin(53); x = round( x, -1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1359I</key>
    <name>Names in RANGE(identifier:identifier) are not in ascending order. Order is reversed. </name>
    <internalKey>IBM1359I</internalKey>
    <description>The names must be in ascending order. default range( h : a ) fixed bin; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1360I</key>
    <name>The name identifier has already been defined as a FORMAT constant. </name>
    <internalKey>IBM1360I</internalKey>
    <description>The name of a FORMAT constant cannot be used as the name of a LABEL constant as well. f(1): format( a, x(2), a ); f(2): ; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1361I</key>
    <name>The name identifier has already been defined as a LABEL constant. </name>
    <internalKey>IBM1361I</internalKey>
    <description>The name of a LABEL constant cannot be also used as the name of a FORMAT constant. f(1): ; f(2): format( a, x(2), a ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1362I</key>
    <name>The label label-name has already been declared. The explicit declaration of the label will not be accepted. </name>
    <internalKey>IBM1362I</internalKey>
    <description>Declarations for label constant arrays are not permitted. dcl a(10) label variable; a(1): ... a(2): ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1363I</key>
    <name>Structure level greater than 255 specified. It will be replaced by 255. </name>
    <internalKey>IBM1363I</internalKey>
    <description>The maximum structure level supported is 255. dcl 1 a, 256 b, 2 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1364I</key>
    <name>Elements with level numbers greater than 1 follow an element without a level number. A level number of 1 is assumed. </name>
    <internalKey>IBM1364I</internalKey>
    <description>A structure level is probably missing. dcl a, 2 b, 2 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1365I</key>
    <name>Statement type resolution requires too many lexical units to be examined. The statement will be ignored. </name>
    <internalKey>IBM1365I</internalKey>
    <description>To determine if a statement is an assignment or another PL/I statement, many elements of the statement may need to be examined. If too many have to be examined, the compiler will flag the statement as in error. For instance, the following statement could be a DECLARE until the equal sign is encountered by the lexer. dcl ( a, b, c ) = d; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1366I</key>
    <name>Level number following LIKE specification is greater than than the level number for the LIKE specification. LIKE attribute will be ignored. </name>
    <internalKey>IBM1366I</internalKey>
    <description>LIKE cannot be specified on a parent structure or union. dcl 1 a like x, 2 b, 2 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1367I</key>
    <name>Statements inside a SELECT must be preceded by a WHEN or an OTHERWISE clause. </name>
    <internalKey>IBM1367I</internalKey>
    <description>A WHEN or OTHERWISE may be missing. select; i = i + 1; when ( a &gt; 0 ) ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1368I</key>
    <name>The attribute character is invalid if it is not followed by an element with a greater logical level. </name>
    <internalKey>IBM1368I</internalKey>
    <description>The named attribute is valid only on parent structures. dcl 1 a, 2 b union, 2 c1 fixed bin(31), 2 c2 float bin(21), ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1369I</key>
    <name>MAIN has already been specified in the PACKAGE. </name>
    <internalKey>IBM1369I</internalKey>
    <description>OPTIONS(MAIN) may be specified for only one PROCEDURE in a PACKAGE. All but the first specification will be ignored. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1370I</key>
    <name>Extent expression is negative. It will be replaced by the constant 1. </name>
    <internalKey>IBM1370I</internalKey>
    <description>Extents must be positive. dcl x char(-10); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1371I</key>
    <name>Structure element identifier is not dot qualified. </name>
    <internalKey>IBM1371I</internalKey>
    <description>Under the option RULES(NOLAXQUAL), all structure elements should be qualified with the name of at least one of their parents. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1372I</key>
    <name>EXTERNAL specified on internal entry point. </name>
    <internalKey>IBM1372I</internalKey>
    <description>The EXTERNAL attribute is valid only on external procedures and entrys: for example, in a non-package, only on the outermost procedure and entry statements contained in it, and in a package, only on the procedures and entrys listed in the EXPORTS clause of the PACKAGE statement. a: proc; b: proc ext(’_B’); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1373I</key>
    <name>Variable variable name is implicitly declared. </name>
    <internalKey>IBM1373I</internalKey>
    <description>Under the RULES(NOLAXDCL) option, all variables must be declared except for contextual declarations of built-in functions, SYSPRINT and SYSIN. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1374I</key>
    <name>Contextual attributes conflicting with PARAMETER will not be applied to variable name. </name>
    <internalKey>IBM1374I</internalKey>
    <description>Only those contextual attributes that can be applied to a parameter will be applied. For example, CONSTANT and EXTERNAL, which apply to 31 contextual file declarations, will not be applied to file parameters. a: proc( f ); open file( f ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1375I</key>
    <name>The DEFINED variable variable name does not fit into its base variable. </name>
    <internalKey>IBM1375I</internalKey>
    <description>The number of bits, characters or graphics needed for a DEFINED variable must be no more than in the base variable. dcl a char(10); dcl b char(5) defined ( a ) pos( 8 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1376I</key>
    <name>Factoring of level numbers into declaration lists containing level numbers is invalid. The level numbers in the declaration list will be ignored. </name>
    <internalKey>IBM1376I</internalKey>
    <description>Only attributes can be factored into declaration lists. dcl 1 a, 2 ( b, 3 c, 3 d ) fixed; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1377I</key>
    <name>A scale factor has been specified as an argument to the BUILTIN name built-in, but the result of that function has type FLOAT. The scale factor will be ignored. </name>
    <internalKey>IBM1377I</internalKey>
    <description>Scale factors are valid only for FIXED values. x = binary(1e0,4,2); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1378I</key>
    <name>An arguments list or subscripts list has been provided for a GENERIC entry reference. It will be ignored. </name>
    <internalKey>IBM1378I</internalKey>
    <description>GENERIC entry references are not allowed to contain an arguments or subscripts list. dcl t generic( sub1(10) when((*)), sub2 when((*,*)) ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1379I</key>
    <name>Locator qualifier for GENERIC reference is ignored. </name>
    <internalKey>IBM1379I</internalKey>
    <description>GENERIC references cannot be locator-qualified. dcl x generic ( ... ); call p-&gt;x; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1380I</key>
    <name>Target structure in assignment contains no elements with the ASSIGNABLE attribute. No assignments will be generated. </name>
    <internalKey>IBM1380I</internalKey>
    <description>In an assignment to a structure, some element of the structure must have the assignable attribute. dcl 1 a based, 2 nonasgn fixed bin, 2 nonasgn fixed bin; p-&gt;a = 0; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1381I</key>
    <name>DEFINED base for a BIT structure should be aligned. </name>
    <internalKey>IBM1381I</internalKey>
    <description>If a BIT structure (or union) is defined on a variable that is not aligned on a byte boundary, unpredictable results may occur. This is especially true if a substructure of the DEFINED variable is passed to another routine. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1382I</key>
    <name>INITIAL attribute is invalid for STATIC FORMAT variables. Storage class is changed to AUTOMATIC. </name>
    <internalKey>IBM1382I</internalKey>
    <description>FORMAT variables require block activation information; they cannot be initialized at compile-time. If the variable were a member of a structure, the storage class would not be changed to AUTOMATIC, and a severe message would be issued instead. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1383I</key>
    <name>Labels on keyword statements are invalid and ignored. </name>
    <internalKey>IBM1383I</internalKey>
    <description>Labels are not permitted on DECLARE, DEFAULT, and DEFINE statements or on WHEN and OTHERWISE clauses. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1384I</key>
    <name>message </name>
    <internalKey>IBM1384I</internalKey>
    <description>This message is used to report back end error messages. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1385I</key>
    <name>Invalid DEFINED - string overlay defining attempted. </name>
    <internalKey>IBM1385I</internalKey>
    <description>The base variable in the DEFINED attribute must consist of UNALIGNED, NONVARYING string variables of the same string type as the DEFINED variable. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1386I</key>
    <name>DEFINED base for a BIT variable should not be subscripted. </name>
    <internalKey>IBM1386I</internalKey>
    <description>When one bit variable is defined on a second (the base), the base may be an array, but it must not be subscripted. dcl a(20) bit(8) unaligned; dcl b bit(8) defined( a(3) ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1387I</key>
    <name>The NODESCRIPTOR attribute is invalid when any parameters have * extents. The NODESCRIPTOR attribute will be ignored. </name>
    <internalKey>IBM1387I</internalKey>
    <description>A parameter can have * extents only if a descriptor is also passed. The NODESCRIPTOR attribute will be ignored, and descriptors will be assumed to have been passed for all array, structure and string arguments. a: proc( x ) options(nodescriptor); dcl x char(*); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1388I</key>
    <name>The NODESCRIPTOR attribute is invalid when any parameters have the NONCONNECTED attribute. </name>
    <internalKey>IBM1388I</internalKey>
    <description>A parameter can have the NONCONNECTED attribute only if a descriptor is also passed. a: proc( x ) options(nodescriptor); dcl x(20) fixed bin nonconnected; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1389I</key>
    <name>The identifier identifier is not the name of a built-in function. The BUILTIN attribute will be ignored. </name>
    <internalKey>IBM1389I</internalKey>
    <description>The BUILTIN attribute can be applied only to identifiers that are the names of built-in functions or subroutines. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1390I</key>
    <name>note </name>
    <internalKey>IBM1390I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 8. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1391I</key>
    <name>End-of-source has been encountered after an unmatched comment marker. </name>
    <internalKey>IBM1391I</internalKey>
    <description>An end-of-comment marker is probably missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1392I</key>
    <name>End-of-source has been encountered after an unmatched quote. </name>
    <internalKey>IBM1392I</internalKey>
    <description>A closing quote is probably missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1393I</key>
    <name>Item in OPTIONS list conflicts with other attributes in the declaration. option-name is ignored. </name>
    <internalKey>IBM1393I</internalKey>
    <description>The indicated element of the options list is invalid. dcl a file options( assembler ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1394I</key>
    <name>Item in OPTIONS list is invalid for BEGIN blocks. option-name is ignored. </name>
    <internalKey>IBM1394I</internalKey>
    <description>The indicated element of the options list is invalid for BEGIN blocks (although it may be valid for PROCEDUREs). begin options( assembler ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1395I</key>
    <name>Item in OPTIONS list is invalid for PACKAGEs. option-name is ignored. </name>
    <internalKey>IBM1395I</internalKey>
    <description>The indicated element of the options list is invalid for PACKAGEs (although it may be valid for PROCEDUREs). a: package exports(*) options( assembler ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1396I</key>
    <name>Item in OPTIONS list is invalid for PROCEDUREs. option-name is ignored. </name>
    <internalKey>IBM1396I</internalKey>
    <description>The indicated element of the options list is invalid for PROCEDUREs (although it may be valid for ENTRYs). a: procedure options( inter ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1397I</key>
    <name>Item in OPTIONS list is invalid for nested PROCEDUREs. option-name is ignored. </name>
    <internalKey>IBM1397I</internalKey>
    <description>The indicated element of the options list is invalid for nested PROCEDUREs (although it may be valid for PROCEDUREs). 33 a: proc; b: proc options( main ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1398I</key>
    <name>Invalid item in OPTIONS list. option-name is ignored. </name>
    <internalKey>IBM1398I</internalKey>
    <description>The indicated element of the options list is not a supported option in any statement or declaration. a: proc options( unknown ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1399I</key>
    <name>Item in OPTIONS list is invalid for ENTRY statements. option-name is ignored. </name>
    <internalKey>IBM1399I</internalKey>
    <description>The indicated element of the options list is invalid for ENTRY statements (although it may be valid for PROCEDUREs). a: entry options( chargraphic ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1400I</key>
    <name>Item in OPTIONS list conflicts with preceding items. option-name is ignored. </name>
    <internalKey>IBM1400I</internalKey>
    <description>The elements of the options list must be consistent, unlike in the example where BYVALUE and BYADDR conflict. a: proc options( byvalue byaddr ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1401I</key>
    <name>Parameter attributes have been specified for a variable that is not a parameter. The parameter attributes are ignored. </name>
    <internalKey>IBM1401I</internalKey>
    <description>Parameter attributes, such as BYVALUE or CONNECTED, may be specified only for parameters. a: proc; dcl x byvalue ptr; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1402I</key>
    <name>Constant in POSITION attribute is less than 1. </name>
    <internalKey>IBM1402I</internalKey>
    <description>The POSITION attribute must specify a positive value. dcl a def b pos(-10); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1403I</key>
    <name>The end of the source was reached before the logical end of the program. Null statements and END statements will be inserted as necessary to complete the program. </name>
    <internalKey>IBM1403I</internalKey>
    <description>The source should contain END statements for all PACKAGEs, PROCEDUREs, BEGIN blocks, DO groups, and SELECT statements, as well as statements for all IF-THEN and ELSE clauses. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1404I</key>
    <name>The procedure name proc-name has already been declared. The explicit declaration of the procedure name will not be accepted. </name>
    <internalKey>IBM1404I</internalKey>
    <description>Declarations for internal procedures are not permitted. a: proc; dcl b entry options(byvalue); b: proc; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1405I</key>
    <name>Only one description is allowed in a returns descriptor. </name>
    <internalKey>IBM1405I</internalKey>
    <description>A function can return only one value. dcl b entry returns( ptr, ptr ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1406I</key>
    <name>The product of the repetition factor repetition-factor and the length of the constant string to which it is applied is greater than the maximum length allowed for a constant. The repetition factor wil</name>
    <internalKey>IBM1406I</internalKey>
    <description>The string represented by a repetition factor applied to another string must conform to the same limits imposed on strings without repetition factors. a = (32767) ’abc’; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1407I</key>
    <name>Scale factor is bigger than 127. It will be replaced by 127. </name>
    <internalKey>IBM1407I</internalKey>
    <description>Scale factors must lie between -128 and 127 inclusive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1408I</key>
    <name>Scale factor is less than -128. It will be replaced by -128. </name>
    <internalKey>IBM1408I</internalKey>
    <description>Scale factors must lie between -128 and 127 inclusive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1409I</key>
    <name>A SELECT statement may be missing. A SELECT statement, without an expression, will be inserted. </name>
    <internalKey>IBM1409I</internalKey>
    <description>A WHEN or OTHERWISE clause has been found outside of a SELECT statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1410I</key>
    <name>Semicolon inserted after ELSE keyword. </name>
    <internalKey>IBM1410I</internalKey>
    <description>An END statement enclosing a statement such as DO or SELECT has been found before the statement required after ELSE. do; if a &gt; b then ... else end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1411I</key>
    <name>Semicolon inserted after ON clause. </name>
    <internalKey>IBM1411I</internalKey>
    <description>An END statement enclosing a statement such as DO or SELECT has been found before the statement required after ON condition. do; ... on zdiv end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1412I</key>
    <name>Semicolon inserted after OTHERWISE keyword. </name>
    <internalKey>IBM1412I</internalKey>
    <description>An END statement may be misplaced or a semicolon may be missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1413I</key>
    <name>Semicolon inserted after THEN keyword. </name>
    <internalKey>IBM1413I</internalKey>
    <description>An END statement may be misplaced or a semicolon may be missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1414I</key>
    <name>Semicolon inserted after WHEN clause. </name>
    <internalKey>IBM1414I</internalKey>
    <description>An END statement may be misplaced or a semicolon may be missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1415I</key>
    <name>Source file does not end with the logical end of the program. </name>
    <internalKey>IBM1415I</internalKey>
    <description>The source file contains statements after the END statement that closed the first PACKAGE or PROCEDURE. These statements will be ignored, but their presence may indicate a programming error. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1416I</key>
    <name>Subscripts have been specified for the variable variable name, but it is not an array variable. </name>
    <internalKey>IBM1416I</internalKey>
    <description>Subscripts can be specified only for elements of an array. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1417I</key>
    <name>Second argument in SUBSTR reference is less than 1. It will be replaced by 1. </name>
    <internalKey>IBM1417I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1418I</key>
    <name>Second argument in SUBSTR reference is too big. It will be trimmed to fit. </name>
    <internalKey>IBM1418I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1419I</key>
    <name>Third argument in SUBSTR reference is less than 0. It will be replaced by 0. </name>
    <internalKey>IBM1419I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1420I</key>
    <name>The factor in K/M constant is too large and is replaced by maximum factor. </name>
    <internalKey>IBM1420I</internalKey>
    <description>The maximum K constant is 2097151K, and the maximum M constant is 2047M. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1421I</key>
    <name>More than 15 dimensions have been specified. Excess will be ignored. </name>
    <internalKey>IBM1421I</internalKey>
    <description>The maximum number of dimensions allowed for a variable, including all inherited dimensions, is 15. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1422I</key>
    <name>Maximum of 500 LIKE attributes per block exceeded. </name>
    <internalKey>IBM1422I</internalKey>
    <description>A block should contain no more than 500 LIKE references. Under LANGLVL(SAA2), there is no limit. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1423I</key>
    <name>UNALIGNED attribute conflicts with AREA attribute. </name>
    <internalKey>IBM1423I</internalKey>
    <description>All AREA variables must be ALIGNED. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1424I</key>
    <name>End of comment marker found when there are no open comments. Marker will be ignored. </name>
    <internalKey>IBM1424I</internalKey>
    <description>An */ was found when there was no open comment. 35 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1425I</key>
    <name>There is no compiler directive directive. Input up to the next semicolon will be ignored. </name>
    <internalKey>IBM1425I</internalKey>
    <description>See the Language Reference Manual for the list of supported compiler directives. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1426I</key>
    <name>Structure level of 0 replaced by 1. </name>
    <internalKey>IBM1426I</internalKey>
    <description>Structure level numbers must be positive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1427I</key>
    <name>Numeric precision of 0 replaced by 1. </name>
    <internalKey>IBM1427I</internalKey>
    <description>Numeric precisions must be positive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1428I</key>
    <name>X literals should contain a multiple of 2 hex digits. </name>
    <internalKey>IBM1428I</internalKey>
    <description>An X literal may not contain an odd number of digits. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1429I</key>
    <name>INITIAL attribute for REFER object variable name is invalid. </name>
    <internalKey>IBM1429I</internalKey>
    <description>In DCL 1 a BASED, 2 b FIXED BIN INIT(3), 2 c( n REFER(b)), the initial clause for 'b' is invalid and may lead to unpredictable results. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1430I</key>
    <name>UNSIGNED attribute for type type type type name conflicts with negative INITIAL values and is ignored. </name>
    <internalKey>IBM1430I</internalKey>
    <description>If an ORDINAL type is declared with the UNSIGNED attribute, any INITIAL values specified must be nonnegative. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1431I</key>
    <name>PRECISION specified for type type type type name is too small to cover its INITIAL values and is adjusted to fit. </name>
    <internalKey>IBM1431I</internalKey>
    <description>An ORDINAL type must have a precision larger enough to cover the range of values defined for it. define ordinal colors ( red init(0), orange init(256) yellow init(512) ) unsigned prec(8); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1432I</key>
    <name>The type type type type name is already defined. The redefinition is ignored. </name>
    <internalKey>IBM1432I</internalKey>
    <description>An ORDINAL type may be defined only once in any block. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1433I</key>
    <name>The name name occurs more than once in the RESERVES clause. </name>
    <internalKey>IBM1433I</internalKey>
    <description>Names in the RESERVES clause of a package statement must be unique. a: package reserves( a1, a2, a1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1434I</key>
    <name>The name name occurs in the RESERVES clause, but is not the name of any level-1 STATIC EXTERNAL variable. </name>
    <internalKey>IBM1434I</internalKey>
    <description>Each name in the RESERVES clause of a package statement must be the name of some level-1 static external variable in that package. a: package reserves( a1, a2, a3 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1435I</key>
    <name>A precision value less than 1 has been specified as an argument to the BUILTIN name built-in. It will be replaced by 15. </name>
    <internalKey>IBM1435I</internalKey>
    <description>Precision values must be positive. middle = divide( todo, 2, 0 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1436I</key>
    <name>The scale factor specified as an argument to the BUILTIN name built-in is out of the valid range. It will be replaced by the nearest valid value. </name>
    <internalKey>IBM1436I</internalKey>
    <description>Scale factors must be between -128 and 127 inclusive. f = fixed( i, 15, 130 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1437I</key>
    <name>The second argument to the BUILTIN name built-in is greater than the maximum FIXED BINARY precision. It will be replaced by the maximum value. </name>
    <internalKey>IBM1437I</internalKey>
    <description>The maximum FIXED BINARY precision supported allowed depends on the FIXEDBIN suboption of the LIMITS option. i = signed( n, 63 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1438I</key>
    <name>Excess arguments for ENTRY ENTRY name ignored. </name>
    <internalKey>IBM1438I</internalKey>
    <description>More arguments were specified in an ENTRY reference than were defined as parameters in that ENTRY's declaration. dcl e entry( fixed bin ); call e( 1, 2 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1439I</key>
    <name>Excess arguments for BUILTIN name built-in ignored. </name>
    <internalKey>IBM1439I</internalKey>
    <description>More arguments were specified for the indicated built-in function than are supported by that built-in function. i = acos( j, k ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1441I</key>
    <name>ENTRY/RETURNS description lists for comparands do not match. </name>
    <internalKey>IBM1441I</internalKey>
    <description>In a comparison of two ENTRY variables or constants, the ENTRY and RETURNS description lists should match. The linkages must also match. dcl e1 entry( fixed ), e2 entry( float ); if e1 = e2 then </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1442I</key>
    <name>The ENTRY/RETURNS description lists in the ENTRY to be assigned to target variable do not match those of the target variable. </name>
    <internalKey>IBM1442I</internalKey>
    <description>In an assignment of an ENTRY variable or constant, the ENTRY and RETURNS description lists for the source should match those of the target. The linkages must also match. dcl e1 variable entry( fixed ), e2 entry( float ); e1 = e2; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1443I</key>
    <name>An ENTRY/RETURNS description list in an ENTRY in the INITIAL list for target variable do not match those of the target variable. </name>
    <internalKey>IBM1443I</internalKey>
    <description>When initializing an ENTRY variable or constant, the ENTRY and RETURNS description lists for the source should match those of the target. The linkages must also match. dcl e1 variable entry( fixed ); dcl e2 variable entry( float ) init( e1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1444I</key>
    <name>The ENTRY/RETURNS description lists in the RETURN statement do not match those in the corresponding RETURNS attribute </name>
    <internalKey>IBM1444I</internalKey>
    <description>When a function returns an ENTRY variable or constant, the ENTRY and RETURNS description lists in the returned ENTRY reference should match those in the containing procedure's RETURNS option. The linkages must also match. a: proc returns( entry( float ) ); dcl e1 entry( fixed ); return( e1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1445I</key>
    <name>The ENTRY/RETURNS description lists for argument number argument-number in entry reference entry name do not match those in the corresponding parameter. </name>
    <internalKey>IBM1445I</internalKey>
    <description>This message also occurs if the linkages do not match. dcl a entry( entry( float ) ); dcl e1 entry( fixed ); call a( e1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1446I</key>
    <name>Third argument in SUBSTR reference is too big. It will be trimmed to fit. </name>
    <internalKey>IBM1446I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1447I</key>
    <name>Literals with an X prefix are valid only in EXEC SQL statements. </name>
    <internalKey>IBM1447I</internalKey>
    <description>In PL/I statements, hex literals should be specified with an X suffix. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1448I</key>
    <name>Use of nonconstant extents in BASED variables without REFER accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1448I</internalKey>
    <description>In the SAA level-1 language definition, extents in BASED variables must all be constant except where the REFER option is used. The following would be invalid dcl x based char(n); 37 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1449I</key>
    <name>Use of type function accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1449I</internalKey>
    <description>Type functions are not part of the SAA level-1 language. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1450I</key>
    <name>keyword keyword accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1450I</internalKey>
    <description>The indicated keyword (UNSIGNED in the example below) is not defined in the SAA level-1 language. dcl x fixed bin unsigned; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1451I</key>
    <name>Use of S, D and Q constants accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1451I</internalKey>
    <description>The definition of the SAA level-1 language does not include S, D, and Q floating-point constants. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1452I</key>
    <name>Use of underscores in constants accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1452I</internalKey>
    <description>The definition of the SAA level-1 language does not permit using underscores in numeric and hex constants. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1453I</key>
    <name>Use of asterisks for names in declares accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1453I</internalKey>
    <description>The definition of the SAA level-1 language does not permit using asterisks for structure element names. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1454I</key>
    <name>Use of XN and XU constants accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1454I</internalKey>
    <description>The definition of the SAA level-1 language does not include XN and XU constants. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1455I</key>
    <name>Use of arguments with BUILTIN name built-in accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1455I</internalKey>
    <description>Under LANGLVL(SAA), the DATETIME built-in function cannot have any arguments. s = datetime(’DDMMYYYY’); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1456I</key>
    <name>Use of 3 arguments with BUILTIN name built-in accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1456I</internalKey>
    <description>Under LANGLVL(SAA), the VERIFY and INDEX built-in functions are supposed to have exactly 2 arguments. i = verify( s, j, k ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1457I</key>
    <name>Use of 1 argument with BUILTIN name built-in accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM1457I</internalKey>
    <description>Under LANGLVL(SAA), the DIM, LBOUND and HBOUND built-in functions are supposed to have 2 arguments. i = dim( a ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1458I</key>
    <name>GOTO is not allowed under RULES(NOGOTO). </name>
    <internalKey>IBM1458I</internalKey>
    <description>Under RULES(NOGOTO(STRICT)), there should be no GOTO statements in your source program except for those that exit an ON-unit. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1459I</key>
    <name>Uninitialized AUTOMATIC variables in a block should not be used in the prologue of that block. </name>
    <internalKey>IBM1459I</internalKey>
    <description>The AUTOMATIC variables in a block may be used in the declare statements and the executable statements of any contained block, but in the block in which they are declared, they should be used only in the executable statements. dcl x fixed bin(15) automatic; dcl y(x) fixed bin(15) automatic; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1460I</key>
    <name>Under RULES(ANS), nonzero scale factors are not permitted in declarations of FIXED BIN. Declared scale factor will be ignored. </name>
    <internalKey>IBM1460I</internalKey>
    <description>RULES(IBM) allows scaled FIXED BIN, but RULES(ANS) supports it only for FIXED DECIMAL. RULES(ANS) will ignore the scale factors in the following declares dcl x fixed bin(31,16); dcl y entry( fixed bin(31,16) ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1461I</key>
    <name>Under RULES(ANS), nonzero scale factors are not permitted when the result of BUILTIN name has the attributes FIXED BIN. Specified scale factor will be ignored. </name>
    <internalKey>IBM1461I</internalKey>
    <description>RULES(IBM) allows scaled FIXED BIN, but RULES(ANS) supports it only for FIXED DECIMAL. RULES(ANS) will ignore the scale factors in the following built-ins dcl (x,y) fixed bin(15,0); put list( add(x,y,31,2) ); put list( bin(x,31,2) ); put list( prec(x,31,2) ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1462I</key>
    <name>Expression in comparison interpreted with DATE attribute. </name>
    <internalKey>IBM1462I</internalKey>
    <description>In a comparison, if one comparand has the DATE attribute, the other should also. If the non-date is an expression that could have a value that is valid for the date pattern, it will be viewed as if it had the same DATE attribute as the date comparand. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1463I</key>
    <name>Operand with DATE attribute is invalid except in compare or assign. DATE attribute will be ignored. </name>
    <internalKey>IBM1463I</internalKey>
    <description>Comparisons are the only infix operations where operands with the DATE attribute may be used. If they are used in any other operation, the DATE attribute will be ignored. So, in the following code, the addition will be flagged and the DATE attribute ignored. dcl x char(5) date(’YYDDD’); put list( x + 1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1464I</key>
    <name>DATE attribute ignored in comparison with non-date expression. </name>
    <internalKey>IBM1464I</internalKey>
    <description>In a comparison, if one comparand has the DATE attribute, the other should also. If the non-date is an expression that could not have a value that is not valid for the date pattern, the DATE attribute will be ignored. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1465I</key>
    <name>Source in assignment has the DATE attribute, but target variable does not. The DATE attribute will be ignored. </name>
    <internalKey>IBM1465I</internalKey>
    <description>If the target in an assignment has the DATE attribute, the source should also. If the target is a pseudovariable, message 1466 is issued instead. dcl x char(6); x = date(); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1466I</key>
    <name>Source in assignment has the DATE attribute, but target does not. The DATE attribute will be ignored. </name>
    <internalKey>IBM1466I</internalKey>
    <description>If the source in an assignment has the DATE attribute, the target should also. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1467I</key>
    <name>Source in INITIAL clause for variable name has the DATE attribute but the target does not. The DATE attribute will be ignored. </name>
    <internalKey>IBM1467I</internalKey>
    <description>If an INITIAL expression has the DATE attribute, the target should also. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1468I</key>
    <name>Argument number argument-number in entry reference entry name has the DATE attribute but the corresponding parameter does not. The DATE attribute will be ignored. </name>
    <internalKey>IBM1468I</internalKey>
    <description>The argument and parameter should match, unlike in the example below dcl x entry( char(6) ); call x( date() ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1469I</key>
    <name>Source in RETURN statement has the DATE attribute, but the corresponding RETURNS option does not. The DATE attribute will be ignored. </name>
    <internalKey>IBM1469I</internalKey>
    <description>The attributes of the RETURNed expression and in the RETURNS option should match, unlike in the example below x: proc returns( char(6) ); ... return( date() ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1470I</key>
    <name>An ID option must be specified for the INCLUDE preprocessor. </name>
    <internalKey>IBM1470I</internalKey>
    <description>No other options are valid for the INCLUDE preprocessor. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1471I</key>
    <name>The ID option specified for the INCLUDE preprocessor is invalid. </name>
    <internalKey>IBM1471I</internalKey>
    <description>The INCLUDE preprocessor ID option must have one suboption consisting of a string specifying the INCLUDE directive. 39 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1472I</key>
    <name>A closing right parenthesis is missing from the ID option specified for the INCLUDE preprocessor. </name>
    <internalKey>IBM1472I</internalKey>
    <description>The suboption specified for the INCLUDE preprocessor ID option must be closed with a right parenthesis. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1473I</key>
    <name>The syntax of the preprocessor INCLUDE directive is incorrect. </name>
    <internalKey>IBM1473I</internalKey>
    <description>A statement that starts with the preprocessor INCLUDE directive specified in that preprocessor's ID option must be followed by a name and, optionally, a semicolon. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1474I</key>
    <name>Source in assignment does not have the DATE attribute, but target variable does. The DATE attribute will be ignored. </name>
    <internalKey>IBM1474I</internalKey>
    <description>If the target in an assignment has the DATE attribute, the source should also. If the target is a pseudovariable, message 1475 is issued instead. dcl x char(6) date(’YYMMDD’); x = ’’; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1475I</key>
    <name>Target in assignment has the DATE attribute, but source does not. The DATE attribute will be ignored. </name>
    <internalKey>IBM1475I</internalKey>
    <description>If the target in an assignment has the DATE attribute, the source should also. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1476I</key>
    <name>Source in INITIAL clause for variable name does not have the DATE attribute but the target does. The DATE attribute will be ignored. </name>
    <internalKey>IBM1476I</internalKey>
    <description>If a variable has the DATE attribute, then any INITIAL value for it should also. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1477I</key>
    <name>Argument number argument-number in entry reference entry name does not have the DATE attribute but the corresponding parameter does. The DATE attribute will be ignored. </name>
    <internalKey>IBM1477I</internalKey>
    <description>The argument and parameter should match, unlike in the example below dcl x entry( char(6) date(’YYMMDD’) ); call x( ’’ ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1478I</key>
    <name>Source in RETURN statement does not have the DATE attribute, but the corresponding RETURNS option does. The DATE attribute will be ignored. </name>
    <internalKey>IBM1478I</internalKey>
    <description>The attributes of the RETURNed expression and in the RETURNS option should match, unlike in the example below x: proc returns( char(6) date(’YYMMDD’) ); ... return( ’’ ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1480I</key>
    <name>Multiple closure of groups is not allowed under RULES(NOMULTICLOSE). </name>
    <internalKey>IBM1480I</internalKey>
    <description>Under RULES(NOMULTICLOSE), there should be no multiple closure of groups in your source program. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1481I</key>
    <name>BYNAME assignment statements are not allowed under RULES(NOBYNAME). </name>
    <internalKey>IBM1481I</internalKey>
    <description>Under RULES(NOBYNAME), there should be no BYNAME assignment statements in your source program. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1482I</key>
    <name>The variable variable name is declared without any data attributes. </name>
    <internalKey>IBM1482I</internalKey>
    <description>It will be given the default attributes, but this may be because of an error in the declare. For instance, in the following example, parentheses may be missing. Under RULES(LAXDCL), this is a W-level message. dcl a, b fixed bin; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1483I</key>
    <name>The structure member variable name is declared without any data attributes. A level number may be incorrect. </name>
    <internalKey>IBM1483I</internalKey>
    <description>It will be given the default attributes, but this may be because of an error in the declare. For instance, in the following example, the level number on c and d should probably be 3. Under RULES(LAXDCL), this is a W-level message. dcl a, b fixed bin; 1 a, 2 b, 2 c, 2 d; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1484I</key>
    <name>An unnamed structure member is declared without any data attributes. A level number may be incorrect. </name>
    <internalKey>IBM1484I</internalKey>
    <description>It will be given the default attributes, but this may be because of an error in the declare. For instance, in the following example, the level number on c and d should probably be 3. Under RULES(LAXDCL), this is a W-level message. dcl a, b fixed bin; 1 a, 2 *, 2 c, 2 d; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2400I</key>
    <name>Compiler backend issued error messages to STDOUT. </name>
    <internalKey>IBM2400I</internalKey>
    <description>Look in STDOUT to see the message issued by the compiler backend. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2401I</key>
    <name>Missing character assumed before character. DECLARE and other nonexecutable statements should not have labels. </name>
    <internalKey>IBM2401I</internalKey>
    <description>The indicated character is missing and has been inserted by the parser in order to correct your source. Under RULES(LAXPUNC), a message with the same text, but lesser severity would be issued xx: dcl test fixed bin; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2402I</key>
    <name>variable name is declared as BASED on the ADDR of variable name, but variable name requires more storage than variable name. </name>
    <internalKey>IBM2402I</internalKey>
    <description>The amount of storage needed for a BASED variable must be no more than provided by its base variable. dcl a char(10); dcl b char(15) based(addr(a)); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2403I</key>
    <name>PROCESS statements are not permitted under the NOPROCESS option. </name>
    <internalKey>IBM2403I</internalKey>
    <description>When the NOPROCESS option is in effect, the source should contain no PROCESS statements. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2404I</key>
    <name>variable name is declared as BASED on the ADDR of variable name, but variable name requires more storage than remains in the enclosing level 1 structure variable name after the location of variable na</name>
    <internalKey>IBM2404I</internalKey>
    <description>The amount of storage needed for a BASED variable must be no more than provided by its base variable. dcl 1 a, 2 a1 char(10), 2 a2 char(10); dcl b char(15) based(addr(a2)); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2405I</key>
    <name>Even decimal precisions are not allowed under RULES(NOEVENDEC). </name>
    <internalKey>IBM2405I</internalKey>
    <description>Under RULES(NOEVENDEC), there should be no FIXED DECIMAL data declared with an even precision. dcl a fixed dec(10); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2406I</key>
    <name>Precision outside VALUE clause will be ignored. </name>
    <internalKey>IBM2406I</internalKey>
    <description>In DEFAULT statements, numeric precisions should be specified only inside VALUE clauses. dft range(*) fixed bin(31); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2407I</key>
    <name>Length outside VALUE clause will be ignored. </name>
    <internalKey>IBM2407I</internalKey>
    <description>In DEFAULT statements, lengths of strings should be specified only inside VALUE clauses. dft range(*) bit(8); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2408I</key>
    <name>AREA size outside VALUE clause will be ignored. </name>
    <internalKey>IBM2408I</internalKey>
    <description>In DEFAULT statements, sizes of AREAs should be specified only inside VALUE clauses. dft range(*) area(10000); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2409I</key>
    <name>RETURN statement without an expression is invalid inside a subprocedure that specified the RETURNS attribute. </name>
    <internalKey>IBM2409I</internalKey>
    <description>All RETURN statements inside functions must specify a value to be returned. 41 a: proc returns( fixed bin ); return; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2410I</key>
    <name>Function function name contains no valid RETURN statement. </name>
    <internalKey>IBM2410I</internalKey>
    <description>Functions must contain at least one RETURN statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2411I</key>
    <name>STRINGOFGRAPHIC( CHARACTER ) option is ignored because argument to STRING built-in function is possibly not contiguous. </name>
    <internalKey>IBM2411I</internalKey>
    <description>The STRINGOFGRAPHIC( CHARACTER ) option will be ignored if the argument contains any elements that are VARYING or if the argument is a NONCONNECTED slice of an array. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2412I</key>
    <name>Procedure has no RETURNS attribute, but contains a RETURN statement. A RETURNS attribute will be assumed. </name>
    <internalKey>IBM2412I</internalKey>
    <description>If a procedure contains a RETURN statement, it should have the RETURNS attribute specified on its PROCEDURE statement. a: proc; return( 0 ); end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2413I</key>
    <name>The attribute attribute should be specified only on parameters and descriptors. </name>
    <internalKey>IBM2413I</internalKey>
    <description>Attributes must be consistent. dcl a fixed based connected; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2414I</key>
    <name>The option option conflicts with the option option. The IBM default of option will be used instead. </name>
    <internalKey>IBM2414I</internalKey>
    <description>The specified options conflict and cannot be used together. On ASCII systems, the compiler will produce this message if you specify the GRAPHIC and EBCDIC options. Conversely, on EBCDIC systems, the compiler will produce this message if you specify the GRAPHIC and ASCII options. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2415I</key>
    <name>Without APAR number, compiler would generate incorrect code for this statement. </name>
    <internalKey>IBM2415I</internalKey>
    <description>The indicated APAR will fix a compiler problem with this statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2416I</key>
    <name>The SEPARATE suboption of TEST is not supported when the LINEDIR option is in effect. </name>
    <internalKey>IBM2416I</internalKey>
    <description>When the LINEDIR option is in effect, only the NOSEPARATE suboption of the TEST option is supported. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2417I</key>
    <name>In FETCHABLE code compiled with NORENT NOWRITABLE(PRV), it is invalid to ALLOCATE or FREE a CONTROLLED variable unless it is a PARAMETER. </name>
    <internalKey>IBM2417I</internalKey>
    <description>In FETCHABLE code, all CONTROLLED variables should be parameters. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2418I</key>
    <name>Variable variable is unreferenced. </name>
    <internalKey>IBM2418I</internalKey>
    <description>Under RULES(NOUNREF), the compiler will issue this message for any level-1 AUTOMATIC variable that is not referenced. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2419I</key>
    <name>option is invalid and ignored unless the ARCH option is level or greater. </name>
    <internalKey>IBM2419I</internalKey>
    <description>The RTCHECK option will be ignored unless the ARCH option is 8 or greater since the necessary instructions are available only with ARCH(8) or later. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2420I</key>
    <name>DFP is invalid and ignored unless the ARCH option is 7 or greater. </name>
    <internalKey>IBM2420I</internalKey>
    <description>The FLOAT(DFP) option will be ignored unless the ARCH option is 7 or greater since the necessary instructions are available only with ARCH(7) or later. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2421I</key>
    <name>A file should not be closed in its ENDFILE block. </name>
    <internalKey>IBM2421I</internalKey>
    <description>In an ENDFILE block for a file, it is invalid to close that file in the ENDFILE block. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2422I</key>
    <name>Under the DFP option, the HEXADEC attribute is not supported for FLOAT DEC. </name>
    <internalKey>IBM2422I</internalKey>
    <description>Under the FLOAT(DFP) option, all FLOAT DECIMAL will be treated as DFP and may not be declared as HEXADEC. The attribute is still valid for FLOAT BIN. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2423I</key>
    <name>Under the DFP option, the IEEE attribute is not supported for FLOAT DEC. </name>
    <internalKey>IBM2423I</internalKey>
    <description>Under the FLOAT(DFP) option, all FLOAT DECIMAL will be treated as DFP and may not be declared as IEEE. The attribute is still valid for FLOAT BIN. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2424I</key>
    <name>Scale factors are not allowed in FLOAT declarations. </name>
    <internalKey>IBM2424I</internalKey>
    <description>Scale factors are valid only in declares of FIXED BIN or FiXED DEC. The first declaration below is invalid and should be changed to one of the subsequent declarations. dcl a1 float dec(15,2); dcl a2 fixed dec(15,2); dcl a3 float dec(15); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2425I</key>
    <name>Statement with ELSE IF should be rewritten using SELECT. </name>
    <internalKey>IBM2425I</internalKey>
    <description>Under RULES(NOELSEIF), the compiler will issue this message for statement where an ELSE is immediately followed by an IF statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2426I</key>
    <name>Maximum nesting of DO statements has been exceeded. </name>
    <internalKey>IBM2426I</internalKey>
    <description>The nesting of DO statements has exceeded the value specified in the DO suboption of the MAXNEST compiler option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2427I</key>
    <name>Maximum nesting of IF statements has been exceeded. </name>
    <internalKey>IBM2427I</internalKey>
    <description>The nesting of IF statements has exceeded the value specified in the IF suboption of the MAXNEST compiler option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2428I</key>
    <name>Maximum nesting of PROC and BEGIN statements has been exceeded. </name>
    <internalKey>IBM2428I</internalKey>
    <description>The nesting of PROC and BEGIN statements has exceeded the value specified in the BLOCK suboption of the MAXNEST compiler option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2429I</key>
    <name>CMPAT(V3) requires that 8-byte integers be allowed. The second value in the FIXEDBIN suboption of the LIMITS option will be set to 63. </name>
    <internalKey>IBM2429I</internalKey>
    <description>The use of the CMPAT(V3) option with LIMITS(FIXEDBIN(31,31)) is not supported. Since CMPAT(V3) will cause various built-in functions (such as HBOUND) to return a FIXED BIN(63) result, at least the second value in the FIXEDBIN suboption of LIMITS must be 63 (i.e. LIMITS(FIXEDBIN(31,63)) or LIMITS(FIXEDBIN(63,63)) must be in effect). </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2430I</key>
    <name>The LINESIZE value specified in the OPEN of file file name is not compatible with the RECSIZE specified in its declare. </name>
    <internalKey>IBM2430I</internalKey>
    <description>If the file has F format and is not a PRINT file, then the LINESIZE must be no greater than the RECSIZE. If the file has F format and is a PRINT file, then the LINESIZE must be less than the RECSIZE. If the file has V format and is not a PRINT file, then the LINESIZE must be no greater than the RECSIZE-4. If the file has V format and is a PRINT file, then the LINESIZE must be less than the RECSIZE-4. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2431I</key>
    <name>The option option conflicts with the GOFF option. NOGOFF will be used instead. </name>
    <internalKey>IBM2431I</internalKey>
    <description>The specified option is not permitted with the GOFF option, and the GOFF option will be turned off so that the compile may proceed. This applies, for example, to the NOWRITABLE(PRV) and COMMON options. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2432I</key>
    <name>The attribute character is invalid with parameters and is ignored. </name>
    <internalKey>IBM2432I</internalKey>
    <description>The INITIAL attribute, for example, is invalid with parameters (since their storage will have been allocated elsewhere). dcl a fixed bin parameter initial( 0 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2433I</key>
    <name>The attribute character is invalid with DEFINED and is ignored. </name>
    <internalKey>IBM2433I</internalKey>
    <description>The INITIAL attribute, for example, is invalid with DEFINED variables (since their storage will have been allocated elsewhere). dcl b char(1) initial( ’’ ) defined(a); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2434I</key>
    <name>Under RULES(NOLAXENTRY), all ENTRY declares must specify a parenthesized parameter list, even if empty. </name>
    <internalKey>IBM2434I</internalKey>
    <description>Under RULES(NOLAXENTRY), all ENTRY declares must be prototyped. If the ENTRY should have no parameters, it should be declared as ENTRY() rather than as simply ENTRY. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2435I</key>
    <name>Scale factor is less than 0. </name>
    <internalKey>IBM2435I</internalKey>
    <description>Under RULES(NOLAXSCALE), scale factors must be nonnegative, and the compiler flags the statement below. 43 dcl a fixed dec(15,-2); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2436I</key>
    <name>Scale factor is larger than the precision. </name>
    <internalKey>IBM2436I</internalKey>
    <description>Under RULES(NOLAXSCALE), scale factors must be no larger than the precision, dcl a fixed dec(15,17); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2437I</key>
    <name>SQL preprocessor invoked more than once without INCONLY. </name>
    <internalKey>IBM2437I</internalKey>
    <description>If the SQL preprocessor is invoked more than once without INCONLY as its suboption, then the DBRM library member created for the compile will be empty. It is best to invoke the SQL preprocessor either only once or once with INCONLY as its only suboption and then only once more. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2438I</key>
    <name>STOP and EXIT statements are not allowed. </name>
    <internalKey>IBM2438I</internalKey>
    <description>Under RULES(NOSTOP), there should be no STOP and no EXIT statements in your source program. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2439I</key>
    <name>END statement for a PROCEDURE must include the name of the PROCEDURE. </name>
    <internalKey>IBM2439I</internalKey>
    <description>Under RULES(NOPROCENDONLY), the END statement for a PROCEDURE must not consist of simply the END keyword and a semicolon. It must also include the name of the PROCEDURE it is closing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2440I</key>
    <name>Structure element identifier is not qualified with the name of its containing level-1 structure. </name>
    <internalKey>IBM2440I</internalKey>
    <description>Under the option RULES(NOLAXQUAL), all structure elements should be qualified with the name of their outermost parent. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2441I</key>
    <name>GOTO exits the current block. </name>
    <internalKey>IBM2441I</internalKey>
    <description>Under RULES(NOGOTO(LOOSE)), there should be no GOTO statements in your source program except for those that exit an ON-unit and those that goto a label in the current block. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2442I</key>
    <name>Structure identifier contains padding. </name>
    <internalKey>IBM2442I</internalKey>
    <description>Under RULES(NOPADDING), structures should contain no padding. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2443I</key>
    <name>Control variable in DO statement belongs to a parent block. </name>
    <internalKey>IBM2443I</internalKey>
    <description>Under RULES(NOGLOBALDO), in a DO loop of the form DO x = .., x must be declared in the same block as the DO loop. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2444I</key>
    <name>The BUILTIN function builtin has been deprecated. </name>
    <internalKey>IBM2444I</internalKey>
    <description>The named built-in function was specified in the BUILTIN suboption of the DEPRECATE option, and so any explicit or contextual declaration of it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2445I</key>
    <name>The INCLUDE file filename has been deprecated. </name>
    <internalKey>IBM2445I</internalKey>
    <description>The named INCLUDE file was specified in the INCLUDE suboption of the DEPRECATE option, and so any attempt to include it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2446I</key>
    <name>The ENTRY named variable has been deprecated. </name>
    <internalKey>IBM2446I</internalKey>
    <description>The named ENTRY was specified in the ENTRY suboption of the DEPRECATE option, and so any explicit or contextual declaration of it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2447I</key>
    <name>The VARIABLE named variable has been deprecated. </name>
    <internalKey>IBM2447I</internalKey>
    <description>The named VARIABLE was specified in the VARIABLE suboption of the DEPRECATE option, and so any explicit or contextual declaration of it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2448I</key>
    <name>CICS preprocessor invoked more than once. </name>
    <internalKey>IBM2448I</internalKey>
    <description>If the CICS preprocessor were invoked more than once, then the second invocation would cause duplicate declarations to be inserted in the outermost procedure. The CICS preprocessor must be invoked only once. The compiler ignores any excess invocations. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2449I</key>
    <name>Source and target in assignment are identical. </name>
    <internalKey>IBM2449I</internalKey>
    <description>Under RULES(NOSELFASSIGN), the source and target in an assignment must be different. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2450I</key>
    <name>First argument to BUILTIN name built-in should have length greater than or equal to length. </name>
    <internalKey>IBM2450I</internalKey>
    <description>The argument to the named built-in function is too short. For example, the argument to the Y4DATE built-in function should have the form YYMMDD with possibly some trailing blanks, and hence the length of that argument should be greater than or equal to 6. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2451I</key>
    <name>Source in the assignment is a Boolean, but the target is not BIT(1). </name>
    <internalKey>IBM2451I</internalKey>
    <description>Under RULES(NOLAXIF), if the target in an assignment is not BIT(1), the assignment is flagged if the source is a Boolean. So, for example, the first assignment below is correct, but RULES(NOLAXIF) flags the second assignment since the third assignment might be what was intended. x = (y = z); x = y = z; x, y = z; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2452I</key>
    <name>Scale factor is less than 0. </name>
    <internalKey>IBM2452I</internalKey>
    <description>Under RULES(NOLAXSCALE), scale factors must be nonnegative. The compiler flags the first statement below, but not the second one (which is a possible replacement for the first). b = round( c, -1 ); b = 10 * round( c/ 10, 0 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2453I</key>
    <name>Code should not come after a nested procedure. </name>
    <internalKey>IBM2453I</internalKey>
    <description>Under RULES(NOLAXNESTED), all executable code in a procedure must come before its first nested subprocedure. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2454I</key>
    <name>The builtin statement has been deprecated. </name>
    <internalKey>IBM2454I</internalKey>
    <description>The named statement was specified in the STMT suboption of the DEPRECATE option, and so any use of that statement is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2455I</key>
    <name>The builtin keyword does not conform to the CASERULES option. </name>
    <internalKey>IBM2455I</internalKey>
    <description>The named keyword does not follow the case rules specified in the KEYWORD suboption of the CASERULES option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2456I</key>
    <name>RECURSIVE procedures are not allowed under RULES(NORECURSIVE). </name>
    <internalKey>IBM2456I</internalKey>
    <description>Under RULES(NORECURSIVE), the RECURSIVE attribute should not be used and procedures should not call themselves. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2457I</key>
    <name>RULES(NORECURSIVE) conflicts with DFT(RECURSIVE). The compiler will apply RULES(RECURSIVE) instead. </name>
    <internalKey>IBM2457I</internalKey>
    <description>If you want to use DFT(RECURSIVE), then RULES(RECURSIVE) should also be used. If RULES(NORECURSIVE) is more important, then DFT(NONRECURSIVE) should be used. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2458I</key>
    <name>The CONTROLLED attribute is not allowed under RULES(NOCONTROLLED). </name>
    <internalKey>IBM2458I</internalKey>
    <description>Under RULES(NOCONTROLLED), the CONTROLLED attribute must not be used. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2459I</key>
    <name>The characters specified in the option option must all have hexadecimal values less than '80'x. </name>
    <internalKey>IBM2459I</internalKey>
    <description>Under the ENCODING(UTF8) option, the characters specified in the OR, NOT, QUOTE, and BLANK compiler options must all be one-byte UTF-8 characters. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2460I</key>
    <name>The option option conflicts with the ENCODING(UTF8) option. ENCODING(ASCII) will be assumed. </name>
    <internalKey>IBM2460I</internalKey>
    <description>The specified options conflict and cannot be used together. The ENCODING(UTF8) option cannot be used with the SOSI, DBCS or GRAPHIC options. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2461I</key>
    <name>The MARGINI option must specify a valid UTF-8 string consisting of one UTF-8 character. </name>
    <internalKey>IBM2461I</internalKey>
    <description>Under the ENCODING(UTF8) option, the MARGINI option must be a one-character UTF-8 string. If not, a blank will be used instead. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2462I</key>
    <name>The attribute character conflicts with the attribute character and is ignored. </name>
    <internalKey>IBM2462I</internalKey>
    <description>Attributes must be consistent. dcl a parameter static; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2463I</key>
    <name>LINKAGE(SYSTEM) is not supported for PL/I procedures, and LINKAGE(OPTLINK) will be assumed instead. </name>
    <internalKey>IBM2463I</internalKey>
    <description>Under 64-bit, only the OPTLINK linkage is supported for PL/I procedures 45 Chapter 4. Compiler Severe Messages (1500-2399) </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1500I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has type source type, which is invalid for a parameter with type target type. </name>
    <internalKey>IBM1500I</internalKey>
    <description>An argument must have a type that can be converted to the corresponding parameter's type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1501I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has a different strong type than the corresponding parameter. </name>
    <internalKey>IBM1501I</internalKey>
    <description>If a parameter is strongly typed, any argument passed to it must have the same type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1502I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has type source type, which is invalid for a parameter with type target type. If the ENTRY should be invoked, an argument list must be pro</name>
    <internalKey>IBM1502I</internalKey>
    <description>An argument must have a type that can be converted to the corresponding parameter's type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1503I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has type source type, which is invalid for a parameter with type LIMITED ENTRY. </name>
    <internalKey>IBM1503I</internalKey>
    <description>Only an EXTERNAL ENTRY CONSTANT, an ENTRY CONSTANT representing a non-nested PROCEDURE, or an ENTRY VARIABLE with the LIMITED attribute can be passed to a LIMITED ENTRY parameter. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1504I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has type POINTER, which is invalid for an OFFSET parameter without an AREA qualifier. </name>
    <internalKey>IBM1504I</internalKey>
    <description>POINTER expressions can be converted to OFFSET only if the OFFSET is declared with an AREA qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1505I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has type POINTER, which is invalid for a POINTER parameter since the OFFSET argument is not an OFFSET variable declared with an AREA quali</name>
    <internalKey>IBM1505I</internalKey>
    <description>OFFSET variables can be converted to POINTER only if the OFFSET is declared with an AREA qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1506I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name has a different ORDINAL type than the corresponding parameter. </name>
    <internalKey>IBM1506I</internalKey>
    <description>ORDINALs cannot be passed to other ORDINALs having different ORDINAL types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1507I</key>
    <name>Arrays of label constants may not be passed as arguments. </name>
    <internalKey>IBM1507I</internalKey>
    <description>The array can be assigned to an array of LABEL variables, and that array can be passed. lx(1): ... ; lx(2): ... ; call x( lx ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1508I</key>
    <name>Too few arguments have been specified for the ENTRY ENTRY name. </name>
    <internalKey>IBM1508I</internalKey>
    <description>The number of arguments must match the number of parameters in the ENTRY declaration. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1509I</key>
    <name>Argument to variable name pseudovariable must be ASSIGNABLE. </name>
    <internalKey>IBM1509I</internalKey>
    <description>The target in an assignment through a pseudovariable must not have the NONASSIGNABLE attribute. dcl a static nonasgn char(7) init(’example’); unspec(a) = ’’b; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1510I</key>
    <name>First argument to variable name pseudovariable must be ASSIGNABLE. </name>
    <internalKey>IBM1510I</internalKey>
    <description>The target in an assignment through a pseudovariable must not have the NONASSIGNABLE attribute. dcl a static nonasgn char(7) init(’example’); substr(a,1,2) = ’tr’; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1511I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is an aggregate, but the parameter description specifies a scalar. </name>
    <internalKey>IBM1511I</internalKey>
    <description>Scalars cannot be converted to aggregates. dcl a entry( fixed bin ), b(10) fixed bin; call a( b ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1512I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is a scalar, but the parameter description specifies an aggregate to which it cannot be passed. </name>
    <internalKey>IBM1512I</internalKey>
    <description>Dummy aggregate arguments are not supported except when passing a non-AREA scalar to a non-CONTROLLED array of scalars, and the array must have no bounds specified as *. The scalar can be assigned to an aggregate, and that aggregate can be passed. dcl a entry( 1, 2 fixed bin, 2 fixed bin ); call a( 0 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1513I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is an aggregate that does not exactly match the corresponding parameter description. </name>
    <internalKey>IBM1513I</internalKey>
    <description>Dummy aggregate arguments are not supported. If an entry description describes an aggregate parameter, then any argument passed must match that parameter's description. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1514I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is an aggregate with more members than its corresponding parameter description. </name>
    <internalKey>IBM1514I</internalKey>
    <description>Dummy aggregate arguments are not supported. If an entry description describes an aggregate parameter, then any argument passed must match that parameter's description. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1515I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is an aggregate with fewer members than its corresponding parameter description. </name>
    <internalKey>IBM1515I</internalKey>
    <description>Dummy aggregate arguments are not supported. If an entry description describes an aggregate parameter, then any argument passed must match that parameter's description. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1516I</key>
    <name>The number of dimensions in the subelements of argument number argument-number in ENTRY reference ENTRY name and in its corresponding parameter description do not match. </name>
    <internalKey>IBM1516I</internalKey>
    <description>Dummy aggregate arguments are not supported. If an entry description describes an aggregate parameter, then any argument passed must match that parameter's description. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1517I</key>
    <name>The upper and lower bounds in the subelements of argument number argument-number in ENTRY reference ENTRY name and in its corresponding parameter description do not match. </name>
    <internalKey>IBM1517I</internalKey>
    <description>Dummy aggregate arguments are not supported. If an entry description describes an aggregate parameter, then any argument passed must match that parameter's description. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1518I</key>
    <name>The number of dimensions for argument number argument-number in ENTRY reference ENTRY name and in its corresponding parameter description do not match. </name>
    <internalKey>IBM1518I</internalKey>
    <description>Array arguments and parameters must have the same number of dimensions. dcl a entry( (*,*) fixed bin ), b (10) fixed bin; call a( b ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1519I</key>
    <name>The upper and lower bounds for argument number argument-number in ENTRY reference ENTRY name and in its corresponding parameter description do not match. </name>
    <internalKey>IBM1519I</internalKey>
    <description>Array arguments and parameters must have the same lower and upper bounds. dcl a entry( (0:10) fixed bin ), b (10) fixed bin; call a( b ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1520I</key>
    <name>Charset 48 is not supported. </name>
    <internalKey>IBM1520I</internalKey>
    <description>Charset 48 is no longer supported. The source code must be converted to charset 60. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1521I</key>
    <name>Not enough virtual memory is available to continue the compilation. </name>
    <internalKey>IBM1521I</internalKey>
    <description>The compilation requires more virtual memory than is available. It may help to specify one or more of the following compiler options: NOTEST, NOXREF, NOATTRIBUTES, and NOAGGREGATE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1522I</key>
    <name>variable cannot be SET unless an IN clause is specified. </name>
    <internalKey>IBM1522I</internalKey>
    <description>If an offset variable is declared without an AREA reference, it cannot be set in an ALLOCATE or LOCATE statement unless an IN clause names an AREA reference. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1523I</key>
    <name>Argument to BUILTIN name built-in must be an AREA reference. </name>
    <internalKey>IBM1523I</internalKey>
    <description>The built-in function AVAILABLEAREA is defined only for AREAs. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1524I</key>
    <name>BUILTIN name(x) is undefined if ABS(x) &gt; 1. </name>
    <internalKey>IBM1524I</internalKey>
    <description>An expression contains the built-in function ASIN or ACOS applied to a restricted expression that evaluated to a number outside the domain of that function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1525I</key>
    <name>ATANH(x) is undefined if x is REAL and ABS(x) &gt;= 1. </name>
    <internalKey>IBM1525I</internalKey>
    <description>An expression contains the built-in function ATANH applied to a restricted expression that evaluated to a number outside the domain of that function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1526I</key>
    <name>Argument to BUILTIN name must have derived mode REAL. </name>
    <internalKey>IBM1526I</internalKey>
    <description>An expression contains the named built-in function with an argument having mode COMPLEX. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1527I</key>
    <name>First argument to BUILTIN name built-in must have locator type. </name>
    <internalKey>IBM1527I</internalKey>
    <description>An expression contains the named built-in function with its first argument having neither type POINTER nor OFFSET. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1528I</key>
    <name>First argument to BUILTIN name built-in must have derived mode REAL. </name>
    <internalKey>IBM1528I</internalKey>
    <description>An expression contains the named built-in function with its first argument having mode COMPLEX. This message applies, for example, to the ATAN and ATAND built-in functions when two arguments are given. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1530I</key>
    <name>Second argument to BUILTIN name built-in must have derived mode REAL. </name>
    <internalKey>IBM1530I</internalKey>
    <description>An expression contains the named built-in function, with its second argument having mode COMPLEX. This message applies, for example, to the ATAN and ATAND built-in functions when two arguments are given. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1531I</key>
    <name>BUILTIN name argument has invalid type. </name>
    <internalKey>IBM1531I</internalKey>
    <description>An expression contains the reference BINARYVALUE(x) where x has a type other than POINTER, OFFSET or ORDINAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1532I</key>
    <name>E35 sort exit routines must use a 32-bit linkage. </name>
    <internalKey>IBM1532I</internalKey>
    <description>Any other linkage is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1533I</key>
    <name>BUILTIN name argument must have computational type. </name>
    <internalKey>IBM1533I</internalKey>
    <description>An expression contains the named built-in function with an argument that has neither string nor numeric type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1534I</key>
    <name>BUILTIN name result would be too long. </name>
    <internalKey>IBM1534I</internalKey>
    <description>The result of the REPEAT or COPY built-in function must not be longer than the maximum allowed for the base string type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1535I</key>
    <name>BUILTIN name argument must have type REAL FLOAT. </name>
    <internalKey>IBM1535I</internalKey>
    <description>An expression contains the named built-in function with an argument having type other than REAL FLOAT. This message applies, for instance, to the floating-point inquiry built-in functions such as HUGE and RADIX, and to the floating-point manipulation built-in functions such as EXPONENT and SUCC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1536I</key>
    <name>BUILTIN name argument must be a reference. </name>
    <internalKey>IBM1536I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not a reference. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1537I</key>
    <name>BUILTIN name argument must be an array expression. </name>
    <internalKey>IBM1537I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not an array expression. This message applies, for example, to the built-in functions ALL, ANY, SUM and PROD. 49 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1538I</key>
    <name>BUILTIN name argument must be a FILE reference. </name>
    <internalKey>IBM1538I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not a FILE. This message applies, for example, to the I/O built-in functions such as LINENO and PAGENO. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1539I</key>
    <name>* is invalid as a BUILTIN function argument. </name>
    <internalKey>IBM1539I</internalKey>
    <description>A value must be specified as an argument to a BUILTIN function unless the argument is optional. dcl a float; a = sqrt(*); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1540I</key>
    <name>Argument number argument number to BUILTIN name built-in must have derived mode REAL. </name>
    <internalKey>IBM1540I</internalKey>
    <description>An expression contains the named built-in function with the specified argument having mode COMPLEX. This message applies to the MAX and MIN built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1541I</key>
    <name>Argument number argument number to BUILTIN name built-in must have computational type. </name>
    <internalKey>IBM1541I</internalKey>
    <description>An expression contains the named built-in function with the specified argument having noncomputational type. This message applies to the MAX and MIN built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1542I</key>
    <name>First argument to BUILTIN name built-in must have computational type. </name>
    <internalKey>IBM1542I</internalKey>
    <description>An expression contains the named built-in function with a first argument that has neither string nor numeric type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1543I</key>
    <name>Argument to BUILTIN name built-in must have type CHARACTER(1) NONVARYING. </name>
    <internalKey>IBM1543I</internalKey>
    <description>This applies to the RANK built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1545I</key>
    <name>First argument to BUILTIN name built-in must be an array. </name>
    <internalKey>IBM1545I</internalKey>
    <description>An expression contains the named built-in function with a first argument that is not an array. This message applies, for instance, to the DIMENSION, HBOUND, and LBOUND built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1546I</key>
    <name>Second argument to BUILTIN name built-in must have type CHARACTER(1) NONVARYING. </name>
    <internalKey>IBM1546I</internalKey>
    <description>This applies to the PLIFILL built-in subroutine. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1547I</key>
    <name>Second argument to BUILTIN name built-in must have computational type. </name>
    <internalKey>IBM1547I</internalKey>
    <description>An expression contains the named built-in function with a second argument that has neither string nor numeric type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1548I</key>
    <name>BUILTIN function may not be used inside a BEGIN block. </name>
    <internalKey>IBM1548I</internalKey>
    <description>The PLISTSIZE built-in functions may be used only in procedures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1549I</key>
    <name>BUILTIN function may be used only in procedures with LINKAGE(SYSTEM). </name>
    <internalKey>IBM1549I</internalKey>
    <description>The PLISTSIZE built-in function may not be used in procedures with any of the linkages OPTLINK, PASCAL, etc. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1550I</key>
    <name>Argument to the BUILTIN name pseudovariable must be an EVENT variable. </name>
    <internalKey>IBM1550I</internalKey>
    <description>This message applies to the COMPLETION and STATUS pseudovariables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1551I</key>
    <name>Argument to the BUILTIN name pseudovariable must be a TASK variable. </name>
    <internalKey>IBM1551I</internalKey>
    <description>This message applies to the PRIORITY pseudovariable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1552I</key>
    <name>Third argument to BUILTIN name built-in must have computational type. </name>
    <internalKey>IBM1552I</internalKey>
    <description>An expression contains the named built-in function with a third argument that has neither string nor numeric type. This message applies, for example, to the SUBSTR and CENTER built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1554I</key>
    <name>Argument to BUILTIN name built-in must be either a NONVARYING BIT array reference or else an array expression with known length. </name>
    <internalKey>IBM1554I</internalKey>
    <description>The ALL and ANY built-in functions are restricted to two types of array expressions: an array expression that is a NONVARYING BIT array reference or an array expression that has known length. The first five examples below meet these restrictions, but the remaining examples do not. dcl a(10) bit(16) varying; dcl b(10) bit(16); if all( b ) then ... if any( a ^= ’’b ) then ... if all( a = b &amp; a ) then ... if any( ’’b ^= b ) then ... if all( a = ’’b | b = ’’b ) then ... if any( a ) then ... if all( substr(b,1,n) ) then ... </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1555I</key>
    <name>Second argument to BUILTIN name built-in must have computational type. </name>
    <internalKey>IBM1555I</internalKey>
    <description>An expression contains the named built-in function with a second argument that has neither string nor numeric type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1556I</key>
    <name>Third argument to BUILTIN name built-in would force STRINGRANGE. </name>
    <internalKey>IBM1556I</internalKey>
    <description>If a third argument is given for one of the built-in functions INDEX, SEARCH or VERIFYR, it must be positive. For SEARCHR and VERIFYR, it must be nonnegative. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1557I</key>
    <name>Second argument to BUILTIN name built-in must be positive. </name>
    <internalKey>IBM1557I</internalKey>
    <description>The second argument for the built-in functions CENTER, LEFT and RIGHT must not be zero or negative. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1558I</key>
    <name>Argument to VALID built-in must have the attributes FIXED DECIMAL or PICTURE. </name>
    <internalKey>IBM1558I</internalKey>
    <description>The argument to the VALID built-in function must have exactly the indicated attributes. It is not sufficient that it can be converted to these attributes. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1559I</key>
    <name>SQRT(x) is undefined if x is REAL and x &lt; 0. </name>
    <internalKey>IBM1559I</internalKey>
    <description>An expression contains the BUILTIN function SQRT applied to a restricted expression that evaluated to a number outside the domain of that function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1560I</key>
    <name>BUILTIN function(x) is undefined if x is REAL and x &lt;= 0. </name>
    <internalKey>IBM1560I</internalKey>
    <description>An expression contains the named built-in function applied to a restricted expression that evaluated to a number outside the domain of that function. This message applies, for instance, to the LOG, LOG2, and LOG10 built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1561I</key>
    <name>RULES(ANS) does not allow ROUND to be applied to FIXED BIN. </name>
    <internalKey>IBM1561I</internalKey>
    <description>RULES(ANS) dose not permit non-zero scale factors with FIXED BIN, and hence it does not allow ROUND to be applied to FIXED BIN (or BIT) arguments. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1562I</key>
    <name>Argument to BUILTIN name built-in has invalid type. </name>
    <internalKey>IBM1562I</internalKey>
    <description>The argument to the HANDLE built-in must be a structure type, and conversely the argument to the TYPE built-in must be a handle. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1563I</key>
    <name>Second argument to BUILTIN name built-in must be nonnegative. </name>
    <internalKey>IBM1563I</internalKey>
    <description>The second argument for the built-in functions CHARACTER, BIT, and GRAPHIC must be zero or greater. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1564I</key>
    <name>Too few arguments have been specified for the BUILTIN name built-in. </name>
    <internalKey>IBM1564I</internalKey>
    <description>Supply the minimum number of arguments required. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1566I</key>
    <name>BUILTIN name(x) is undefined for x outside the supported domain. </name>
    <internalKey>IBM1566I</internalKey>
    <description>An expression contains the named built-in function applied to a restricted expression that evaluated to a number outside the supported domain of that function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1568I</key>
    <name>BUILTIN function(x,y) is undefined if x=0 and y=0. </name>
    <internalKey>IBM1568I</internalKey>
    <description>An expression contains the built-in function ATAN or ATAND applied to a restricted expression that evaluated to a number outside the domain of that function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1569I</key>
    <name>BUILTIN name argument must be a CONNECTED reference. </name>
    <internalKey>IBM1569I</internalKey>
    <description>The argument to the named built-in function must be a reference (for example, not an expression or a literal), and that reference must be CONNECTED. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1570I</key>
    <name>BUILTIN name argument must be a reference to a level 1 CONTROLLED variable. </name>
    <internalKey>IBM1570I</internalKey>
    <description>The ALLOCATION built-in function cannot be used with structure members or with 51 non-CONTROLLED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1571I</key>
    <name>BUILTIN name argument must be a reference to a level 1 BYADDR parameter. </name>
    <internalKey>IBM1571I</internalKey>
    <description>The OMITTED built-in function cannot be used with BYVALUE parameters, structure members, or non-parameters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1573I</key>
    <name>The use of * as an argument is permitted only for parameters declared with the OPTIONAL attribute. </name>
    <internalKey>IBM1573I</internalKey>
    <description>Add the OPTIONAL attribute to the entry declaration or replace the * by an actual argument. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1575I</key>
    <name>Argument number argument number to BUILTIN name built-in must have type POINTER or OFFSET. </name>
    <internalKey>IBM1575I</internalKey>
    <description>The indicated argument to built-in functions such as PLIMOVE and COMPARE must be a locator. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1576I</key>
    <name>Third argument to BUILTIN name built-in must have type CHARACTER(1) NONVARYING. </name>
    <internalKey>IBM1576I</internalKey>
    <description>This applies to the HEXIMAGE built-in subroutine. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1577I</key>
    <name>First argument to BUILTIN name built-in must have type POINTER. </name>
    <internalKey>IBM1577I</internalKey>
    <description>This applies to the OFFSET built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1578I</key>
    <name>First argument to BUILTIN name built-in must have type OFFSET. </name>
    <internalKey>IBM1578I</internalKey>
    <description>This applies to the POINTER built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1579I</key>
    <name>Second argument to BUILTIN name built-in must have type AREA. </name>
    <internalKey>IBM1579I</internalKey>
    <description>This applies to the OFFSET and POINTER built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1580I</key>
    <name>First argument to BUILTIN name built-in is an OFFSET value. </name>
    <internalKey>IBM1580I</internalKey>
    <description>If the first argument to built-in functions such as PLIMOVE and COMPARE has the attribute OFFSET, it must be an OFFSET reference not an OFFSET value. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1581I</key>
    <name>First argument to BUILTIN name built-in is an OFFSET variable declared without an AREA qualifier. </name>
    <internalKey>IBM1581I</internalKey>
    <description>If the first argument to built-in functions such as PLIMOVE and COMPARE is an OFFSET variable, that OFFSET variable must be declared with an AREA qualifier so that the offset can be converted to an address. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1582I</key>
    <name>Argument number argument number to BUILTIN name built-in is an OFFSET value. </name>
    <internalKey>IBM1582I</internalKey>
    <description>If the indicated argument to built-in functions such as PLIMOVE and COMPARE has the attribute OFFSET, it must be an OFFSET reference not an OFFSET value. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1583I</key>
    <name>Argument number argument number to BUILTIN name built-in is an OFFSET variable declared without an AREA qualifier. </name>
    <internalKey>IBM1583I</internalKey>
    <description>If the indicated argument to built-in functions such as PLIMOVE and COMPARE is an OFFSET variable, that OFFSET variable must be declared with an AREA qualifier so that the offset can be converted to an address. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1584I</key>
    <name>Second argument to BUILTIN name built-in must have type OFFSET. </name>
    <internalKey>IBM1584I</internalKey>
    <description>This applies to the OFFSETDIFF built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1585I</key>
    <name>Second argument to BUILTIN name built-in must have type POINTER. </name>
    <internalKey>IBM1585I</internalKey>
    <description>This applies to the POINTERDIFF built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1586I</key>
    <name>Argument to STRING built-in function/pseudovariable must be CONNECTED. </name>
    <internalKey>IBM1586I</internalKey>
    <description>The STRING built-in function and pseudovariable cannot be applied to discontiguous array cross-sections or to array parameters not declared with the CONNECTED attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1587I</key>
    <name>Argument number argument number to BUILTIN name built-in must have the ENTRY attribute. </name>
    <internalKey>IBM1587I</internalKey>
    <description>Any other argument type is invalid. This message applies to the PLISRTx built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1588I</key>
    <name>First argument to BUILTIN name built-in must have type GRAPHIC. </name>
    <internalKey>IBM1588I</internalKey>
    <description>This applies to the CHARGRAPHIC built-in function. For instance, in the following example, g should be declared as graphic, not as char. dcl c char(10); dcl g char(5); c = charg( g ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1589I</key>
    <name>BUILTIN name argument must not have any subscripts. </name>
    <internalKey>IBM1589I</internalKey>
    <description>The LOCATION and BITLOCATION built-in functions cannot be applied to subscripted references. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1590I</key>
    <name>Argument to STRING built-in function/pseudovariable must not be a UNION and must not contain a UNION. </name>
    <internalKey>IBM1590I</internalKey>
    <description>The STRING built-in function and pseudovariable cannot be applied to UNIONs or to structures containing UNIONs. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1591I</key>
    <name>All members of an argument to the STRING built-in function/ pseudovariable must have the UNALIGNED attribute. </name>
    <internalKey>IBM1591I</internalKey>
    <description>The STRING built-in function and pseudovariable cannot be applied to structures or arrays containing elements with the ALIGNED attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1592I</key>
    <name>All members of an argument to the STRING built-in function/ pseudovariable must have the NONVARYING attribute. </name>
    <internalKey>IBM1592I</internalKey>
    <description>The STRING built-in function and pseudovariable cannot be applied to structures or arrays containing VARYING strings. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1593I</key>
    <name>All members of an argument to the STRING built-in function/ pseudovariable must have string type. </name>
    <internalKey>IBM1593I</internalKey>
    <description>The STRING built-in function and pseudovariable cannot be applied to structures or arrays containing noncomputational types or arithmetic types other than pictures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1594I</key>
    <name>All members of an argument to the STRING built-in function/ pseudovariable must have the same string type. </name>
    <internalKey>IBM1594I</internalKey>
    <description>The STRING built-in function and pseudovariable cannot be applied to structures or arrays containing different string types, for example, BIT and CHARACTER strings. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1595I</key>
    <name>First argument to BUILTIN name built-in must have type REAL FLOAT. </name>
    <internalKey>IBM1595I</internalKey>
    <description>This applies to the floating-point inquiry and manipulation built-in functions such as HUGE and EXPONENT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1596I</key>
    <name>Second argument to BUILTIN name built-in must have type CHARACTER. </name>
    <internalKey>IBM1596I</internalKey>
    <description>This applies to the EDIT built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1597I</key>
    <name>BUILTIN name argument must have type TASK. </name>
    <internalKey>IBM1597I</internalKey>
    <description>This applies to the PRIORITY built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1598I</key>
    <name>BUILTIN name argument must have type EVENT. </name>
    <internalKey>IBM1598I</internalKey>
    <description>This applies to the COMPLETION and STATUS built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1599I</key>
    <name>The BUILTIN function variable name may not be used as a pseudovariable. </name>
    <internalKey>IBM1599I</internalKey>
    <description>The named built-in function is not a pseudovariable and may not be used as one. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1600I</key>
    <name>Source to BUILTIN name pseudovariable must be scalar. </name>
    <internalKey>IBM1600I</internalKey>
    <description>It is invalid to assign an array, structure, or union to one of the built-in functions ONCHAR, ONSOURCE, or ONGSOURCE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1601I</key>
    <name>The identifier identifier is not the name of a built-in function. Any use of it is unsupported. </name>
    <internalKey>IBM1601I</internalKey>
    <description>The BUILTIN attribute can be applied only to identifiers that are the names of built-in functions or subroutines. 53 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1602I</key>
    <name>Fourth argument to BUILTIN name built-in must have the attributes REAL FIXED BIN(31,0). </name>
    <internalKey>IBM1602I</internalKey>
    <description>This applies to the PLISRTx built-in functions. For instance, in the following example, rc should be declared as fixed bin(31), not fixed bin(15). dcl rc fixed bin(15); call plisrta( ’SORT FIELDS=(1,80,CH,A) ’, ’RECORD TYPE=F,LENGTH=(80) ’, 256000, rc ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1603I</key>
    <name>BUILTIN name argument must not have the CONSTANT attribute. </name>
    <internalKey>IBM1603I</internalKey>
    <description>This applies to the ADDR and similar built-in functions. It is invalid, for instance, to apply the ADDR built-in function to a label constant. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1604I</key>
    <name>BUILTIN function argument must be nonnegative. </name>
    <internalKey>IBM1604I</internalKey>
    <description>The argument for the built-in functions LOW and HIGH must be zero or greater. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1605I</key>
    <name>Argument to ENTRYADDR built-in must be an ENTRY variable or an EXTERNAL ENTRY constant. </name>
    <internalKey>IBM1605I</internalKey>
    <description>The ENTRYADDR built-in function cannot be applied to non-ENTRYs or to INTERNAL ENTRY constants. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1606I</key>
    <name>Argument to variable name pseudovariable must be a reference. </name>
    <internalKey>IBM1606I</internalKey>
    <description>Pseudovariables cannot be applied to expressions. unspec( 12 ) = ’00’b4; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1607I</key>
    <name>First argument to variable name pseudovariable must be a reference. </name>
    <internalKey>IBM1607I</internalKey>
    <description>The SUBSTR pseudovariable cannot be applied to expressions. substr( ’nope’, 1, 1 ) = ’d’; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1608I</key>
    <name>Argument to variable name pseudovariable must be a scalar. </name>
    <internalKey>IBM1608I</internalKey>
    <description>The compiler does not support the named pseudovariable applied to arrays, structures, or unions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1609I</key>
    <name>First argument to variable name pseudovariable must be a scalar. </name>
    <internalKey>IBM1609I</internalKey>
    <description>The compiler does not support the named pseudovariable applied to arrays, structures, or unions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1610I</key>
    <name>Argument to variable name pseudovariable must be COMPLEX. </name>
    <internalKey>IBM1610I</internalKey>
    <description>The REAL and IMAG pseudovariable can be applied only to COMPLEX arithmetic variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1611I</key>
    <name>First argument to SUBSTR pseudovariable must have string type. </name>
    <internalKey>IBM1611I</internalKey>
    <description>The SUBSTR pseudovariable cannot be applied to numeric variables or to noncomputational values. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1612I</key>
    <name>Argument to the ENTRYADDR pseudovariable must be an ENTRY variable. </name>
    <internalKey>IBM1612I</internalKey>
    <description>The ENTRYADDR pseudovariable can be applied only to ENTRY variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1613I</key>
    <name>Argument to BUILTIN name built-in has attributes that conflict with file attribute. </name>
    <internalKey>IBM1613I</internalKey>
    <description>The indicated built-in function cannot be applied to file constants with attributes that conflict with the indicated attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1614I</key>
    <name>Argument to BUILTIN name built-in has attributes that conflict with STREAM. </name>
    <internalKey>IBM1614I</internalKey>
    <description>The indicated built-in function cannot be applied to non-STREAM files. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1615I</key>
    <name>Argument to BUILTIN name built-in has attributes that conflict with PRINT. </name>
    <internalKey>IBM1615I</internalKey>
    <description>The indicated built-in function cannot be applied to non-PRINT files. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1616I</key>
    <name>Attributes and ENVIRONMENT options for file file name conflict. </name>
    <internalKey>IBM1616I</internalKey>
    <description>Specified file attributes and ENVIRONMENT options on a declaration statement are in conflict. The following DECLARE statement is an example of this type of conflict: dcl file f1 direct env(consecutive); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1617I</key>
    <name>DIRECT attribute for file file name needs ENVIRONMENT option specification of INDEXED, REGIONAL, RELATIVE, or VSAM. </name>
    <internalKey>IBM1617I</internalKey>
    <description>Use of the DIRECT file attribute needs an ENVIRONMENT option specification of INDEXED, REGIONAL, RELATIVE, or VSAM. dcl file f1 direct env(relative); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1618I</key>
    <name>Syntax of the %INCLUDE statement is incorrect. </name>
    <internalKey>IBM1618I</internalKey>
    <description>%INCLUDE must be followed by a name and either a semicolon or else a second name in parenthesis and then a semicolon. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1619I</key>
    <name>File specification after %INCLUDE is too long. </name>
    <internalKey>IBM1619I</internalKey>
    <description>The maximum length of the file specification is 8 characters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1620I</key>
    <name>File specification missing after %INCLUDE. </name>
    <internalKey>IBM1620I</internalKey>
    <description>%INCLUDE must be followed by a file name, not just a semicolon. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1621I</key>
    <name>NODESCRIPTOR attribute is invalid if any parameters have bit alignment. </name>
    <internalKey>IBM1621I</internalKey>
    <description>If a parameter is an unaligned bit string or an array or structure consisting entirely of unaligned bit strings, then OPTIONS(NODESCRIPTOR) must not be specified or implied. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1622I</key>
    <name>The number of elements and dimension specifications in an aggregate must not exceed 131071. </name>
    <internalKey>IBM1622I</internalKey>
    <description>Aggregates with more than 131071 elements and dimension specifications would require descriptors that would require too much storage. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1623I</key>
    <name>The dot-qualified reference reference name is unknown. </name>
    <internalKey>IBM1623I</internalKey>
    <description>The named reference is not a member of any structure or union declared in the block in which it is referenced or declared in any block containing that block. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1625I</key>
    <name>Extent must be a scalar. </name>
    <internalKey>IBM1625I</internalKey>
    <description>An expression specifying an array bound, a string length or an AREA size must not be a reference to an array, a structure, or a union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1626I</key>
    <name>Extent must have computational type. </name>
    <internalKey>IBM1626I</internalKey>
    <description>An expression specifying an array bound, a string length, or an AREA size must have numeric or string type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1627I</key>
    <name>Subscript expressions must be scalars. </name>
    <internalKey>IBM1627I</internalKey>
    <description>An expression used as a subscript must not be an array, structure, or union reference. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1628I</key>
    <name>Index number index number into the array variable name must have computational type. </name>
    <internalKey>IBM1628I</internalKey>
    <description>Only expressions having numeric or string type may be used as subscripts. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1629I</key>
    <name>Extents for STATIC variable are not constant. </name>
    <internalKey>IBM1629I</internalKey>
    <description>Array bounds, string lengths, and AREA sizes in STATIC variables must evaluate at compile-time to constants. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1630I</key>
    <name>Number of dimensions in arrays do not match. </name>
    <internalKey>IBM1630I</internalKey>
    <description>In the assignment of one array to another, the two arrays must have the same number of dimensions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1631I</key>
    <name>Upper and lower bounds in arrays do not match. </name>
    <internalKey>IBM1631I</internalKey>
    <description>In the assignment of one array to another, the two arrays must have the same lower and upper bound in each dimension. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1632I</key>
    <name>Index number index number into the variable variable name is less than the lower bound for that dimension. </name>
    <internalKey>IBM1632I</internalKey>
    <description>Executing such a program would most likely cause a protection exception. dcl a(5:10) fixed bin(31); a(1) = 0; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1633I</key>
    <name>Index number index number into the variable variable name is greater than the upper bound for that dimension. </name>
    <internalKey>IBM1633I</internalKey>
    <description>Executing such a program would most likely cause a protection exception. 55 dcl a(5:10) fixed bin(31); a(20) = 0; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1634I</key>
    <name>Number of dimensions in subelements of structures do not match. </name>
    <internalKey>IBM1634I</internalKey>
    <description>In structure assignments and structure expressions, all subelements that are arrays must have the same number of dimensions. dcl 1 a, 2 b(8) fixed bin, 2 c char(10); dcl 1 x, 2 y(8,9) fixed bin, 2 z char(10); a = x; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1635I</key>
    <name>Upper and lower bounds in subelements of structures do not match. </name>
    <internalKey>IBM1635I</internalKey>
    <description>In structure assignments and structure expressions, all subelements that are arrays must have the same bounds. dcl 1 a, 2 b(8) fixed bin, 2 c char(10); dcl 1 x, 2 y(9) fixed bin, 2 z char(10); a = x; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1636I</key>
    <name>Substructuring in subelements of structures do not match. </name>
    <internalKey>IBM1636I</internalKey>
    <description>In structure assignments and structure expressions, if any element of one structure is itself a structure, then the corresponding element in all the other structures must also be a similar structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1637I</key>
    <name>Number of subelements in structures do not match. </name>
    <internalKey>IBM1637I</internalKey>
    <description>In structure assignments and structure expressions, all structures must have the same number of elements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1638I</key>
    <name>Structures and unions are not permitted in GENERIC descriptions. </name>
    <internalKey>IBM1638I</internalKey>
    <description>Only scalars and arrays of scalars are permitted in GENERIC descriptions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1639I</key>
    <name>The aggregate aggregate-name contains only noncomputational values. The aggregate will be ignored. </name>
    <internalKey>IBM1639I</internalKey>
    <description>Aggregates containing no strings or arithmetic variables cannot be used in PUT or GET statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1640I</key>
    <name>The aggregate aggregate-name contains one or more unions and cannot be used in stream I/O. </name>
    <internalKey>IBM1640I</internalKey>
    <description>Aggregates containing one or more UNION statements cannot be used in PUT or GET statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1641I</key>
    <name>References to slices of the array of structures structure-name are not permitted. </name>
    <internalKey>IBM1641I</internalKey>
    <description>An array of structures must be referenced in its entirety or element by element. dcl 1 a(8,9), 2 b fixed bin, 2 c char(10); a(2,*) = 0; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1642I</key>
    <name>References to slices of the array of unions union-name are not permitted. </name>
    <internalKey>IBM1642I</internalKey>
    <description>An array of unions must be referenced in its entirety or element by element. dcl 1 a(8,9) union, 2 b fixed bin, 2 c char(10); a(2,*) = 0; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1643I</key>
    <name>Each dimension of an array must contain no more than 2147483647 elements. </name>
    <internalKey>IBM1643I</internalKey>
    <description>It must be possible to compute the value of the DIMENSION built-in function for an array. In DECLARE x(x:y), ( y-x+1) must be less than 214748648. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1644I</key>
    <name>Aggregate contains more than 15 logical levels. </name>
    <internalKey>IBM1644I</internalKey>
    <description>The maximum physical level allowed is 255, but the maximum logical level is 15. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1645I</key>
    <name>Data aggregate exceeds the maximum length. </name>
    <internalKey>IBM1645I</internalKey>
    <description>Aggregates containing unaligned bits must be less than 2**28 bytes in size while all other aggregates must be less than 2**31. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1646I</key>
    <name>SIZE would be raised in assigning TO value to control variable. </name>
    <internalKey>IBM1646I</internalKey>
    <description>If the TO value is bigger than the maximum value that a FIXED or PICTURE variable can hold, then a loop dominated by that variable would cause SIZE to be raised. For example, in the first code fragment below, x can not be assigned a value bigger than 99. In the second code fragment below, y can not be assigned a value bigger than 32767. dcl x pic’99’; do x = 1 to 100; put skip list( x ); end; dcl y fixed bin(15); do y = 1 to 32768; put skip list( y ); end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1647I</key>
    <name>Too few subscripts specified for the variable variable name. </name>
    <internalKey>IBM1647I</internalKey>
    <description>The number of subscripts given for a variable must match that variable's number of dimensions </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1648I</key>
    <name>Too many subscripts specified for the variable variable name. </name>
    <internalKey>IBM1648I</internalKey>
    <description>The number of subscripts given for a variable must match that variable's number of dimensions </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1649I</key>
    <name>The number of inherited dimensions plus the number of member dimensions exceeds 15. </name>
    <internalKey>IBM1649I</internalKey>
    <description>Arrays with more than 15 dimensions are not supported. dcl 1 dim7(2,3,4,5,6,7,8), 2 dim7more(2,3,4,5,6,7,8) 3 dim2many(2,3) fixed bin, 3 * fixed bin, 2 * char(10); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1650I</key>
    <name>The LIKE reference is neither a structure nor a union. </name>
    <internalKey>IBM1650I</internalKey>
    <description>The LIKE reference cannot be a scalar or an array of scalars. dcl a fixed bin, 1 b like a; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1651I</key>
    <name>The LIKE reference is ambiguous. </name>
    <internalKey>IBM1651I</internalKey>
    <description>The LIKE reference needs enough qualification to be unique. dcl 1 x like b, 1 a, 2 b, 3 c, 3 d, 2 e, 3 f, 3 g, 1 h, 2 b, 3 j, 3 k; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1652I</key>
    <name>Neither the LIKE reference nor any of its substructures can be declared with the LIKE attribute. </name>
    <internalKey>IBM1652I</internalKey>
    <description>LIKE from LIKE is not supported. dcl 1 a, 2 b1 like c, 2 b2 like c, 1 c, 2 d fixed bin, 2 e fixed bin; dcl 1 x like a; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1653I</key>
    <name>The LIKE reference must not be a member of a structure or union declared with the LIKE attribute. </name>
    <internalKey>IBM1653I</internalKey>
    <description>LIKE from LIKE is not supported. dcl 1 a, 2 b1 like c, 57 2 b2 like c, 1 c, 2 d fixed bin, 2 e fixed bin; dcl 1 x like a.b1; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1654I</key>
    <name>The LIKE reference is unknown. </name>
    <internalKey>IBM1654I</internalKey>
    <description>The LIKE reference must be known in the block containing the LIKE attribute specification. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1655I</key>
    <name>Only CONTROLLED variables can be passed to CONTROLLED parameters. </name>
    <internalKey>IBM1655I</internalKey>
    <description>If a parameter is declared as controlled, non-controlled variables and expressions with operators cannot be passed to it. dcl c char(20); call a(c); a: proc( b ); dcl b controlled char(*); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1656I</key>
    <name>A CONTROLLED variable passed to a CONTROLLED parameter must have the same attributes as that parameter. </name>
    <internalKey>IBM1656I</internalKey>
    <description>Differences in any arithmetic attributes are not permitted. The following example will emit this message. dcl x fixed bin(15) controlled; call a(x); a: proc( b ); dcl b controlled fixed bin(31); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1657I</key>
    <name>A subscript has been specified for the non-array variable variable name. </name>
    <internalKey>IBM1657I</internalKey>
    <description>Subscripts are permitted only in array element references. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1658I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is an array expression requiring a temporary array with strings of unknown length. </name>
    <internalKey>IBM1658I</internalKey>
    <description>Temporary arrays of strings are supported only if the string length is known. dcl a entry, (b(10),c(10)) char(20) var; call a( b || c ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1659I</key>
    <name>After LIKE expansion, aggregate would contain more than 15 logical levels. </name>
    <internalKey>IBM1659I</internalKey>
    <description>The total number of logical levels after LIKE expansion must not exceed 15. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1660I</key>
    <name>The size ( record-size ) of the record conflicts with the RECSIZE ( recsize ) specified in the ENVIRONMENT attribute. </name>
    <internalKey>IBM1660I</internalKey>
    <description>Execution of the statement would raise the RECORD condition. dcl datei file record output env( fb recsize (80) total ) ; dcl satzaus char (100); write file(datei) from(satzaus); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1661I</key>
    <name>Aggregates cannot be assigned to scalars. </name>
    <internalKey>IBM1661I</internalKey>
    <description>Only scalars can be assigned to scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1662I</key>
    <name>Unsupported use of union or structure containing a union. </name>
    <internalKey>IBM1662I</internalKey>
    <description>Unions and structures containing unions may not be used in expressions except when used as an argument to a built-in function such as ADDR or UNSPEC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1663I</key>
    <name>Unsupported or invalid use of structure expression. </name>
    <internalKey>IBM1663I</internalKey>
    <description>Structure expressions may not, for instance, be assigned to arrays of scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1664I</key>
    <name>Array expressions cannot be assigned to non-arrays. </name>
    <internalKey>IBM1664I</internalKey>
    <description>Array expressions may not, for instance, be assigned to structures or scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1665I</key>
    <name>E15 sort exit routines must have the RETURNS attribute. </name>
    <internalKey>IBM1665I</internalKey>
    <description>An E15 sort exit have the RETURNS attribute since it will be invoked as a function by the sort library routine. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1666I</key>
    <name>E15 sort exit routines must return a CHARACTER string. </name>
    <internalKey>IBM1666I</internalKey>
    <description>An E15 sort exit may return a NONVARYING, VARYING or VARYINGZ CHARACTER string, but it must be a character string. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1667I</key>
    <name>Target in assignment is NONASSIGNABLE. </name>
    <internalKey>IBM1667I</internalKey>
    <description>The target in an assignment statement must not have the NONASSIGNABLE attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1668I</key>
    <name>Target in assignment is a function reference. </name>
    <internalKey>IBM1668I</internalKey>
    <description>The target of an assignment statement must be an array, structure, union or scalar reference. Function references are not permitted as target of assignments. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1669I</key>
    <name>Target in assignment is a UNION. </name>
    <internalKey>IBM1669I</internalKey>
    <description>Assignments to UNIONs are not supported. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1670I</key>
    <name>A PROCEDURE containing ENTRY statements with differing RETURNS attributes must return values BYADDR. </name>
    <internalKey>IBM1670I</internalKey>
    <description>In a PROCEDURE containing ENTRY statements, if the PROCEDURE and ENTRY statements do not all have the same RETURNS attributes, then all values must be returned BYADDR. You can compile with DFT(RETURNS(BYADDR)) to force this, or you can add the BYADDR attribute to each set of RETURNS attribute. For example, you must either compile the following program with DFT(RETURNS(BYADDR)) or change the "fixed bin" to "fixed bin byaddr". a: proc; return; b: entry returns( fixed bin ); return( 1729 ); end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1671I</key>
    <name>The source in a structure assignment must be a scalar expression or a matching structure. </name>
    <internalKey>IBM1671I</internalKey>
    <description>The source in a structure assignment cannot be an array of scalars or a structure that does not match the target. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1672I</key>
    <name>In multiple BY NAME assignments, if one target is an array of structures, then all must be. </name>
    <internalKey>IBM1672I</internalKey>
    <description>A BY NAME assignment may have not have a mixture of array and non-array targets. dcl 1 a, 2 a1 fixed bin, 2 a2 fixed bin; dcl 1 b(3), 2 a1 fixed bin, 2 a2 fixed bin; dcl 1 c, 2 a1 fixed bin, 2 a2 fixed bin; a,b = c, by name; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1673I</key>
    <name>The target in a compound concatenate and assign must be a VARYING or VARYINGZ string. </name>
    <internalKey>IBM1673I</internalKey>
    <description>Only the simple assignment operator can be used to assign to a NONVARYING string. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1674I</key>
    <name>Target in assignment contains UNIONs. </name>
    <internalKey>IBM1674I</internalKey>
    <description>The target in an assignment must not contain any UNIONs. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1675I</key>
    <name>FROMALIEN option cannot be used with MAIN. </name>
    <internalKey>IBM1675I</internalKey>
    <description>These two options are mutually exclusive. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1676I</key>
    <name>Source in assignment to LIMITED ENTRY must be either a non-nested ENTRY constant or another LIMITED ENTRY. </name>
    <internalKey>IBM1676I</internalKey>
    <description>ENTRY constants representing nested procedures and ENTRY variables not declared with the LIMITED attribute cannot be assigned to variables with the attributes LIMITED ENTRY. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1677I</key>
    <name>Assignment of ENTRY to target type is invalid. If the ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1677I</internalKey>
    <description>An ENTRY constant or variable without an argument list will not be invoked and hence can be assigned only to an ENTRY variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1678I</key>
    <name>Assignment of source type to target type is invalid. </name>
    <internalKey>IBM1678I</internalKey>
    <description>The target attributes conflict with the source attributes. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1679I</key>
    <name>Assignment of POINTER to OFFSET is invalid unless the OFFSET is declared with an AREA qualifier. </name>
    <internalKey>IBM1679I</internalKey>
    <description>POINTER expressions can be converted to OFFSET only if the OFFSET is declared with an AREA qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1680I</key>
    <name>Assignment of OFFSET to POINTER is invalid unless the OFFSET is declared with an AREA qualifier. </name>
    <internalKey>IBM1680I</internalKey>
    <description>OFFSET variables can be converted to POINTER only if the OFFSET is declared with an AREA qualifier. 59 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1681I</key>
    <name>The number of preprocessor invocations specified exceeds the maximum number (25) allowed. </name>
    <internalKey>IBM1681I</internalKey>
    <description>A maximum of 25 preprocessor invocations can be specified in the PP option or in combination with the MACRO option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1682I</key>
    <name>The target in a BY NAME assignment must be a structure. </name>
    <internalKey>IBM1682I</internalKey>
    <description>The target in a BY NAME assignment cannot be an array or a scalar. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1683I</key>
    <name>Set of matching names in the expansion of BY NAME assignment must contain either all structures or no structures. </name>
    <internalKey>IBM1683I</internalKey>
    <description>For instance, in the assignment, x = y, by name, if both x and y immediately contain a member z, then either both x.z and y.z are structures or neither x.z and y.z is a structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1684I</key>
    <name>Number of dimensions in the BY NAME corresponding elements variable name and variable name do not match. </name>
    <internalKey>IBM1684I</internalKey>
    <description>In a BY NAME assignment, arrays with matching names must have the same number of dimensions. dcl 1 a, 2 b(4,5) bin(31,0), 2 c bin(31,0); dcl 1 x, 2 b(4) bin(31,0), 2 c bin(31,0); a = x, by name; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1685I</key>
    <name>Upper and lower bounds in BY NAME corresponding elements variable name and variable name do not match. </name>
    <internalKey>IBM1685I</internalKey>
    <description>In a BY NAME assignment, arrays with matching names must have the same lower and upper bounds. dcl 1 a, 2 b(1:5) bin(31,0), 2 c bin(31,0); dcl 1 x, 2 b(0:4) bin(31,0), 2 c bin(31,0); a = x, by name; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1686I</key>
    <name>BY NAME assignment contains UNIONs. </name>
    <internalKey>IBM1686I</internalKey>
    <description>The target structure in a BY NAME assignment must not contain any UNIONs even if no names in those UNIONs match names in the source. The source expression also must contain any unions or structures containing unions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1687I</key>
    <name>reserved name cannot be declared with OPTIONS other than ASM. </name>
    <internalKey>IBM1687I</internalKey>
    <description>If the DLI compiler option is specified, PLITDLI cannot be declared with any OPTIONS other than OPTIONS(ASM). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1688I</key>
    <name>reserved name cannot be declared with an entry description list. </name>
    <internalKey>IBM1688I</internalKey>
    <description>If the DLI compiler option is specified, PLITDLI cannot be declared with an entry description list. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1689I</key>
    <name>reserved name cannot be declared as a function. </name>
    <internalKey>IBM1689I</internalKey>
    <description>If the DLI compiler option is specified, PLITDLI cannot be declared as a function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1690I</key>
    <name>OPTIONS(language-name) is not supported for functions. </name>
    <internalKey>IBM1690I</internalKey>
    <description>Functions, i.e. entrys declared with the RETURNS attribute, cannot be declared with OPTIONS(ASM) or OPTIONS(COBOL). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1691I</key>
    <name>Extents in ENTRY descriptors must be asterisks or restricted expressions with computational type. </name>
    <internalKey>IBM1691I</internalKey>
    <description>In ENTRY descriptors, each array bound, string length and AREA size must be specified either with an asterisk or with a restricted expression that has computational type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1692I</key>
    <name>An ENTRY invoked as a function must have the RETURNS attribute. </name>
    <internalKey>IBM1692I</internalKey>
    <description>There is no default RETURNS attribute. dcl e entry; a = e(); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1693I</key>
    <name>call-option option repeated in CALL statement. </name>
    <internalKey>IBM1693I</internalKey>
    <description>The TASK, EVENT and PRIORITY options may be specified only once in any CALL statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1694I</key>
    <name>Reference in CALL statement must not be a built-in function. </name>
    <internalKey>IBM1694I</internalKey>
    <description>CALL x is invalid unless x is a built-in subroutine, an ENTRY constant, or an ENTRY variable. Built-in functions are not built-in references. For example, "Call SQRT(x)" is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1695I</key>
    <name>Reference in CALL statement must either be a built-in subroutine or have type ENTRY. </name>
    <internalKey>IBM1695I</internalKey>
    <description>CALL x is invalid unless x is a built-in subroutine, an ENTRY constant, or an ENTRY variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1696I</key>
    <name>RETURN statement without an expression is invalid inside a subprocedure that specified the RETURNS attribute. </name>
    <internalKey>IBM1696I</internalKey>
    <description>All RETURN statements inside functions must specify a value to be returned. a: proc returns( fixed bin ); return; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1697I</key>
    <name>RETURN statement is invalid inside a PROCEDURE that did not specify the RETURNS attribute. </name>
    <internalKey>IBM1697I</internalKey>
    <description>A statement of the form RETURN(x) is valid inside only PROCEDUREs that are defined with a RETURNS attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1698I</key>
    <name>RETURN statement with an expression is invalid inside a BEGIN in a PROCEDURE that does not have the RETURNS(BYADDR) attribute. </name>
    <internalKey>IBM1698I</internalKey>
    <description>A statement of the form RETURN(x) is valid inside a BEGIN block only if the PROCEDURE enclosing that BEGIN block has the RETURNS(BYADDR) attribute explicitly or by default. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1699I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is an aggregate. This conflicts with the BYVALUE option. </name>
    <internalKey>IBM1699I</internalKey>
    <description>Arrays, structures, and unions cannot be passed BYVALUE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1700I</key>
    <name>AREAs must be passed BYADDR. </name>
    <internalKey>IBM1700I</internalKey>
    <description>Even AREA variables with constant size must be passed BYADDR. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1701I</key>
    <name>Argument number argument-number in ENTRY reference ENTRY name is a string with unknown size. This conflicts with the BYVALUE option. </name>
    <internalKey>IBM1701I</internalKey>
    <description>Only strings with constant size can be passed BYVALUE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1702I</key>
    <name>The attribute keyword attribute is invalid as a RETURNS subattribute. </name>
    <internalKey>IBM1702I</internalKey>
    <description>Structures and union may not be returned. The following code example is invalid: dcl a entry returns( 1 union, 2 ptr, 2 ptr ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1703I</key>
    <name>Reference in CALL statement must not be an aggregate reference. </name>
    <internalKey>IBM1703I</internalKey>
    <description>CALL references must be scalars. dcl ea(10) entry; call ea; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1704I</key>
    <name>Too many argument lists have been specified for the variable variable name. </name>
    <internalKey>IBM1704I</internalKey>
    <description>A function can have only one argument list unless it returns an ENTRY, in which case it can have only two argument lists unless the returned ENTRY returns an ENTRY, and so on. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1705I</key>
    <name>RETURN expression with attribute source type is invalid for RETURNS options specifying the attribute target type. </name>
    <internalKey>IBM1705I</internalKey>
    <description>The RETURN expression must have a type that can be converted to the type indicated in the RETURNS option. a: proc returns( pointer ) return( 0 ); end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1706I</key>
    <name>RETURN expression with attribute source type is invalid for RETURNS options specifying the attribute target type. If the ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1706I</internalKey>
    <description>The RETURN expression must have a type that can be converted to the type indicated in the RETURNS option. 61 a: proc returns( pointer ) dcl f entry returns( pointer ); return( f ); end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1707I</key>
    <name>RETURN expression with attribute source type is invalid for RETURNS options specifying the attribute LIMITED ENTRY. </name>
    <internalKey>IBM1707I</internalKey>
    <description>Only an EXTERNAL ENTRY CONSTANT, an ENTRY CONSTANT representing a non-nested PROCEDURE, or an ENTRY VARIABLE with the LIMITED attribute can be specified as the RETURNS expression in a function that returns a LIMITED ENTRY. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1708I</key>
    <name>RETURN expression with attribute POINTER is invalid for RETURNS options specifying the attribute OFFSET since the OFFSET attribute is not declared with an AREA qualifier. </name>
    <internalKey>IBM1708I</internalKey>
    <description>POINTER expressions can be converted to OFFSET only if the offset is declared with an AREA qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1709I</key>
    <name>RETURN expression with attribute OFFSET is invalid for RETURNS options specifying the attribute POINTER since the OFFSET expression is not an OFFSET variable declared with an AREA qualifier. </name>
    <internalKey>IBM1709I</internalKey>
    <description>OFFSET variables can be converted to POINTER only if the OFFSET is declared with an AREA qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1710I</key>
    <name>ORDINAL type in RETURN expression and RETURNS option must match. </name>
    <internalKey>IBM1710I</internalKey>
    <description>In a function that returns an ordinal, the ORDINAL type in any RETURN expression must be the same as returned by the function. a: proc returns( ordinal color ); dcl i ordinal intensity; return( i ); end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1711I</key>
    <name>Expression in RETURN statement must be scalar. </name>
    <internalKey>IBM1711I</internalKey>
    <description>The expression in a RETURN statement must not be an array, a structure, or a union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1712I</key>
    <name>External name specification must be a non-null string. </name>
    <internalKey>IBM1712I</internalKey>
    <description>EXTERNAL('') is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1713I</key>
    <name>Function function name contains no RETURN statement. </name>
    <internalKey>IBM1713I</internalKey>
    <description>Functions must contain at least one RETURN statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1714I</key>
    <name>Extents in RETURNS descriptors must be constants. </name>
    <internalKey>IBM1714I</internalKey>
    <description>In RETURNS descriptors, each array bound, string length, and AREA size must be specified with a restricted expression that has computational type. Unlike ENTRY descriptors, asterisks are not permitted. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1715I</key>
    <name>Exit from an ON-unit via RETURN is invalid. </name>
    <internalKey>IBM1715I</internalKey>
    <description>RETURN statements are not permitted in an ON-unit or any of its contained BEGIN blocks unless the contained block is also contained in a procedure defined in the ON-unit. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1716I</key>
    <name>FORMAT expression must be a scalar value. </name>
    <internalKey>IBM1716I</internalKey>
    <description>Expressions in FORMAT lists, including SKIP clauses, must represent scalar values. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1717I</key>
    <name>FORMAT expression must have computational type. </name>
    <internalKey>IBM1717I</internalKey>
    <description>Expressions in FORMAT lists, including SKIP clauses, must have computational type so that the expression can be converted to FIXED BIN(31). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1718I</key>
    <name>source type is invalid as a Boolean expression. </name>
    <internalKey>IBM1718I</internalKey>
    <description>The expression in an IF, WHILE, UNTIL, SELECT, or WHEN clause must have computational type so that it can be converted to BIT(1). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1719I</key>
    <name>ENTRY is invalid as a Boolean expression. If an ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1719I</internalKey>
    <description>The expression in an IF, WHILE, UNTIL, SELECT, or WHEN clause must have computational type so that it can be converted to BIT(1). An ENTRY cannot be used as a Boolean expression. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1720I</key>
    <name>Expression for calculating size of variable with adjustable extents is too complicated. Variable may be defined in terms of itself. </name>
    <internalKey>IBM1720I</internalKey>
    <description>An expression used in calculating the size of a variable must not depend on any values that the variable may have because those values do not exist until storage can be allocated for the variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1721I</key>
    <name>Expression contains too many nested subexpressions. </name>
    <internalKey>IBM1721I</internalKey>
    <description>The compiler's space for evaluating expressions has been exhausted. Rewrite the expression in terms of simpler expressions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1722I</key>
    <name>The number of error messages allowed by the MAXMSG option has been exceeded. </name>
    <internalKey>IBM1722I</internalKey>
    <description>Compilation will terminate when the number of messages has exceeded the limit set in the MAXMSG compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1723I</key>
    <name>Result of concatenating two literals is too long. </name>
    <internalKey>IBM1723I</internalKey>
    <description>The length of the string literal produced by concatenating two string literals must not be greater than the maximum allowed for a literal with the derived string type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1724I</key>
    <name>Addition of source type and target type is invalid. </name>
    <internalKey>IBM1724I</internalKey>
    <description>One of the operands in an addition must be computational and the other must be either computational or a locator. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1725I</key>
    <name>Addition of source type and target type is invalid. If an ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1725I</internalKey>
    <description>An ENTRY cannot be used as an arithmetic operand. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1726I</key>
    <name>Subtraction of target type from source type is invalid. </name>
    <internalKey>IBM1726I</internalKey>
    <description>The first operand in a subtraction must be computational or a locator. The second operand can be a locator only if the first is a locator. Otherwise, the second operand must be computational. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1727I</key>
    <name>Subtraction of target type from source type is invalid. If an ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1727I</internalKey>
    <description>An ENTRY cannot be used as an arithmetic operand. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1728I</key>
    <name>Multiplication of source type by target type is invalid. </name>
    <internalKey>IBM1728I</internalKey>
    <description>Both operands in a multiplication must be computational. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1729I</key>
    <name>Multiplication of source type by target type is invalid. If an ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1729I</internalKey>
    <description>An ENTRY cannot be used as an arithmetic operand. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1730I</key>
    <name>Division of source type by target type is invalid. </name>
    <internalKey>IBM1730I</internalKey>
    <description>Both operands in a division must be computational. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1731I</key>
    <name>Division of source type by target type is invalid. If an ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1731I</internalKey>
    <description>An ENTRY cannot be used as an arithmetic operand. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1732I</key>
    <name>Unsupported use of aggregate expression. </name>
    <internalKey>IBM1732I</internalKey>
    <description>Aggregate expressions are supported only as the source in an assignment statement and, with some limitations, as an argument to the ANY or ALL built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1733I</key>
    <name>Concatenate operands must have computational type. </name>
    <internalKey>IBM1733I</internalKey>
    <description>Only expressions having string or numeric type may be concatenated. 63 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1734I</key>
    <name>Operand in a prefix expression is not computational. </name>
    <internalKey>IBM1734I</internalKey>
    <description>The prefix operators (plus, minus, and logical not) may be applied only to expressions having string or numeric type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1735I</key>
    <name>AREA variables may not be compared. </name>
    <internalKey>IBM1735I</internalKey>
    <description>No relational operations are defined for AREA variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1736I</key>
    <name>Comparison of source type to target type is invalid. </name>
    <internalKey>IBM1736I</internalKey>
    <description>Computational types can be compared only with other computational types, and non-computational types can be compared only with like non-computational types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1737I</key>
    <name>Comparison of ENTRY to target type is invalid. If the ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1737I</internalKey>
    <description>ENTRYs can be compared only with other ENTRYs. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1738I</key>
    <name>Comparison of source type to ENTRY is invalid. If the ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1738I</internalKey>
    <description>ENTRYs can be compared only with other ENTRYs. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1739I</key>
    <name>TASK variables may not be compared. </name>
    <internalKey>IBM1739I</internalKey>
    <description>No relational operations are defined for TASK variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1740I</key>
    <name>Comparison of an OFFSET to a POINTER is invalid since the OFFSET comparand is not an OFFSET variable declared with an AREA qualifier. </name>
    <internalKey>IBM1740I</internalKey>
    <description>An OFFSET can be compared with a POINTER as long as the OFFSET can be converted to a POINTER. This requires that the OFFSET is declared with an AREA qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1741I</key>
    <name>Operands in comparison have differing strong types. </name>
    <internalKey>IBM1741I</internalKey>
    <description>Comparisons of strongly-typed variables are invalid unless both have the same type. dcl hp handle point; dcl hr handle rectangle; if hp = hr then ... </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1742I</key>
    <name>Compared ORDINALs must have the same ORDINAL type. </name>
    <internalKey>IBM1742I</internalKey>
    <description>ORDINALs cannot be compared with other ORDINALs having a different ORDINAL type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1743I</key>
    <name>Source and target in assignment have differing strong types. </name>
    <internalKey>IBM1743I</internalKey>
    <description>Assignments of strongly-typed variables are invalid unless both have the same type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1744I</key>
    <name>Conversion of ORDINALs is invalid unless both have the same ORDINAL type. </name>
    <internalKey>IBM1744I</internalKey>
    <description>ORDINALs cannot be assigned to other ORDINALs having different ORDINAL type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1745I</key>
    <name>In a function that returns a strong type, the type in any RETURN expression must be the same as that returned by the function. </name>
    <internalKey>IBM1745I</internalKey>
    <description>For instance, in a function that returns a typed structure, any RETURN expression must have the same structure type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1746I</key>
    <name>VALUE and STATIC INITIAL expressions must be constant. </name>
    <internalKey>IBM1746I</internalKey>
    <description>These expressions must be reducible to a constant at compile-time. dcl a fixed bin static nonassignable init(0); dcl m fixed bin value( a ); dcl n fixed bin static init( a ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1747I</key>
    <name>Function cannot be used before the function's descriptor list has been scanned. </name>
    <internalKey>IBM1747I</internalKey>
    <description>This is a compiler restriction. Reorder the declarations and blocks in your program. For example, the following declarations should be in reverse order. dcl a char( csize( x, y ) ); dcl csize entry( char(2), fixed bin ) returns( fixed bin ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1748I</key>
    <name>Extents of automatic variables must not depend on the extents of automatic variables declared later in the same block. </name>
    <internalKey>IBM1748I</internalKey>
    <description>Reorder the declarations in your program. For example, the following declarations should be in reverse order. dcl a char( length(b) ) auto; dcl b char( 10 ) auto; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1749I</key>
    <name>VALUE and INITIAL expressions must be scalars. </name>
    <internalKey>IBM1749I</internalKey>
    <description>Aggregate expressions are not valid as INITIAL and VALUE expressions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1750I</key>
    <name>INITIAL attribute is invalid for the STATIC LABEL variable variable-name since it has the MEMBER attribute. </name>
    <internalKey>IBM1750I</internalKey>
    <description>The INITIAL attribute is supported for a STATIC LABEL variable only if the variable is a scalar or an array of scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1751I</key>
    <name>INITIAL attribute is valid for the STATIC ENTRY variable variable-name only if it has the LIMITED attribute. </name>
    <internalKey>IBM1751I</internalKey>
    <description>ENTRY variables that don't have the LIMITED attribute require block activation information, and hence they cannot be initialized at compile-time. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1753I</key>
    <name>INITIAL attribute is invalid for the STATIC FORMAT variable variable-name. </name>
    <internalKey>IBM1753I</internalKey>
    <description>FORMAT variables require block activation information, and hence they cannot be initialized at compile-time. If the variable were not a member of a structure, the storage class would be changed to AUTOMATIC and an error message would be issued instead. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1754I</key>
    <name>An asterisk iteration factor can be applied only to the last expression in the INITIAL item list for variable-name. </name>
    <internalKey>IBM1754I</internalKey>
    <description>Since an asterisk iteration factor completes the initialization of a variable, it cannot be followed by more initial values. dcl a(10) fixed bin init( 1, 2, (*) 0, 8 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1755I</key>
    <name>An asterisk iteration factor cannot be used in the nested INITIAL item list for variable-name. </name>
    <internalKey>IBM1755I</internalKey>
    <description>An asterisk iteration can be used only in a non-nested INITIAL item list. The following example is invalid. dcl a(20) fixed bin init( (2) ( 1, (*) 2 ) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1756I</key>
    <name>The scalar variable variable-name has an INITIAL list with more than one item. </name>
    <internalKey>IBM1756I</internalKey>
    <description>Only arrays can have an INITIAL list with more than one element. dcl a fixed bin init( 1, 2 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1757I</key>
    <name>LABEL constant in STATIC INITIAL for the variable variable-name must be in the same block as the LABEL being initialized. </name>
    <internalKey>IBM1757I</internalKey>
    <description>Change the storage class to AUTOMATIC. lx:; subproc: proc; dcl la static label init( lx ); end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1758I</key>
    <name>Only one element in the STATIC UNION variable-name may have the INITIAL attribute. </name>
    <internalKey>IBM1758I</internalKey>
    <description>If more than one element in a STATIC UNION had an INITIAL value, it would not be clear which should take precedence. dcl 1 a union static, 2 b fixed bin(31) init( 17 ), 2 c fixed bin(15) init( 19 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1759I</key>
    <name>Non-null INITIAL values are not supported for the STATIC NONCONNECTED array variable-name since it has the attributes UNALIGNED BIT. </name>
    <internalKey>IBM1759I</internalKey>
    <description>The only supported INITIAL values for a STATIC UNALIGNED BIT variable with inherited dimensions are bit strings equal to ''b. 65 dcl 1 a(10,2) static, 2 b1 bit(1) init( (20) ’1’b ), 2 b2 bit(1) init( (20) ’0’b ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1760I</key>
    <name>LABEL constant in the STATIC INITIAL list for variable-name must not be an element of a LABEL CONSTANT array. </name>
    <internalKey>IBM1760I</internalKey>
    <description>Replace the subscripted LABEL with an unsubscripted one or change the storage class to AUTOMATIC. lx(1):; lx(2):; dcl la(2) static label init( lx(2), lx(1) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1761I</key>
    <name>ENTRY reference in INITIAL clause for the STATIC ENTRY variable variable-name must not be FETCHABLE. </name>
    <internalKey>IBM1761I</internalKey>
    <description>The variable y in DCL x ENTRY LIMITED INIT(y) must not be FETCHABLE; y must not be used in a FETCH or RELEASE statement, and y must not have the OPTIONS(FETCHABLE) attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1762I</key>
    <name>INITIAL iteration factor must have computational type. </name>
    <internalKey>IBM1762I</internalKey>
    <description>Iteration factors in INITIAL lists must have numeric or string types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1763I</key>
    <name>INITIAL iteration factor must be a scalar. </name>
    <internalKey>IBM1763I</internalKey>
    <description>An iteration factor in an INITIAL list must not be an array, structure, or union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1764I</key>
    <name>The BYVALUE attribute is invalid for strings of nonconstant length. </name>
    <internalKey>IBM1764I</internalKey>
    <description>Strings with nonconstant length must be passed and received by address. a: proc( x ); dcl x char(*) byvalue; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1765I</key>
    <name>Length of string with the VALUE attribute must be a constant or an asterisk. </name>
    <internalKey>IBM1765I</internalKey>
    <description>Named strings must have a constant length or a length determined from their VALUE. dcl a fixed bin automatic; dcl s char(a) value(’variable length’); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1766I</key>
    <name>VALUE for variable-name must be evaluated before its first use. </name>
    <internalKey>IBM1766I</internalKey>
    <description>Named constants must be evaluated before they are used. Reorder the declarations so that each named constant is declared before its first use. dcl a char(n) static init( ’tooSoon’ ); dcl n fixed bin value( 7 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1767I</key>
    <name>Control variable in DO statement must not be a named constant. </name>
    <internalKey>IBM1767I</internalKey>
    <description>Named constants may not be used as control variables in DO loops. dcl n fixed bin value( 7 ); do n = 1 to 5; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1768I</key>
    <name>Control variable in DO statement must have VARIABLE attribute. </name>
    <internalKey>IBM1768I</internalKey>
    <description>Constants may not be used as control variables in DO loops. dcl ex external entry, (ev1, ev2) entry; do ex = ev1, ev2; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1769I</key>
    <name>Control variable has type POINTER, but TO expression does not. </name>
    <internalKey>IBM1769I</internalKey>
    <description>If the control variable in a DO loop has POINTER type, the TO expression must have POINTER type. Implicit conversion from OFFSET to POINTER is not supported in this context. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1770I</key>
    <name>Control variable in loop with TO clause must have computational or locator type. </name>
    <internalKey>IBM1770I</internalKey>
    <description>In a DO loop with a TO clause, the control variable must have a type that allows a comparison of less than and greater than. This is possible only for computational and locator types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1771I</key>
    <name>The variable name BUILTIN function may be used as a pseudovariable in a DO-loop only if the length of the pseudovariable reference is known at compile time. </name>
    <internalKey>IBM1771I</internalKey>
    <description>SUBSTR and UNSPEC may be used as pseudovariables in DO-loops only if their derived length is known at compile time. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1772I</key>
    <name>Source in DO loop initialization must be scalar. </name>
    <internalKey>IBM1772I</internalKey>
    <description>In a DO loop of the form DO a = b TO c, b must be a scalar. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1773I</key>
    <name>Control variable in DO statement must be a scalar. </name>
    <internalKey>IBM1773I</internalKey>
    <description>In a DO loop of the form DO x = .., x must be a scalar. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1774I</key>
    <name>Compiler restriction: control variable in DO statement must not be a BASED or CONTROLLED string or area that has non-constant extent. </name>
    <internalKey>IBM1774I</internalKey>
    <description>In a DO loop of the form DO x = .., if x is a string or an area, then it must have constant size or must be static, automatic, or defined. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1775I</key>
    <name>BY expression must have computational type. </name>
    <internalKey>IBM1775I</internalKey>
    <description>The expression in the BY clause of a DO loop must have a string or numeric type. It cannot have a locator type because it must be comparable to zero. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1776I</key>
    <name>BY expression must not be COMPLEX. </name>
    <internalKey>IBM1776I</internalKey>
    <description>The expression in the BY clause of a DO loop must be REAL. dcl z cplx float; do jx = 1 to 10 by z; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1777I</key>
    <name>TO expression must not be COMPLEX. </name>
    <internalKey>IBM1777I</internalKey>
    <description>The expression in the TO clause of a DO loop must be REAL dcl z cplx float; do jx = 1 to z; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1778I</key>
    <name>Control variable in loop with TO clause must not be COMPLEX. </name>
    <internalKey>IBM1778I</internalKey>
    <description>In a DO loop with a TO clause, the control variable must have a type that allows a comparison of less than and greater than. This is possible for numeric types only if the numeric type is REAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1779I</key>
    <name>TO expression must have computational type. </name>
    <internalKey>IBM1779I</internalKey>
    <description>The expression in the TO clause of a DO loop must have a string or numeric type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1780I</key>
    <name>SIGNAL ANYCONDITION is invalid. </name>
    <internalKey>IBM1780I</internalKey>
    <description>ON ANYCONDITION may be used to trap conditions not otherwise trapped, but ANYCONDITION may not be signalled. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1781I</key>
    <name>And, or and exclusive-or of source type and target type is invalid. </name>
    <internalKey>IBM1781I</internalKey>
    <description>Bitwise operands must have a computational type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1782I</key>
    <name>And, or and exclusive-or of source type and target type is invalid. If an ENTRY should be invoked, an argument list must be provided. </name>
    <internalKey>IBM1782I</internalKey>
    <description>An ENTRY cannot be used as a bitwise operand. If the ENTRY is a function which should be invoked, an argument list, even if it consists only of a left and right parenthesis, must be provided. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1783I</key>
    <name>BASED variable without an implicit qualifier must be explicitly qualified. </name>
    <internalKey>IBM1783I</internalKey>
    <description>A variable declared as BASED instead of as BASED( reference ) must always be explicitly qualified. This is necessary even when the variable is an argument to built-in functions such as STORAGE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1784I</key>
    <name>The ENTRY variable-name may not be used as a locator qualifier since it does not have the RETURNS attribute. </name>
    <internalKey>IBM1784I</internalKey>
    <description>Functions, but not subprocedures, can be used as locator qualifiers (and then only if they return a locator). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1785I</key>
    <name>The variable variable-name is used as a locator qualifier, but it is not a scalar. </name>
    <internalKey>IBM1785I</internalKey>
    <description>Only scalars can be used as locator qualifiers. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1786I</key>
    <name>BUILTIN name built-in may not be used as a locator qualifier. </name>
    <internalKey>IBM1786I</internalKey>
    <description>The named built-in function cannot be used as a locator qualifier since it does not return a POINTER. 67 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1787I</key>
    <name>The ENTRY variable-name may not be used as a locator qualifier. </name>
    <internalKey>IBM1787I</internalKey>
    <description>x(...)-&gt;y is invalid unless x returns a POINTER or an OFFSET declared with a qualifying AREA. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1789I</key>
    <name>The qualifier variable-name does not have locator type. </name>
    <internalKey>IBM1789I</internalKey>
    <description>Only POINTERs and OFFSETs declared with a qualifying AREA can be used as locator qualifiers. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1790I</key>
    <name>Locator qualification is invalid for variable-name. </name>
    <internalKey>IBM1790I</internalKey>
    <description>Locator qualification is valid only for BASED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1791I</key>
    <name>The locator qualified reference reference name is ambiguous. </name>
    <internalKey>IBM1791I</internalKey>
    <description>All references must be unambiguous. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1792I</key>
    <name>The locator qualified reference reference name is unknown. </name>
    <internalKey>IBM1792I</internalKey>
    <description>Locator qualified references must be explicitly declared. BASED variables may not be implicitly declared. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1793I</key>
    <name>The variable name BUILTIN function may not be used as a pseudovariable in a DO-loop. </name>
    <internalKey>IBM1793I</internalKey>
    <description>Only IMAG, REAL, SUBSTR and UNSPEC may be used as pseudovariables in DO loops. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1794I</key>
    <name>Too many implicit locators are needed to resolve the qualification for a variable. Variable may be based on itself. </name>
    <internalKey>IBM1794I</internalKey>
    <description>An implicitly qualified variable must require no more than 15 qualifiers to be completely qualified. If it requires more, this may indicate its qualifiers are too interdependent. dcl a pointer based(b); dcl b pointer based(a); a = null(); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1795I</key>
    <name>The OFFSET variable variable-name may not be used as a locator qualifier since it was not declared with an AREA specification. </name>
    <internalKey>IBM1795I</internalKey>
    <description>An OFFSET variable can be used as a locator qualifier only if it can be converted to a pointer value. This requires that the offset be declared with an AREA qualification. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1796I</key>
    <name>Qualifier must be a scalar. </name>
    <internalKey>IBM1796I</internalKey>
    <description>Arrays, structures, and unions may not be used as locator qualifiers. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1797I</key>
    <name>BASED variables may not contain extents with nonconstant values if other extents use the REFER option. </name>
    <internalKey>IBM1797I</internalKey>
    <description>The REFER option cannot be used in a BASED variable which also has an extent that is set by a non-constant expression. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1798I</key>
    <name>Invalid scale factor in PICTURE specification. </name>
    <internalKey>IBM1798I</internalKey>
    <description>The picture character F specifies a picture scaling factor for fixed-point decimal numbers. The number of digits following the V picture character, minus the integer specified with F, must be between -128 and 127. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1799I</key>
    <name>Invalid characters in PICTURE specification. </name>
    <internalKey>IBM1799I</internalKey>
    <description>The picture specification can contain only A X 9 for the Character Data, and only 9 V Z * , . / B S + - $ CR DB Y K E F &lt; &gt; for the Numeric Data. The characters between the insertion characters &lt; &gt; are not affected by this rule. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1800I</key>
    <name>Invalid characters in the F scaling factor. </name>
    <internalKey>IBM1800I</internalKey>
    <description>The picture character F specifies a picture scaling factor for fixed-point decimal numbers. The format is F(n) where n can be any signed integer between -128 and 127 inclusively. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1801I</key>
    <name>A character PICTURE string may have only A, X, or 9. </name>
    <internalKey>IBM1801I</internalKey>
    <description>The picture specification can contain only A, X, or 9 for the character data. Other characters are not permitted. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1802I</key>
    <name>Invalid precision in PICTURE fixed decimal precision. </name>
    <internalKey>IBM1802I</internalKey>
    <description>The number of digits for the precision field within a numeric data picture specification must be between one and the maximum allowed by the LIMITS(FIXEDDEC) option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1803I</key>
    <name>Too many T, I, or R appear in the PICTURE specification. </name>
    <internalKey>IBM1803I</internalKey>
    <description>T, I, or R are the overpunched characters in the picture specification. Only one overpunched character can appear in the specification for a fixed point number. A floating-point specification can contain two (One in the mantissa field and one in the exponent field). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1804I</key>
    <name>PICTURE specifications in C-format items must be arithmetic. </name>
    <internalKey>IBM1804I</internalKey>
    <description>Character PICTURE specifications are not permitted in C-format items. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1805I</key>
    <name>Precision in numeric PICTURE must NOT be less than 1. </name>
    <internalKey>IBM1805I</internalKey>
    <description>The precision field within a numeric data picture specification must contain at least one digit. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1806I</key>
    <name>The precision in FIXED DECIMAL PICTURE is too big. </name>
    <internalKey>IBM1806I</internalKey>
    <description>The precision in the fixed decimal picture specification must not exceed that specified in the LIMITS compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1807I</key>
    <name>Precision in FLOAT DECIMAL PICTURE is too big. </name>
    <internalKey>IBM1807I</internalKey>
    <description>The precision in the float decimal picture specification is limited by the hardware to 18 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1808I</key>
    <name>PICTURE string is empty. </name>
    <internalKey>IBM1808I</internalKey>
    <description>Null picture strings (''P) are invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1809I</key>
    <name>Exponent in FLOAT PICTURE is too long. Exponent will be truncated to fit. </name>
    <internalKey>IBM1809I</internalKey>
    <description>The number of digits in the exponent of the float decimal picture specification is limited to 4. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1810I</key>
    <name>Exponent in FLOAT PICTURE has no digits. </name>
    <internalKey>IBM1810I</internalKey>
    <description>The exponent in the float decimal picture specification is missing. It must be entered even if it is zero. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1811I</key>
    <name>Exponent in PICTURE specification cannot contain V. </name>
    <internalKey>IBM1811I</internalKey>
    <description>V specifies an implicit decimal point. Therefore, it is not permitted in the exponent field. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1812I</key>
    <name>FLOAT PICTURE cannot contain CR, DB or F. </name>
    <internalKey>IBM1812I</internalKey>
    <description>Credit (CR), debit (DB), and scale factor (F) are only allowed in the FIXED picture specification. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1813I</key>
    <name>PICTURE specification is too long. Excess characters are truncated on the right. </name>
    <internalKey>IBM1813I</internalKey>
    <description>The compiler restrictions on the length of the picture specification are: fixed decimal: 254 float decimal: 253 character data: 511 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1814I</key>
    <name>PICTURE string has an invalid floating insertion character string. </name>
    <internalKey>IBM1814I</internalKey>
    <description>The floating insertion string is delimited by &lt; &gt;. Floating is done by the &gt; character. The string can contain any character with one exception: the delimiters themselves. In order to include the characters &lt; and &gt; in the floating insertion string, these angle brackets must be used in an escaped format. &lt;&lt; must be used to specify the character &lt;, and &lt;&gt; must be used to specify the character &gt;. So, for example, &lt;aaa&lt;&lt;bbb&lt;&gt;ccc&gt; denotes the insertion string aaa&lt;bbb&gt;ccc. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1815I</key>
    <name>BUILTIN name is a built-in subroutine. It should be used only in CALL statements and not as a function. </name>
    <internalKey>IBM1815I</internalKey>
    <description>Built-in subroutines cannot be used as functions - they can only be called. For instance, the following code is invalid dcl pliretc builtin; rc = pliretc( 16 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1816I</key>
    <name>keyword item variable name is not computational. </name>
    <internalKey>IBM1816I</internalKey>
    <description>The expression must be arithmetic or string. dcl x label variable; put list( x ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1817I</key>
    <name>The KEYTO reference must be of type CHARACTER or GRAPHIC. </name>
    <internalKey>IBM1817I</internalKey>
    <description>The KEYTO reference should have the data type character or graphic. The reference can also be a variable with a non-numeric picture string specification. 69 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1818I</key>
    <name>I/O-option conflicts with previous options on the I/O-stmt statement. </name>
    <internalKey>IBM1818I</internalKey>
    <description>An option on the I/O statement conflicts with prior options. open file(f1) input output; read file(f) into(x) set(p); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1819I</key>
    <name>The I/O-option option is multiply specified on the I/O-stmt statement. </name>
    <internalKey>IBM1819I</internalKey>
    <description>Each option may be specified only once. read file(f1) ignore(1) ignore(2); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1820I</key>
    <name>Mandatory I/O-option option not specified on the I/O-stmt statement. </name>
    <internalKey>IBM1820I</internalKey>
    <description>A required statement element has not been specified. open output; write file(x); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1821I</key>
    <name>Reference for from-into-option is an invalid element or aggregate type. </name>
    <internalKey>IBM1821I</internalKey>
    <description>An invalid scalar or aggregate reference has been specified for the FROM or INTO clause in a record I/O statement. The example below will cause this message to be issued. dcl f1 file; read file(f1) into(f1); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1822I</key>
    <name>The keyword-type expression must be computational. </name>
    <internalKey>IBM1822I</internalKey>
    <description>The expression in a KEY or KEYFROM record I/O statement option must be computational data. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1823I</key>
    <name>SET reference must have locator type. </name>
    <internalKey>IBM1823I</internalKey>
    <description>In the SET clause of an ALLOCATE or LOCATE statement, the reference must have the type POINTER or OFFSET. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1824I</key>
    <name>keyword expression must be scalar. </name>
    <internalKey>IBM1824I</internalKey>
    <description>The expression in the named keyword clause must be scalar. This keyword clause could be an IF, UNTIL, WHILE, WHEN, KEY, KEYFROM or KEYTO clause. dcl f1 file; dcl x char(10); dcl z(10) char(10); read file(f1) into(x) key(z); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1825I</key>
    <name>The reference in the keyword clause cannot be a built-in function reference. </name>
    <internalKey>IBM1825I</internalKey>
    <description>The references for the KEYTO, FROM, INTO, and SET record I/O options cannot be built-in functions. The example below will cause this message to be issued. dcl f1 file; dcl x char(10); read file(f1) into(hex(x)); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1826I</key>
    <name>The reference in the keyword clause cannot be a function invocation. </name>
    <internalKey>IBM1826I</internalKey>
    <description>The references for the KEYTO, FROM, INTO, and SET record I/O options cannot be entry. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1827I</key>
    <name>The reference in the keyword clause must have CHARACTER type. </name>
    <internalKey>IBM1827I</internalKey>
    <description>The specified reference is invalid. It must be of type character. The example below will cause this message to be issued. dcl p pointer; display (’what is your name?’) reply(p); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1828I</key>
    <name>The reference in the keyword clause must be a scalar variable. </name>
    <internalKey>IBM1828I</internalKey>
    <description>The specified reference is invalid. It must be a scalar. The example below will cause this message to be issued. dcl z(10) char(10); display (’what is your name?’) reply(z); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1829I</key>
    <name>The attributes of the argument in the clause clause conflict with its usage. </name>
    <internalKey>IBM1829I</internalKey>
    <description>The declared attributes conflict with their use in the statement. dcl f file stream; read file(f) into(x); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1830I</key>
    <name>keyword expression is not computational. </name>
    <internalKey>IBM1830I</internalKey>
    <description>The expression must be arithmetic or string. dcl p pointer; put list( ptradd(p,2) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1831I</key>
    <name>The LOCATE reference variable-name is not implicitly qualified and is invalid without a SET clause. </name>
    <internalKey>IBM1831I</internalKey>
    <description>Provide a SET clause in the LOCATE statement. dcl f file; dcl x char(10) based; locate x file(f1); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1832I</key>
    <name>SET reference must have POINTER type. </name>
    <internalKey>IBM1832I</internalKey>
    <description>The reference in the SET clause of a FETCH statement must have the POINTER type. OFFSET types are not supported in this context. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1833I</key>
    <name>The aggregate reference in the from-into clause clause must be CONNECTED. </name>
    <internalKey>IBM1833I</internalKey>
    <description>The specified reference in the FROM or INTO record I/O option is invalid. The reference must be connected. The example below will cause this message to be issued. dcl f1 file; dcl 1 a(3), 2 b(4) char(4), 2 c(4) char(4); read file(f1) into(b); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1834I</key>
    <name>The expression in IGNORE must be computational. </name>
    <internalKey>IBM1834I</internalKey>
    <description>The specified expression in the IGNORE option of the READ statement must be computational. The example below will cause this message to be issued. dcl a area; read file(f1) ignore(a); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1835I</key>
    <name>The LOCATE reference variable-name is not a level-1 BASED variable. </name>
    <internalKey>IBM1835I</internalKey>
    <description>The LOCATE reference may not be a structure member and must have the storage attribute BASED. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1836I</key>
    <name>INITIAL attribute is invalid for structures. </name>
    <internalKey>IBM1836I</internalKey>
    <description>The INITIAL attribute is valid only for scalars and arrays of scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1837I</key>
    <name>The reference in the keyword clause cannot be a named constant. </name>
    <internalKey>IBM1837I</internalKey>
    <description>The specified reference is invalid. It cannot be a named constant. The example below will cause this message to be issued. dcl f1 file; dcl x char(2); dcl val fixed bin(15) value(4); read file(f1) into(x) keyto(val); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1838I</key>
    <name>The attributes of argument-number conflict with its usage in data directed I/O. </name>
    <internalKey>IBM1838I</internalKey>
    <description>Only AUTOMATIC, CONTROLLED, PARAMETER, STATIC and and implicitly qualified BASED variables are supported in data directed I/O. dcl q based; put data(q); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1839I</key>
    <name>DATA-directed I/O does not support references with locators. </name>
    <internalKey>IBM1839I</internalKey>
    <description>Use a temporary or use LIST- or EDIT directed I/O. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1840I</key>
    <name>Subscripted references are not allowed in GET DATA. </name>
    <internalKey>IBM1840I</internalKey>
    <description>Use a temporary or use GET LIST or GET EDIT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1841I</key>
    <name>The first argument in the keyword-format item is invalid. </name>
    <internalKey>IBM1841I</internalKey>
    <description>The format argument is outside the valid range. put edit(’hi’) (a( -1) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1842I</key>
    <name>The field width specified in the keyword-format item is too small for complete input or output of the data item. </name>
    <internalKey>IBM1842I</internalKey>
    <description>The width specified is too small for complete processing. put edit(10190) (f(3)); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1843I</key>
    <name>The fractional digits specified in the keyword-format item is invalid. </name>
    <internalKey>IBM1843I</internalKey>
    <description>The fractional number of digits must be less than or equal to the field width and non-negative. 71 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1844I</key>
    <name>The argument in the R-format item is not a format constant or format variable. </name>
    <internalKey>IBM1844I</internalKey>
    <description>The argument to the R-format item must be either a format constant or a format variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1845I</key>
    <name>The significant digits specified in E-format item is invalid. </name>
    <internalKey>IBM1845I</internalKey>
    <description>The number of significant digits must be greater than or equal to the number of fractional digits, less than or equal to the field width and non-negative. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1846I</key>
    <name>The format-item format item is invalid with GET/PUT STRING. </name>
    <internalKey>IBM1846I</internalKey>
    <description>G, L, PAGE, LINE, SKIP, and COLUMN format items may not be used in GET/PUT EDIT statements using the STRING option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1847I</key>
    <name>GOTO target is inside a (different) DO loop. </name>
    <internalKey>IBM1847I</internalKey>
    <description>The target of a GOTO cannot be inside a DO loop unless the GOTO itself is in the same DO loop. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1848I</key>
    <name>The INCLUDE file for include-stmt-arg could not be found. </name>
    <internalKey>IBM1848I</internalKey>
    <description>The INCLUDE file could not be found or opened. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1849I</key>
    <name>Under CMPAT(V1), bounds must not be greater than 32767. </name>
    <internalKey>IBM1849I</internalKey>
    <description>Under CMPAT(V1), bounds must be between -32768 and 32767 inclusive. To use bounds outside this range, specify a different CMPAT option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1850I</key>
    <name>Under CMPAT(V1), bounds must not be less than -32768. </name>
    <internalKey>IBM1850I</internalKey>
    <description>Under CMPAT(V1), bounds must be between -32768 and 32767 inclusive. To use bounds outside this range, specify a different CMPAT option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1851I</key>
    <name>The INCLUDE file include-file-name could not be opened. </name>
    <internalKey>IBM1851I</internalKey>
    <description>An unexpected error occurred while trying to open an include source file. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1852I</key>
    <name>The preprocessor preprocessor is not known to the compiler. </name>
    <internalKey>IBM1852I</internalKey>
    <description>A preprocessor specified in the PP compiler option is unknown. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1853I</key>
    <name>Variable in statement statement must be a FETCHABLE entry constant. </name>
    <internalKey>IBM1853I</internalKey>
    <description>The argument in the FETCH and RELEASE statements must be a FETCHABLE entry constant. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1854I</key>
    <name>Fetch of the PP name preprocessor failed with ONCODE= oncode. </name>
    <internalKey>IBM1854I</internalKey>
    <description>The compiler attempted to load the module specified in the PP-DEF installation option for the preprocessor. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1855I</key>
    <name>Preprocessor PP name terminated abnormally with ONCODE= oncode-value. </name>
    <internalKey>IBM1855I</internalKey>
    <description>A terminating error was detected in a preprocessor invoked by the compiler. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1856I</key>
    <name>Fetch of the user exit initialization routine failed with ONCODE= oncode. </name>
    <internalKey>IBM1856I</internalKey>
    <description>The compiler was unable to load the user exit. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1857I</key>
    <name>User exit routine terminated abnormally with ONCODE= oncode-value. </name>
    <internalKey>IBM1857I</internalKey>
    <description>The compiler detected a terminating error in the user exit. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1858I</key>
    <name>Compilation aborted by user exit. </name>
    <internalKey>IBM1858I</internalKey>
    <description>The user exit aborted the compilation by setting the return code to 16. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1859I</key>
    <name>The first statement must be a PROCEDURE or PACKAGE statement. </name>
    <internalKey>IBM1859I</internalKey>
    <description>All other statements must be enclosed in a PACKAGE or PROCEDURE statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1860I</key>
    <name>PACKAGE statement must be the first statement in the program. </name>
    <internalKey>IBM1860I</internalKey>
    <description>PACKAGE statements cannot follow any other statements in the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1861I</key>
    <name>All statements other than DECLARE, DEFAULT and PROCEDURE statements must be contained inside a PROCEDURE. </name>
    <internalKey>IBM1861I</internalKey>
    <description>This message can occur, for instance, if the first PROCEDURE statement is invalid or if a PROCEDURE contains too many END statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1862I</key>
    <name>Statements are nested too deep. </name>
    <internalKey>IBM1862I</internalKey>
    <description>The nesting of PROCEDURE, DO, SELECT and similar statements is greater than that supported by the compiler. Rewrite the program so that it is less complicated. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1863I</key>
    <name>Variables declared in a PACKAGE outside of any PROCEDURE must have the storage class STATIC, BASED or CONTROLLED or must be DEFINED on STATIC. </name>
    <internalKey>IBM1863I</internalKey>
    <description>AUTOMATIC variables must be declared inside a PROCEDURE, and DEFINED variables declared outside a PROCEDURE must be defined on STATIC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1864I</key>
    <name>The function name built-in is not supported. </name>
    <internalKey>IBM1864I</internalKey>
    <description>Support for the indicated built-in function has been discontinued. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1865I</key>
    <name>The only BASED variables supported in data-directed i/o are those that have constant extents and that are implicitly qualified by simple variables. </name>
    <internalKey>IBM1865I</internalKey>
    <description>The variable implicitly qualifying the BASED variable must be a scalar that is not part of an array, structure or union, and it must be a POINTER with either the AUTOMATIC or STATIC storage attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1866I</key>
    <name>The keyword statement is not supported. </name>
    <internalKey>IBM1866I</internalKey>
    <description>Support for the indicated statement has been discontinued. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1867I</key>
    <name>The pseudovariable variable name is not supported. </name>
    <internalKey>IBM1867I</internalKey>
    <description>Support for the indicated pseudovariable has been discontinued. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1868I</key>
    <name>Invalid use of iSUB. </name>
    <internalKey>IBM1868I</internalKey>
    <description>iSUB references are permitted only in DEFINED clauses. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1869I</key>
    <name>ALLOCATE with attribute lists is not supported. </name>
    <internalKey>IBM1869I</internalKey>
    <description>For example, neither of the following are supported. allocate x(5); allocate y char(10); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1870I</key>
    <name>ON statement cannot specify both SYSTEM and an ON-unit. </name>
    <internalKey>IBM1870I</internalKey>
    <description>If the SYSTEM action is specified in an ON statement, an ON-unit may not be specified as well. on error system stop; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1871I</key>
    <name>The reference in the CONDITION condition must have type CONDITION. </name>
    <internalKey>IBM1871I</internalKey>
    <description>x in CONDITION(x) refers to a variable that does not have the type CONDITION. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1872I</key>
    <name>The reference in the condition-name condition must have type FILE. </name>
    <internalKey>IBM1872I</internalKey>
    <description>The reference in the named FILE condition does not have the type FILE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1873I</key>
    <name>Nesting of DO statements exceeds the maximum. </name>
    <internalKey>IBM1873I</internalKey>
    <description>DO statements can be nested only 50 deep. Simplify the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1874I</key>
    <name>Nesting of IF statements exceeds the maximum. </name>
    <internalKey>IBM1874I</internalKey>
    <description>IF statements can be nested only 50 deep. Simplify the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1875I</key>
    <name>Nesting of SELECT statements exceeds the maximum. </name>
    <internalKey>IBM1875I</internalKey>
    <description>SELECT statements can be nested only 50 deep. Simplify the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1876I</key>
    <name>Nesting of blocks exceeds the maximum. </name>
    <internalKey>IBM1876I</internalKey>
    <description>Blocks may be nested only 30 deep. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1878I</key>
    <name>The reference in the EVENT clause must have type EVENT. </name>
    <internalKey>IBM1878I</internalKey>
    <description>A reference of any other type is invalid and is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1879I</key>
    <name>The reference in the TASK clause must have type TASK. </name>
    <internalKey>IBM1879I</internalKey>
    <description>A reference of any other type is invalid and is invalid. 73 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1880I</key>
    <name>Reference must have FILE type. </name>
    <internalKey>IBM1880I</internalKey>
    <description>A file variable or constant is required. dcl x format variable; open file(x); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1881I</key>
    <name>The reference reference name is ambiguous. </name>
    <internalKey>IBM1881I</internalKey>
    <description>Enough qualification must be provided to make any reference unique. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1882I</key>
    <name>The ALLOCATE reference variable-name is not a level-1 BASED or CONTROLLED variable. </name>
    <internalKey>IBM1882I</internalKey>
    <description>References in ALLOCATE statements must be level-1 variable names, and those variables must have the BASED or CONTROLLED attributes. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1883I</key>
    <name>The ALLOCATE reference variable-name is not implicitly qualified and is invalid without a SET clause. </name>
    <internalKey>IBM1883I</internalKey>
    <description>Provide a SET clause in the ALLOCATE statement. dcl a based; allocate a; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1884I</key>
    <name>The reference variable-name in the GENERIC attribute list is not a scalar ENTRY reference. </name>
    <internalKey>IBM1884I</internalKey>
    <description>A reference of any other type is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1885I</key>
    <name>IN option reference must have AREA type. </name>
    <internalKey>IBM1885I</internalKey>
    <description>A reference of any other type is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1886I</key>
    <name>The REFER object name reference name is ambiguous. </name>
    <internalKey>IBM1886I</internalKey>
    <description>Provide enough qualification to make the name unique. dcl 1 a based, 2 b1, 3 c bit(8) aligned, 3 d char(10), 2 b2, 3 c bit(8) aligned, 3 d char(10), 2 e( n refer(c)) char(10); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1887I</key>
    <name>The REFER object reference name must be an element of the same structure where it is used, and must precede its first usage in that structure. </name>
    <internalKey>IBM1887I</internalKey>
    <description>The named REFER object cannot be declared in another structure or in the same structure, but after its first usage. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1888I</key>
    <name>The REFER object reference name must have computational type. </name>
    <internalKey>IBM1888I</internalKey>
    <description>It must be possible to convert the REFER object safely to and from REAL FIXED BIN(31,0). dcl 1 a based, 2 b, 3 c pointer, 3 d char(10), 2 e( n refer(c)) char(10); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1889I</key>
    <name>The REFER object reference name must be a scalar. </name>
    <internalKey>IBM1889I</internalKey>
    <description>The REFER object may not have any dimensions in its declaration and neither may any of its parents. dcl 1 a based, 2 b(8), 3 c fixed bin, 3 d char(10), 2 e( n refer(c)) char(10); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1890I</key>
    <name>The REFER object reference name must precede the first level-2 element containing a REFER. </name>
    <internalKey>IBM1890I</internalKey>
    <description>Reorder the elements in the declaration so that all REFER objects precede the first level-2 element containing a REFER. dcl 1 a based, 2 b fixed bin, 2 c char( n refer(b) ), 2 d fixed bin, 2 e char( n refer(d) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1891I</key>
    <name>REFER is not allowed on non-BASED variables. </name>
    <internalKey>IBM1891I</internalKey>
    <description>REFER can be used only in declarations of BASED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1892I</key>
    <name>The REFER object reference name must have constant length. </name>
    <internalKey>IBM1892I</internalKey>
    <description>If a REFER object is a string, it must have constant length. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1893I</key>
    <name>REFER is allowed only on members of structures and unions. </name>
    <internalKey>IBM1893I</internalKey>
    <description>REFER cannot be used only in declarations of scalars or arrays of scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1894I</key>
    <name>REINIT references must not be subscripted. </name>
    <internalKey>IBM1894I</internalKey>
    <description>In the statement REINIT x, x must not have any subscripts or arguments. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1895I</key>
    <name>Operations involving OPTIONS(language-name) routines are not supported if the DIRECTED option applies. </name>
    <internalKey>IBM1895I</internalKey>
    <description>If the DIRECTED(ASM) option is used, comparisons and assignments are not supported for ENTRYs declared with OPTIONS(ASM). Similarly, if the DIRECTED(COBOL) option is used, comparisons and assignments are not supported for ENTRYs declared with OPTIONS(COBOL). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1896I</key>
    <name>OPTIONS(language-name) is not supported for ENTRY VARIABLEs if the DIRECTED option applies. </name>
    <internalKey>IBM1896I</internalKey>
    <description>If the DIRECTED(ASM) option is used, ENTRY VARIABLES may not be declared with OPTIONS(ASM). Similarly, if the DIRECTED(COBOL) option is used, ENTRY VARIABLES may not be declared with OPTIONS(COBOL). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1897I</key>
    <name>Simple defining is supported only for scalars, for structures with constant extents matching those in the base variable, and for arrays of such scalars and structures as long as the array is not based</name>
    <internalKey>IBM1897I</internalKey>
    <description>If simple defining is not intended, specify POSITION(1) to force string defining. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1898I</key>
    <name>The base reference in the DEFINED attribute cannot be a built-in or type function. </name>
    <internalKey>IBM1898I</internalKey>
    <description>You can define a variable only another user variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1899I</key>
    <name>The base variable in the DEFINED attribute cannot be BASED, DEFINED or CONSTANT. </name>
    <internalKey>IBM1899I</internalKey>
    <description>Convert the DEFINED and base variables into a UNION. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1900I</key>
    <name>Extents for DEFINED bit structures must be constant. </name>
    <internalKey>IBM1900I</internalKey>
    <description>All bounds and string lengths for DEFINED structures and unions consisting of bit strings must be constant. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1901I</key>
    <name>POSITION attribute is invalid without the DEFINED attribute. </name>
    <internalKey>IBM1901I</internalKey>
    <description>The POSITION attribute has no meaning without DEFINED attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1902I</key>
    <name>The expression in the POSITION attribute must have computational type. </name>
    <internalKey>IBM1902I</internalKey>
    <description>The POSITION expression must have a numeric or string type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1903I</key>
    <name>The expression in the POSITION attribute for bit string-overlay defining must be an integer constant. </name>
    <internalKey>IBM1903I</internalKey>
    <description>The compiler must be able to evaluate the expression to an integer constant when it scans the POSITION attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1904I</key>
    <name>Variable following the free clause clause must be level-1 and either BASED or CONTROLLED. </name>
    <internalKey>IBM1904I</internalKey>
    <description>A variable that is either based or controlled should immediately follow the FREE keyword. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1905I</key>
    <name>IN or SET option option invalid after the CONTROLLED variable in the ALLOCATE or FREE clause clause. </name>
    <internalKey>IBM1905I</internalKey>
    <description>An invalid option immediately follows a controlled variable in an ALLOCATE or FREE statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1906I</key>
    <name>The reference qualifying an OFFSET attribute must be a scalar AREA reference. </name>
    <internalKey>IBM1906I</internalKey>
    <description>Using the specified AREA reference to qualify an OFFSET variable is invalid. The reference must be scalar. The following example will issue this message. 75 dcl a(10) area; dcl o offset(a); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1907I</key>
    <name>Extents for CONTROLLED variables cannot be specified using asterisks or REFER. </name>
    <internalKey>IBM1907I</internalKey>
    <description>The extent specified for the controlled variable is invalid. The following example will emit this message. dcl c(*) char(10) controlled; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1908I</key>
    <name>Extents for attribute variables cannot be specified using asterisks or REFER. </name>
    <internalKey>IBM1908I</internalKey>
    <description>Extents for AUTOMATIC and DEFINED variables must be specified by expressions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1909I</key>
    <name>The attribute attribute conflicts with the attribute attribute. </name>
    <internalKey>IBM1909I</internalKey>
    <description>The named attributes, for example PARAMETER and INITIAL, are mutually exclusive. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1910I</key>
    <name>The attributes given in the declaration for identifier conflict with its use as a parameter. </name>
    <internalKey>IBM1910I</internalKey>
    <description>Parameters can have no storage attributes other than CONTROLLED. Parameters also cannot have any of the attributes BUILTIN, CONDITION, CONSTANT, EXTERNAL, and GENERIC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1911I</key>
    <name>Repeated specifications of the unsubscripted statement label character are in error. </name>
    <internalKey>IBM1911I</internalKey>
    <description>All statement labels in any block must be unique. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1912I</key>
    <name>Indices specified for the LABEL character have already been specified. </name>
    <internalKey>IBM1912I</internalKey>
    <description>All statement labels in any block must be unique. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1913I</key>
    <name>ON-units may not be labeled. All such labels will be ignored. </name>
    <internalKey>IBM1913I</internalKey>
    <description>A BEGIN block or a statement associated with an ON clause may not have a label. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1914I</key>
    <name>GOTO target must be a LABEL reference. </name>
    <internalKey>IBM1914I</internalKey>
    <description>x in GOTO x must have type LABEL. x must not have type FORMAT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1915I</key>
    <name>GOTO target must be a scalar. </name>
    <internalKey>IBM1915I</internalKey>
    <description>x in GOTO x must not be an array. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1916I</key>
    <name>The procedure/entry proc-name has already been defined. </name>
    <internalKey>IBM1916I</internalKey>
    <description>Sister procedures must have different names. a: proc; b: proc; end; b: proc; end; end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1917I</key>
    <name>Program contains no valid source lines. </name>
    <internalKey>IBM1917I</internalKey>
    <description>The source contains either no statements or all statements that it contains are invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1918I</key>
    <name>All the names in the ORDINAL ordinal-name have been previously declared. </name>
    <internalKey>IBM1918I</internalKey>
    <description>None of the names in an ORDINAL should have been declared elsewhere. If they are, perhaps the ORDINAL definition has been accidentally repeated. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1919I</key>
    <name>The EXTERNAL name string is specified for the differing internal names name and name. </name>
    <internalKey>IBM1919I</internalKey>
    <description>Each EXTERNAL name must have only one INTERNAL name. So, for example, the following declares would be illegal since the external name Z is specified for two different internal names: X and Y. dcl X fixed bin(31) ext(’Z’); dcl Y fixed bin(31) ext(’Z’); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1920I</key>
    <name>FIXED BINARY constant contains too many digits. </name>
    <internalKey>IBM1920I</internalKey>
    <description>The maximum precision of FIXED BINARY constants is set by the FIXEDBIN suboption of the LIMITS compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1921I</key>
    <name>FIXED DECIMAL constant contains too many significant digits. </name>
    <internalKey>IBM1921I</internalKey>
    <description>The maximum precision of FIXED DECIMAL constants is set by the FIXEDDEC suboption of the LIMITS compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1922I</key>
    <name>Exponent in FLOAT BINARY constant contains more digits than the implementation maximum. </name>
    <internalKey>IBM1922I</internalKey>
    <description>The exponent in a FLOAT BINARY constant may contain no more than 5 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1923I</key>
    <name>Mantissa in FLOAT BINARY constant contains more significant digits than the implementation maximum. </name>
    <internalKey>IBM1923I</internalKey>
    <description>The mantissa in a FLOAT BINARY constant may contain no more than 64 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1924I</key>
    <name>Exponent in FLOAT DECIMAL constant contains more digits than the implementation maximum. </name>
    <internalKey>IBM1924I</internalKey>
    <description>The exponent in a FLOAT BINARY constant may contain no more than 4 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1925I</key>
    <name>Mantissa in FLOAT DECIMAL constant contains more significant digits than the implementation maximum. </name>
    <internalKey>IBM1925I</internalKey>
    <description>The mantissa in a FLOAT DECIMAL constant may contain no more than maximum number of digits allowed on the platform. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1926I</key>
    <name>Constants must not exceed 8192 bytes. </name>
    <internalKey>IBM1926I</internalKey>
    <description>The number of bytes used to represent a constant in your program must not exceed 8192. This limit holds even for bit strings where the internal representation will consume only one-eighth the number of bytes as the external representation does. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1927I</key>
    <name>SIZE condition raised by attempt to convert source-value to target-attributes </name>
    <internalKey>IBM1927I</internalKey>
    <description>The source value is not in the domain of the target. dcl x fixed bin(15); x = 172900; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1928I</key>
    <name>ERROR raised while building CEEUOPT from PLIXOPT. </name>
    <internalKey>IBM1928I</internalKey>
    <description>The ERROR condition was while the compiler was trying to build CEEUOPT from PLIXOPT. There may be an error in the LE APIs used by the compiler. Contact IBM service. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1929I</key>
    <name>Unable to open file file-name in routine proc-name(line-number). </name>
    <internalKey>IBM1929I</internalKey>
    <description>The compiler was unable to open the named temporary file used to communicate with the code generation module. Check the value of the TMP environment variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1930I</key>
    <name>Unable to write to file file-name . Disk may be full. </name>
    <internalKey>IBM1930I</internalKey>
    <description>The compiler was unable to write to a temporary file used to communicate with the code generation module. The disk to which the TMP environment variable points may be full. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1932I</key>
    <name>Unable to close file file-name in routine proc-name(line-number). </name>
    <internalKey>IBM1932I</internalKey>
    <description>The compiler was unable to close the named temporary file used to communicate with the code generation module. Check the value of the TMP environment variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1933I</key>
    <name>Unable to open temporary files because the path and filename are too long. </name>
    <internalKey>IBM1933I</internalKey>
    <description>Shorten the name of the source file or the directory specified by the TMP variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1934I</key>
    <name>If a parameter is a structure with nonconstant extents, only matching structures are supported as arguments. </name>
    <internalKey>IBM1934I</internalKey>
    <description>Assign the structure to a temporary and pass the temporary, or omit the parameter description in the entry declaration. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1935I</key>
    <name>Structure expressions as arguments are not supported for undescribed parameters. </name>
    <internalKey>IBM1935I</internalKey>
    <description>Assign the structure to a temporary and pass the temporary, or describe the parameter in the entry declaration. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1936I</key>
    <name>Invocation of compiler backend ended abnormally. </name>
    <internalKey>IBM1936I</internalKey>
    <description>The back end of the compiler either could not be found or else it detected an error from which it could not recover. The latter problem can sometimes occur, on Intel, if your disk is short of free space and, on the z/Series, if your job's region size is not large enough. Otherwise, report the problem to IBM. 77 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1937I</key>
    <name>Extents for parameters must be asterisks or restricted expressions with computational type. </name>
    <internalKey>IBM1937I</internalKey>
    <description>For parameters, each array bound, string length and AREA size must be specified either with an asterisk or with a restricted expression that has computational type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1938I</key>
    <name>Message file file name not found. </name>
    <internalKey>IBM1938I</internalKey>
    <description>The message must be in the current directory or in one of the directories specified in the DPATH environment variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1939I</key>
    <name>Exponentiation operands must have computational type. </name>
    <internalKey>IBM1939I</internalKey>
    <description>The operands in an exponentiation must have numeric or string type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1940I</key>
    <name>note </name>
    <internalKey>IBM1940I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 12. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1941I</key>
    <name>note </name>
    <internalKey>IBM1941I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 16. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1942I</key>
    <name>The scale factor specified in BUILTIN name built-in must be a restricted expression with integer type. </name>
    <internalKey>IBM1942I</internalKey>
    <description>This applies to all the precision-handling built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1943I</key>
    <name>The number of error messages allowed by the FLAG option has been exceeded. </name>
    <internalKey>IBM1943I</internalKey>
    <description>Compilation will terminate when the number of messages has exceeded the limit set in the FLAG compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1944I</key>
    <name>The precision specified in BUILTIN name built-in must be a restricted expression with integer type. </name>
    <internalKey>IBM1944I</internalKey>
    <description>This applies to all the precision-handling built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1945I</key>
    <name>Extents for BASED variable may not contain asterisks. </name>
    <internalKey>IBM1945I</internalKey>
    <description>Extents in BASED variables must be either constants or specified with the REFER option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1946I</key>
    <name>Reference must be an AREA variable. </name>
    <internalKey>IBM1946I</internalKey>
    <description>The specified reference is invalid. An AREA variable is needed. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1947I</key>
    <name>The reference to the GENERIC variable GENERIC variable name cannot be resolved. </name>
    <internalKey>IBM1947I</internalKey>
    <description>The argument list in a GENERIC reference must match one of the generic descriptors in one of that GENERIC's WHEN clauses. If an OTHERWISE clause was specified, the argument list must have the same number of elements as the OTHERWISE entry reference. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1948I</key>
    <name>condition-name condition with ONCODE=oncode-value raised while evaluating restricted expression. </name>
    <internalKey>IBM1948I</internalKey>
    <description>Compile-time evaluation of a restricted expression raised a condition. display( 1/0 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1949I</key>
    <name>Parameter name identifier appears more than once in parameter list. </name>
    <internalKey>IBM1949I</internalKey>
    <description>Each identifier in a parameter list must be unique. a: proc( b, c, b ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1951I</key>
    <name>storage class variables must be named. </name>
    <internalKey>IBM1951I</internalKey>
    <description>Variables with the CONTROLLED attribute must be named, and a variable with the EXTERNAL attribute may not have an * instead of a name unless a name is given with the EXTERNAL attribute itself. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1952I</key>
    <name>INITIAL CALL cannot be used to initialize STATIC data. </name>
    <internalKey>IBM1952I</internalKey>
    <description>An INITIAL CALL must be evaluated at run-time; it can be used to initialize only non-STATIC data. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1953I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. </name>
    <internalKey>IBM1953I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1954I</key>
    <name>The base reference in the DEFINED attribute must be CONNECTED. </name>
    <internalKey>IBM1954I</internalKey>
    <description>Variables cannot be DEFINED on NONCONNECTED references. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1955I</key>
    <name>Repeated declarations of the EXTERNAL attribute variable name are not supported. </name>
    <internalKey>IBM1955I</internalKey>
    <description>EXTERNAL FILE constants and CONDITIONs may be declared only once in a compilation unit. Remove all but the outermost declare. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1956I</key>
    <name>ITERATE is valid only for iterative DO-groups. </name>
    <internalKey>IBM1956I</internalKey>
    <description>ITERATE is not valid inside type-I do groups. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1957I</key>
    <name>The WAIT event number specification must be computational. </name>
    <internalKey>IBM1957I</internalKey>
    <description>The expression representing the number of items to wait for in a WAIT statement is invalid. The expression must be of computational type. The following example will issue this message. dcl e event; dcl p pointer: wait (e) (p); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1958I</key>
    <name>References in the WAIT statement must be of type EVENT. </name>
    <internalKey>IBM1958I</internalKey>
    <description>The event reference in the WAIT statement is invalid. It must be of type EVENT. The following example will issue this message. dcl e entry; wait (e); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1959I</key>
    <name>Invalid aggregate expression specified in WAIT statement. </name>
    <internalKey>IBM1959I</internalKey>
    <description>References in WAIT statements can be scalars. The only valid aggregate reference is a simple array of events. Structures, unions, and arrays of structures or unions would be flagged as errors. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1960I</key>
    <name>type type type type name is not defined. </name>
    <internalKey>IBM1960I</internalKey>
    <description>If ORDINAL x is used in a declaration, x must be a defined ORDINAL type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1961I</key>
    <name>INITIAL values for type type type type name must be in increasing order. </name>
    <internalKey>IBM1961I</internalKey>
    <description>Any values specified in INITIAL clauses in an ORDINAL definition must be in strictly increasing order. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1962I</key>
    <name>INITIAL values for type type type type name must be less than 2G. </name>
    <internalKey>IBM1962I</internalKey>
    <description>ORDINAL values must fit in the range of a FIXED BIN(31) variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1963I</key>
    <name>BUILTIN name argument must have ORDINAL type. </name>
    <internalKey>IBM1963I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not an ORDINAL. This message applies, for example, to the ORDINALNAME, ORDINALPRED and ORDINALSUCC built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1964I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. </name>
    <internalKey>IBM1964I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1965I</key>
    <name>There is more than one element named reference name in the class structure name. </name>
    <internalKey>IBM1965I</internalKey>
    <description>All references must be unambiguous. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1966I</key>
    <name>There is no element named reference name in the class structure name. </name>
    <internalKey>IBM1966I</internalKey>
    <description>HANDLE qualified references must be explicitly declared. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1967I</key>
    <name>The ENTRY variable-name may not be used as a handle since it does not have the RETURNS attribute. </name>
    <internalKey>IBM1967I</internalKey>
    <description>Functions, but not subprocedures, can be used as handles (and then only if they return a handle). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1968I</key>
    <name>The ENTRY variable-name may not be used as a handle. </name>
    <internalKey>IBM1968I</internalKey>
    <description>x(...)=&gt;y is invalid unless x returns a HANDLE. 79 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1969I</key>
    <name>The variable variable-name is used as a handle, but it is not a scalar. </name>
    <internalKey>IBM1969I</internalKey>
    <description>Only scalars can be used as handles. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1970I</key>
    <name>BUILTIN name built-in may not be used as a handle. </name>
    <internalKey>IBM1970I</internalKey>
    <description>The named built-in function cannot be used as a handle. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1971I</key>
    <name>The GENERIC variable variable-name may not be used as a handle. </name>
    <internalKey>IBM1971I</internalKey>
    <description>GENERIC references may not be used as handles. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1972I</key>
    <name>variable-name may not be used as a handle. </name>
    <internalKey>IBM1972I</internalKey>
    <description>x=&gt;y is invalid unless x has the HANDLE attribute </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1976I</key>
    <name>DBCS characters are allowed only in G and M constants. </name>
    <internalKey>IBM1976I</internalKey>
    <description>Hex strings (strings ending in one of the suffixes X, BX, B4, GX or XN), bit strings, (strings ending in the suffix B), and character strings not ending in the suffix M must contain only SBCS characters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1977I</key>
    <name>SBCS characters are not allowed in G constants. </name>
    <internalKey>IBM1977I</internalKey>
    <description>Mixed SBCS and DBCS is allowed only in M constants. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1978I</key>
    <name>Invalid use of SBCS encoded as DBCS. </name>
    <internalKey>IBM1978I</internalKey>
    <description>Outside of comments, SBCS can be encoded as DBCS only as part of an identifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1981I</key>
    <name>BUILTIN function may not be used outside a procedure. </name>
    <internalKey>IBM1981I</internalKey>
    <description>The named built-in function may be used only inside procedures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1984I</key>
    <name>File filename could not be opened. </name>
    <internalKey>IBM1984I</internalKey>
    <description>The named file could not be opened. Make sure that the file is named correctly, that it exists, that it has the proper attributes and that you have the needed permissions to access it. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1985I</key>
    <name>File filename could not be opened. C-library-message </name>
    <internalKey>IBM1985I</internalKey>
    <description>The named file could not be opened. Make sure that the file is named correctly, that it exists, that it has the proper attributes and that you have the needed permissions to access it. The accompanying C library message may help identify the problem. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1986I</key>
    <name>A system or user abend has occurred. </name>
    <internalKey>IBM1986I</internalKey>
    <description>This error can occur, for example. when writing the MDECK to a SYSPUNCH dataset that is too small or when writing to one of the other compiler output datasets when they are too small. It would probably be useful to examine the JES log. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1987I</key>
    <name>File filename could not be opened because too many files have been opened. </name>
    <internalKey>IBM1987I</internalKey>
    <description>The maximum number of open files has been reached. On some platforms, there is a system limit on the number of open files, but the compiler also has a limit of 2047 include files. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1988I</key>
    <name>File filename could not be opened due to an access violation. </name>
    <internalKey>IBM1988I</internalKey>
    <description>Either the file is in use or you tried to open a file for which you do not have sufficient privilege. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1989I</key>
    <name>File name or extension for filename is too long. </name>
    <internalKey>IBM1989I</internalKey>
    <description>The length of the file name or extension is greater than the maximum allowed. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1990I</key>
    <name>File name filename has invalid format. </name>
    <internalKey>IBM1990I</internalKey>
    <description>Apart from z/OS UNIX, file names should not contain quotes. Under z/OS UNIX, if the file name does contain quotes, it should specify a PDS member. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1991I</key>
    <name>The load of the SQL preprocessor failed with ONCODE= oncode. DB2/2 must be properly installed before the SQL preprocessor can be loaded. </name>
    <internalKey>IBM1991I</internalKey>
    <description>The compiler attempted to load the SQL preprocessor but was unable to do so. Check that DB2/2 is properly installed. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1992I</key>
    <name>A file name must be specified. </name>
    <internalKey>IBM1992I</internalKey>
    <description>The command syntax is: PLI {d:}{path}filename{.ext} {( options} </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1993I</key>
    <name>Compilation terminated by ATTENTION condition. </name>
    <internalKey>IBM1993I</internalKey>
    <description>If you hit CTL-BRK during the compilation, the compilation will stop. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1994I</key>
    <name>Internal compiler error: storage header has been overwritten </name>
    <internalKey>IBM1994I</internalKey>
    <description>This message indicates that there is an error in the front end of the compiler. Please report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1995I</key>
    <name>Internal compiler error: storage tail has been overwritten. </name>
    <internalKey>IBM1995I</internalKey>
    <description>This message indicates that there is an error in the front end of the compiler. Please report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1996I</key>
    <name>Internal compiler error: free amount free request size does not match allocated size allocated size. </name>
    <internalKey>IBM1996I</internalKey>
    <description>This message indicates that there is an error in the front end of the compiler. Please report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1997I</key>
    <name>Internal compiler error: no WHEN clause satisfied within module name </name>
    <internalKey>IBM1997I</internalKey>
    <description>This message indicates that there is an error in the front end of the compiler. Please report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1998I</key>
    <name>Internal compiler error: protection exception in module name </name>
    <internalKey>IBM1998I</internalKey>
    <description>This message indicates that there is an error in the front end of the compiler. Please report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM1999I</key>
    <name>note </name>
    <internalKey>IBM1999I</internalKey>
    <description>This message indicates that there is an error in the back end of the compiler. Please report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2000I</key>
    <name>Internal compiler error: assertion failed on line source line in procedure name in package name </name>
    <internalKey>IBM2000I</internalKey>
    <description>This message indicates that there is an error in the front end of the compiler. Report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2001I</key>
    <name>A LICENSE REQUEST WAS DENIED FOR PL/I, PID 5655-B22. THE REQUEST ENDED WITH STATUS CODE STATUS CODE AND RETURN CODE RETURN CODE. THE COMPILATION WILL BE TERMINATED. </name>
    <internalKey>IBM2001I</internalKey>
    <description>IBM License Manager is installed on your system, but the request to verify that you have a license to use the PL/I compiler has failed. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2002I</key>
    <name>Close of file filename failed. There may be a space problem. </name>
    <internalKey>IBM2002I</internalKey>
    <description>An error has occurred while attempting to close a file. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2003I</key>
    <name>Write to file filename failed. There may be a space problem. </name>
    <internalKey>IBM2003I</internalKey>
    <description>An error has occurred while attempting to write to a file. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2004I</key>
    <name>ATTACH reference must be declared with either a null argument list or with an argument list specifying only one argument. </name>
    <internalKey>IBM2004I</internalKey>
    <description>If the ATTACH reference is declared without an argument list, change the declare to specify a null argument list by adding a pair of parentheses. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2005I</key>
    <name>ATTACH reference must be an ENTRY reference. </name>
    <internalKey>IBM2005I</internalKey>
    <description>GENERIC references and built-in subroutines may not be attached. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2006I</key>
    <name>ATTACH reference cannot be a function reference. </name>
    <internalKey>IBM2006I</internalKey>
    <description>An ATTACH reference must not have the RETURNS attribute, even if the value returned is an ENTRY. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2007I</key>
    <name>ATTACH reference must use LINKAGE(SYSTEM). </name>
    <internalKey>IBM2007I</internalKey>
    <description>Unless the default linkage is overridden, OPTIONS(LINKAGE(SYSTEM)) must be specified on the declare for the ATTACH reference. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2008I</key>
    <name>ATTACH reference cannot be FETCHABLE. </name>
    <internalKey>IBM2008I</internalKey>
    <description>An ATTACH reference may not be used in a FETCH or RELEASE statement. 81 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2009I</key>
    <name>ATTACH reference cannot be a nested procedure. </name>
    <internalKey>IBM2009I</internalKey>
    <description>An ATTACH reference must be a level-1 procedure, although it does need to be external. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2010I</key>
    <name>ATTACH reference, if an ENTRY variable, must be a LIMITED ENTRY. </name>
    <internalKey>IBM2010I</internalKey>
    <description>Specify the LIMITED attribute in the declare for the ENTRY VARIABLE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2011I</key>
    <name>ATTACH reference, if it has an argument, must declare that argument as POINTER BYVALUE. </name>
    <internalKey>IBM2011I</internalKey>
    <description>No other argument types are support in ATTACH statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2012I</key>
    <name>The attribute keyword attribute is invalid in an ALIAS descriptor. </name>
    <internalKey>IBM2012I</internalKey>
    <description>Like RETURNS descriptors, the attributes STRUCTURE, UNION and DIMENSION are not permitted. Hence, the following are invalid: define alias array (10) fixed bin; define alias point 1, 2 fixed bin, 2 fixed bin; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2013I</key>
    <name>Only one description is allowed in an ALIAS definition. </name>
    <internalKey>IBM2013I</internalKey>
    <description>The syntax allows the name in an alias definition to be followed by a description list, but that description list must consist of exactly one description. The following is invalid: define alias x fixed bin, float bin; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2014I</key>
    <name>Extents in type descriptors must be constant. </name>
    <internalKey>IBM2014I</internalKey>
    <description>In ALIAS and STRUCTURE descriptors, each string length and AREA size must be specified with a restricted expression. Like RETURNS descriptors, asterisks and non-constant expressions are not permitted. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2015I</key>
    <name>VALUE attribute conflicts with data type. </name>
    <internalKey>IBM2015I</internalKey>
    <description>The VALUE attribute is allowed only with computational data types as well as pointer, offset, handle and ordinal. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2016I</key>
    <name>The VALUE attribute is not allowed with typed structures. </name>
    <internalKey>IBM2016I</internalKey>
    <description>The VALUE attribute is not allowed with typed structures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2017I</key>
    <name>INITIAL TO is valid only for NATIVE POINTER. </name>
    <internalKey>IBM2017I</internalKey>
    <description>INITIAL TO is not valid for NONNATIVE POINTERs. It is also invalid for non-POINTERs since they cannot be assigned addresses. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2018I</key>
    <name>INITIAL TO is supported only for STATIC variables. </name>
    <internalKey>IBM2018I</internalKey>
    <description>INITIAL TO is not supported for variables belonging to any storage class other than STATIC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2019I</key>
    <name>Unsupported LINKAGE used with the LIST attribute. </name>
    <internalKey>IBM2019I</internalKey>
    <description>Specify OPTIONS(LINKAGE(OPTLINK)) or, on WINDOWS, OPTIONS(LINKAGE(CDECL)) on the PROCEDURE or ENTRY having a parameter with the LIST attribute and then recompile. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2020I</key>
    <name>There is more than one element named reference name in the typed structure structure name. </name>
    <internalKey>IBM2020I</internalKey>
    <description>All references must be unambiguous. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2021I</key>
    <name>There is no element named reference name in the structure structure name. </name>
    <internalKey>IBM2021I</internalKey>
    <description>All structure references must be explicitly declared. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2022I</key>
    <name>The ENTRY variable-name may not be used as a typed structure qualifier since it does not have the RETURNS attribute. </name>
    <internalKey>IBM2022I</internalKey>
    <description>Functions, but not subprocedures, can be used as typed structure qualifiers (and then only if they return a typed structure). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2023I</key>
    <name>The ENTRY variable-name may not be used as a typed structure qualifier. </name>
    <internalKey>IBM2023I</internalKey>
    <description>x(...)=&gt;y is invalid unless x returns a typed structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2024I</key>
    <name>The array variable variable-name may be used as a typed structure qualifier only if it is completely subscripted before its dot qualification. </name>
    <internalKey>IBM2024I</internalKey>
    <description>For instance, if x is an array of structure t with member m, x.m(2) is invalid. However, x(2).m is valid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2025I</key>
    <name>BUILTIN name built-in may not be used as a typed structure qualifier. </name>
    <internalKey>IBM2025I</internalKey>
    <description>The named built-in function cannot be used as a typed structure qualifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2026I</key>
    <name>The GENERIC variable variable-name may not be used as a typed structure qualifier. </name>
    <internalKey>IBM2026I</internalKey>
    <description>GENERIC references may not be used as typed structure qualifiers. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2027I</key>
    <name>variable-name may not be used as a structure qualifier. </name>
    <internalKey>IBM2027I</internalKey>
    <description>x.y is invalid unless x is a structure, a union or a function returning a typed structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2028I</key>
    <name>TYPEs must be defined before their use. </name>
    <internalKey>IBM2028I</internalKey>
    <description>The DEFINE STRUCTURE or DEFINE ALIAS statement for a type x must precede any of use of x as attribute type. The following two statements should be in the opposite order. dcl x type point; define structure 1 point 2 x fixed bin(31), 2 y fixed bin(31); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2029I</key>
    <name>DEFINE STRUCTURE must specify a structure or union type. </name>
    <internalKey>IBM2029I</internalKey>
    <description>A DEFINE STRUCTURE statement must specify a structure or union type with level numbers. define structure int fixed bin; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2030I</key>
    <name>INITIAL attribute is invalid in structure definitions. </name>
    <internalKey>IBM2030I</internalKey>
    <description>Defined structure types must be initialized via assignments. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2031I</key>
    <name>Storage attributes are invalid in structure definition. </name>
    <internalKey>IBM2031I</internalKey>
    <description>Storage attributes, such as AUTOMATIC and BYADDR, must be specified with variables declared with structure type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2032I</key>
    <name>DEFINE STRUCTURE may not specify an array of structures. </name>
    <internalKey>IBM2032I</internalKey>
    <description>The level 1 name in a structure definition may not have the DIMENSION attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2033I</key>
    <name>Only one description is allowed in a structure definition. </name>
    <internalKey>IBM2033I</internalKey>
    <description>The syntax allows the name in a structure definition to be followed by a description list, but that description list must consist of exactly one structure description. The following is invalid: define structure 1 point 2 x fixed bin(31), 2 y fixed bin(31), 1 rectangle 2 upper_left type point, 2 lower_right type point; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2034I</key>
    <name>The argument to the type function type function must be an ordinal type name. </name>
    <internalKey>IBM2034I</internalKey>
    <description>The argument to the type functions FIRST and LAST must be a type name, and that type must be an ordinal type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2035I</key>
    <name>The argument to the type function type function must be a structure type name. </name>
    <internalKey>IBM2035I</internalKey>
    <description>The argument to the type function NEW must be a type name, and that type must be a structure type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2036I</key>
    <name>The second argument to the type function type function must have locator type. </name>
    <internalKey>IBM2036I</internalKey>
    <description>The second argument to the BIND type function must be a pointer or offset value that is to be converted to a handle to the structure type named as the first argument. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2037I</key>
    <name>The first argument to the type function type function must be a structure type name. </name>
    <internalKey>IBM2037I</internalKey>
    <description>The first argument to the type functions BIND must be a type name, and that type must be a structure type. 83 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2038I</key>
    <name>BUILTIN name argument must have HANDLE type. </name>
    <internalKey>IBM2038I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not a HANDLE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2039I</key>
    <name>Argument to variable name pseudovariable must be a HANDLE. </name>
    <internalKey>IBM2039I</internalKey>
    <description>The TYPE pseudovariable can be applied only to HANDLEs. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2040I</key>
    <name>The argument to the type function type function must be a defined type. </name>
    <internalKey>IBM2040I</internalKey>
    <description>The first argument to the type function SIZE must be the name of a defined type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2041I</key>
    <name>The first argument to the type function type function must be a defined type. </name>
    <internalKey>IBM2041I</internalKey>
    <description>The first argument to the type function CAST must be the name of a defined type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2042I</key>
    <name>The second argument to the type function type function must be a scalar. </name>
    <internalKey>IBM2042I</internalKey>
    <description>The second argument to the type function CAST must be a scalar. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2043I</key>
    <name>The second argument to the type function type function must have the same size as the first argument. </name>
    <internalKey>IBM2043I</internalKey>
    <description>The second argument to the type function CAST must have the same size as the size of the type that is the first argument. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2044I</key>
    <name>The get storage function to BUILTIN name must be a LIMITED ENTRY with LINKAGE(OPTLINK) and an appropriate entry description list. </name>
    <internalKey>IBM2044I</internalKey>
    <description>The function should be declared as dcl get entry( pointer byvalue, fixed bin(31) byaddr, fixed bin(31) byaddr ) returns( pointer ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2045I</key>
    <name>The free storage function to BUILTIN name must be a LIMITED ENTRY with LINKAGE(OPTLINK) and an appropriate entry description list. </name>
    <internalKey>IBM2045I</internalKey>
    <description>The function should be declared as dcl free entry( pointer byvalue, pointer byvalue, fixed bin(31) byvalue ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2046I</key>
    <name>OPTIONS(NODESCRIPTOR) is required if the last parameter to an ENTRY or PROC has the LIST attribute. </name>
    <internalKey>IBM2046I</internalKey>
    <description>If an entry or procedure has a variable number of arguments in imitation of C, i.e. if its last parameter has the LIST attribute, then OPTIONS(NODESCRIPTOR) must be specified (and valid). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2047I</key>
    <name>The VARGLIST built-in function may be used only inside procedures whose last parameter had the LIST attribute. </name>
    <internalKey>IBM2047I</internalKey>
    <description>The VARGLIST built-in function obtains the address of the variable argument list passed to procedures whose last parameter had the LIST attribute. It may not be used in subprocedures of such routines or in procedures having either no parameters or having no parameter declared with the LIST attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2048I</key>
    <name>The LIST attribute may be specified only on non-nested procedures, external entry constants, and limited entry variables. </name>
    <internalKey>IBM2048I</internalKey>
    <description>The LIST attribute causes a variable argument list to be built, and such argument lists are permitted neither with nested procedures nor with entry variables declared without the LIMITED attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2049I</key>
    <name>The LIST attribute may be specified only on the last element of an entry description list. </name>
    <internalKey>IBM2049I</internalKey>
    <description>The LIST attribute indicates that zero or more parameters may be specified after it, but those parameters may not be described. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2050I</key>
    <name>Descriptors are supported for Fortran only for scalar character strings. </name>
    <internalKey>IBM2050I</internalKey>
    <description>If OPTIONS( FORTRAN DESCRIPTOR ) applies, all parameters other than character strings must have constant extents. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2051I</key>
    <name>Descriptors are not supported for Fortran for routines defined by or containing ENTRY statements. </name>
    <internalKey>IBM2051I</internalKey>
    <description>If OPTIONS( FORTRAN DESCRIPTOR ) applies to an ENTRY statement or to a procedure containing an ENTRY statement, all parameters must have constant extents. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2052I</key>
    <name>A function defined by a PROCEDURE containing ENTRY statements must return aggregate values BYADDR. </name>
    <internalKey>IBM2052I</internalKey>
    <description>Either BYADDR must be specified in the RETURNS option of the PROCEDURE statement, or the RETURNS(BYADDR) suboption of the DEFAULT statement must be in effect. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2053I</key>
    <name>A function defined by an ENTRY statement must return aggregate values BYADDR. </name>
    <internalKey>IBM2053I</internalKey>
    <description>Either BYADDR must be specified in the RETURNS option of the ENTRY statement, or the RETURNS(BYADDR) suboption of the DEFAULT statement must be in effect. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2054I</key>
    <name>A PROCEDURE containing ENTRY statements must receive all non-pointer parameters BYADDR. </name>
    <internalKey>IBM2054I</internalKey>
    <description>Either BYADDR must be specified in the declares for the parameters, or the BYADDR suboption of the DEFAULT statement must be in effect. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2055I</key>
    <name>An ENTRY statement must receive all parameters BYADDR. </name>
    <internalKey>IBM2055I</internalKey>
    <description>Either BYADDR must be specified in the declares for the parameters, or the BYADDR suboption of the DEFAULT statement must be in effect. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2056I</key>
    <name>ENTRY statement is not allowed in DO loops. </name>
    <internalKey>IBM2056I</internalKey>
    <description>ENTRY statements are allowed in non-iterative DO groups, but not in iterative DO loops. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2057I</key>
    <name>RETURN statement is invalid inside a BEGIN in a PROCEDURE that contains ENTRY statements. </name>
    <internalKey>IBM2057I</internalKey>
    <description>A RETURN statement is valid inside a BEGIN block only if the PROCEDURE enclosing that BEGIN block contains no ENTRY statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2058I</key>
    <name>In a PROCEDURE without the RETURNS option, any ENTRY statement must use BYADDR for its RETURNS value. </name>
    <internalKey>IBM2058I</internalKey>
    <description>Either BYADDR must be specified in the RETURNS option of the ENTRY statement, or the RETURNS(BYADDR) suboption of the DEFAULT statement must be in effect. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2059I</key>
    <name>OPTIONS(FORTRAN) is invalid if any parameters are UNALIGNED BIT. </name>
    <internalKey>IBM2059I</internalKey>
    <description>Only ALIGNED BIT strings with constant length are valid with OPTIONS(FORTRAN). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2060I</key>
    <name>Attributes may not be specified in ALLOCATEs of BASED variables. </name>
    <internalKey>IBM2060I</internalKey>
    <description>Attributes may be specified only in ALLOCATEs of CONTROLLED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2061I</key>
    <name>Attributes specified for variable-name in ALLOCATE statement do not match those in its declaration. </name>
    <internalKey>IBM2061I</internalKey>
    <description>An attribute, such as CHARACTER, may be specified in an ALLOCATE statement only if it is also specified in the declaration of the variable to be allocated. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2062I</key>
    <name>Structuring specified in ALLOCATE of variable-name does not match that in its declaration. </name>
    <internalKey>IBM2062I</internalKey>
    <description>In an ALLOCATE statement for a structure, all the levels specified in its declaration must be specified, and no new levels may be specified. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2063I</key>
    <name>Specification of extent for variable-name in ALLOCATE statement is invalid since it was declared with a constant extent. </name>
    <internalKey>IBM2063I</internalKey>
    <description>An attribute, such as CHARACTER, may be specified in an ALLOCATE statement only if it is also specified in the declaration of the variable to be allocated with either an asterisk or a non-constant expression. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2064I</key>
    <name>The extent specified for the lower bound for dimension dimension-value of variable-name in ALLOCATE statement is invalid since that variable was declared with a different constant extent. </name>
    <internalKey>IBM2064I</internalKey>
    <description>If a bound for a CONTROLLED variable is declared as a constant, then it must be specified as the same constant value in any ALLOCATE statement for that variable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2065I</key>
    <name>The extent specified for the upper bound for dimension dimension-value of variable-name in ALLOCATE statement is invalid since that variable was declared with a different constant extent. </name>
    <internalKey>IBM2065I</internalKey>
    <description>If a bound for a CONTROLLED variable is declared as a constant, then it must be specified as the same constant value in any ALLOCATE statement for that variable. 85 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2075I</key>
    <name>ENTRY types and arguments in type function must be LIMITED. </name>
    <internalKey>IBM2075I</internalKey>
    <description>A ENTRY type or argument used with the type function CAST must have the attribute LIMITED. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2076I</key>
    <name>FLOAT types and arguments in type function must be NATIVE REAL. </name>
    <internalKey>IBM2076I</internalKey>
    <description>A FLOAT type or argument used with the type function CAST must have the attributes NATIVE REAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2077I</key>
    <name>FIXED BIN types and arguments in type function must be REAL with scale factor zero. </name>
    <internalKey>IBM2077I</internalKey>
    <description>A FIXED BIN type or argument used with the type function CAST must have the attributes REAL PRECISION(p,0). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2078I</key>
    <name>Types with the attributes attributes are not supported as the target of the type function function. </name>
    <internalKey>IBM2078I</internalKey>
    <description>The first argument to the type function CAST must be a type with one of the following sets of attributes: REAL FIXED BIN(p,0) or NATIVE REAL FLOAT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2079I</key>
    <name>Arguments with the attributes attributes are not supported as the source in the type function function. </name>
    <internalKey>IBM2079I</internalKey>
    <description>The second argument to the type function CAST must have one of the following sets of attributes: REAL FIXED BIN(p,0) or NATIVE REAL FLOAT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2080I</key>
    <name>DATE pattern is invalid. </name>
    <internalKey>IBM2080I</internalKey>
    <description>See the Language Reference Manual for a list of the supported DATE patterns. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2081I</key>
    <name>DATE attribute is valid only with NONVARYING CHARACTER, FIXED DECIMAL and arithmetic PICTURE. </name>
    <internalKey>IBM2081I</internalKey>
    <description>The DATE attribute cannot be used on any other than the named types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2082I</key>
    <name>DATE attribute conflicts with non-zero scale factor. </name>
    <internalKey>IBM2082I</internalKey>
    <description>The DATE attribute can be used on a numeric only if it has a scale factor of zero. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2083I</key>
    <name>DATE attribute conflicts with COMPLEX attribute. </name>
    <internalKey>IBM2083I</internalKey>
    <description>The DATE attribute can be used on a numeric only if it is REAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2084I</key>
    <name>DATE attribute conflicts with PICTURE string containing characters other than 9. </name>
    <internalKey>IBM2084I</internalKey>
    <description>The DATE attribute can be used on a PICTURE only if the PICTURE consists entirely of 9's. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2085I</key>
    <name>Length of DATE pattern and base precision do not match. </name>
    <internalKey>IBM2085I</internalKey>
    <description>The DATE attribute can be used on a numeric only if its precision equals the length of the DATE pattern. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2086I</key>
    <name>Length of DATE pattern and base length do not match. </name>
    <internalKey>IBM2086I</internalKey>
    <description>The DATE attribute can be used on a string only if its length equals the length of the DATE pattern. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2087I</key>
    <name>DATE attribute conflicts with adjustable length. </name>
    <internalKey>IBM2087I</internalKey>
    <description>The DATE attribute can be used on a string only if the string is declared with a constant length. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2088I</key>
    <name>Response file is too large. Excess will be ignored. </name>
    <internalKey>IBM2088I</internalKey>
    <description>The options string built from the response file must be less than 32767 characters long. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2089I</key>
    <name>Line in response file is longer than 100 characters. That line and rest of file will be ignored. </name>
    <internalKey>IBM2089I</internalKey>
    <description>All lines in any response file must contain no more than 100 characters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2090I</key>
    <name>The keyword statement cannot be used under SYSTEM(CICS). </name>
    <internalKey>IBM2090I</internalKey>
    <description>The named statement cannot be used under CICS. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2091I</key>
    <name>DISPLAY with REPLY cannot be used under SYSTEM(CICS). </name>
    <internalKey>IBM2091I</internalKey>
    <description>DISPLAY with REPLY cannot be used under CICS. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2092I</key>
    <name>The BUILTIN name built-in function cannot be used under SYSTEM(CICS). </name>
    <internalKey>IBM2092I</internalKey>
    <description>The named built-in function cannot be used under CICS. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2093I</key>
    <name>The keyword statement cannot be used under SYSTEM(CICS) except with SYSPRINT. </name>
    <internalKey>IBM2093I</internalKey>
    <description>The named I/O statement cannot be used under CICS unless the file used in the statement is SYSPRINT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2094I</key>
    <name>Source in CAST to FLOAT must be FLOAT, FIXED or ORDINAL. </name>
    <internalKey>IBM2094I</internalKey>
    <description>The source in a CAST to a FLOAT must be FLOAT, FIXED or ORDINAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2095I</key>
    <name>Target in CAST from FLOAT must be FLOAT, FIXED BIN or ORDINAL. </name>
    <internalKey>IBM2095I</internalKey>
    <description>The target in a CAST from a FLOAT must be FLOAT, FIXED BIN or ORDINAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2096I</key>
    <name>Target in CAST from FIXED DEC must be FLOAT, FIXED BIN or ORDINAL. </name>
    <internalKey>IBM2096I</internalKey>
    <description>The target in a CAST from a FIXED DEC must be FLOAT, FIXED BIN or ORDINAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2097I</key>
    <name>FIXED DEC types and arguments in type function must be REAL with non-negative scale factor. </name>
    <internalKey>IBM2097I</internalKey>
    <description>A FIXED DEC type or argument used with the type function CAST must have the attributes REAL PRECISION(p,q) with p &gt;= q and q &gt;= 0. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2098I</key>
    <name>Source in CAST to FIXED DEC must be FLOAT, FIXED or ORDINAL. </name>
    <internalKey>IBM2098I</internalKey>
    <description>The source in a CAST to a FIXED DEC must be FLOAT, FIXED or ORDINAL. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2099I</key>
    <name>CASEX strings must have the same length. </name>
    <internalKey>IBM2099I</internalKey>
    <description>The two strings in the CASEX option must have the same length. The second argument is the uppercase value of the first. If a character in the first string does not have an uppercase value, use the character itself as the uppercase value. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2100I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. The ORDINAL types do not match. </name>
    <internalKey>IBM2100I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2101I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. The HANDLE types do not match. </name>
    <internalKey>IBM2101I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2102I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. The STRUCTURE types do not match. </name>
    <internalKey>IBM2102I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2103I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Alignment does not match. </name>
    <internalKey>IBM2103I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2104I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Number and attributes of structure members do not match. </name>
    <internalKey>IBM2104I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2105I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. The number of dimensions do not match. </name>
    <internalKey>IBM2105I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2106I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Lower bounds do not match. </name>
    <internalKey>IBM2106I</internalKey>
    <description>EXTERNAL variables can be declared in 87 more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2107I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Upper bounds do not match. </name>
    <internalKey>IBM2107I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2108I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. RETURNS attributes do not match. </name>
    <internalKey>IBM2108I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2109I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. BYVALUE and BYADDR attributes in RETURNS do not match. </name>
    <internalKey>IBM2109I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2110I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. LINKAGE values do not match. </name>
    <internalKey>IBM2110I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2111I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. OPTIONS values do not match. </name>
    <internalKey>IBM2111I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2112I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Parameter counts do not match. </name>
    <internalKey>IBM2112I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2113I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. BYVALUE and BYADDR attributes in parameter parameter-number do not match. </name>
    <internalKey>IBM2113I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2114I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. The number of dimensions for parameter parameter-number do not match. </name>
    <internalKey>IBM2114I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2115I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Lower bounds for parameter parameter-number do not match. </name>
    <internalKey>IBM2115I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2116I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Upper bounds for parameter parameter-number do not match. </name>
    <internalKey>IBM2116I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2117I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Alignment of parameter parameter-number does not match. </name>
    <internalKey>IBM2117I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2118I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Number and attributes of structure members in parameter parameter-number do not match. </name>
    <internalKey>IBM2118I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2119I</key>
    <name>The attributes of the EXTERNAL variable variable name do not match those in its previous declaration. Attributes of parameter parameter-number do not match. </name>
    <internalKey>IBM2119I</internalKey>
    <description>EXTERNAL variables can be declared in more than one procedure in a compilation unit, but the attributes in those declarations must match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2120I</key>
    <name>AREAs are not supported in RETURNS. </name>
    <internalKey>IBM2120I</internalKey>
    <description>But an AREA may be output parameter. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2121I</key>
    <name>Argument number argument-number in entry reference entry name must have the same size as the corresponding parameter. </name>
    <internalKey>IBM2121I</internalKey>
    <description>For a AREA parameter declared with constant size, any corresponding argument must have equal constant size. Dummy AREA arguments are not supported in this scenario. dcl x entry( area(10000) ); dcl a area(8000) ); call x( a ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2127I</key>
    <name>The ENTRY named ENTRY variable name matches the reference to the GENERIC variable GENERIC variable name, but while the GENERIC reference is used as a function, the matching ENTRY does not have the RET</name>
    <internalKey>IBM2127I</internalKey>
    <description>A match for the GENERIC reference has been found, but the match is not suitable because while the GENERIC reference is used as a function, the matching ENTRY is not a function. For example, the first GENERIC reference below is invalid, while the second is ok. dcl e1 entry( fixed bin ); dcl e2 entry( fixed bin, fixed bin ) returns( fixed bin ); dcl gp generic( e1 when( * ), e2 when( *, * ) ); rc = gp( 0 ); rc = gp( 0, 0 ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2128I</key>
    <name>The ENTRY named ENTRY variable name matches the reference to the GENERIC variable GENERIC variable name, but while the GENERIC reference is used as a function acting as a locator qualifier, the matchi</name>
    <internalKey>IBM2128I</internalKey>
    <description>A match for the GENERIC reference has been found, but the match is not suitable because while the GENERIC reference is used as a locator, the matching ENTRY is not a function returning a POINTER. For example, the first GENERIC reference below is invalid, while the second is ok. dcl f1 entry( fixed bin ) returns( fixed bin ); dcl f2 entry( fixed bin, fixed bin ) returns( pointer ); dcl bx based fixed bin; dcl gf generic( f1 when( * ), f2 when( *, * ) ); rc = gf( 0 )-&gt;bx; rc = gf( 0, 0 )-&gt;bx; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2129I</key>
    <name>The ENTRY named ENTRY variable name matches the reference to the GENERIC variable GENERIC variable name, but while the GENERIC reference is used as a repeating function reference, the matching ENTRY c</name>
    <internalKey>IBM2129I</internalKey>
    <description>A match for the GENERIC reference has been found, but the match is not suitable because while the GENERIC reference is used as a function whose return value is a function that is invoked (and so on, as the number of argument lists mandates), the matching ENTRY cannot be so used. For example, the first GENERIC reference below is invalid, while the second is ok. dcl x1 entry( fixed bin ) returns( entry ); dcl x2 entry( fixed bin, fixed bin ) returns( entry returns( fixed bin ) ); dcl gx generic( x1 when( * ), x2 when( *, * ) ); rc = gx( 0 )(); rc = gx( 0, 0 )(); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2130I</key>
    <name>iSUB defining is not valid with the POSITION attribute. </name>
    <internalKey>IBM2130I</internalKey>
    <description>The POSITION attribute can be used only with string overlay defining. dcl b(4) char(2) pos(2) def( a(1sub,1sub) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2131I</key>
    <name>In iSUB defining, the base and DEFINED variables must match. </name>
    <internalKey>IBM2131I</internalKey>
    <description>The defined and base arrays in iSUB defining must have identical attributes apart from the dimension attribute. 89 dcl a(4) fixed bin(31); dcl b(4) fixed bin(15) def( a(1sub,1sub) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2132I</key>
    <name>The i in an iSUB reference must not exceed the dimensionality of the DEFINED variable. </name>
    <internalKey>IBM2132I</internalKey>
    <description>The i in an iSUB reference must refer to a subscript of the DEFINED variable and hence must not be greater than the number of dimensions for that variable. dcl a(4,4) fixed bin(31); dcl b(4) fixed bin(15) def( a(1sub,2sub) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2133I</key>
    <name>An iSUB variable cannot be defined on a cross-section of its base. </name>
    <internalKey>IBM2133I</internalKey>
    <description>In an iSUB variable, no asterisks may appear in the specification of the base array. dcl a(4,4) fixed bin(31); dcl b(4) fixed bin(15) def( a(1sub,*) ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2134I</key>
    <name>iSUB defining is supported only for arrays of scalars. </name>
    <internalKey>IBM2134I</internalKey>
    <description>iSUB defining is not supported for structures and unions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2135I</key>
    <name>DFT(DESCLIST) conflicts with CMPAT(cmpat-suboption). </name>
    <internalKey>IBM2135I</internalKey>
    <description>If CMPAT(V1) or CMPAT(V2) is specified, then DFT(DESCLOCATOR) must be in effect (as it is by default on z/OS). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2136I</key>
    <name>The number of indices specified for the LABEL identifier does not match the number previously specified. </name>
    <internalKey>IBM2136I</internalKey>
    <description>The number of indices given for an element of a label constant array must not vary. a(1,1): .... a(1,2): .... a(3): .... </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2137I</key>
    <name>Indices have been specified for the LABEL identifier when it was previously specified without indices. </name>
    <internalKey>IBM2137I</internalKey>
    <description>A label constant cannot be subscripted if its first use contains no subscripts. a: .... a(3): .... </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2138I</key>
    <name>Indices have not been specified for the LABEL identifier when it was previously specified with indices. </name>
    <internalKey>IBM2138I</internalKey>
    <description>A label constant must be subscripted if its first use contains subscripts. a(3): .... a: .... </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2139I</key>
    <name>The LE runtime is not current enough. </name>
    <internalKey>IBM2139I</internalKey>
    <description>You are using LE 2.10 (or earlier!), which is not supported by the compiler. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2140I</key>
    <name>Length of second argument to the REPLACEBY2 built-in must be twice that of the third. </name>
    <internalKey>IBM2140I</internalKey>
    <description>The second argument to the REPLACEBY2 built-in function provides the set of pairs of characters which are to replace the corresponding characters in the third argument, and hence the length of the second string must be twice that of the third. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2141I</key>
    <name>First argument to the BUILTIN name built-in must be a structure. </name>
    <internalKey>IBM2141I</internalKey>
    <description>The first argument to the named built-in subroutine must be a structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2142I</key>
    <name>Event structure argument to the BUILTIN name built-in has too few elements. </name>
    <internalKey>IBM2142I</internalKey>
    <description>The first argument to the named built-in subroutine must be a structure supplying the event handlers for the SAX parser, and that structure must have exactly the right number of members. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2143I</key>
    <name>Event structure argument to the BUILTIN name built-in has too many elements. </name>
    <internalKey>IBM2143I</internalKey>
    <description>The first argument to the named built-in subroutine must be a structure supplying the event handlers for the SAX parser, and that structure must have exactly the right number of members. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2144I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in is not a scalar. </name>
    <internalKey>IBM2144I</internalKey>
    <description>The first argument to the named built-in subroutine must be a structure supplying the event handlers for the SAX parser, and each element of that structure must be a scalar. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2145I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must be a LIMITED ENTRY. </name>
    <internalKey>IBM2145I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must be a LIMITED ENTRY. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2146I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must return BYVALUE a NATIVE FIXED BIN(31). </name>
    <internalKey>IBM2146I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must be a function returning BYVALUE a NATIVE FIXED BIN(31). See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2147I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a non-empty entry description list. </name>
    <internalKey>IBM2147I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a non-empty entry description list. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2148I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in has a parameter count of specified-parm-count when the correct parameter count is required-parm-count . </name>
    <internalKey>IBM2148I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have the correct number of parameters. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2149I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE POINTER as its first parameter. </name>
    <internalKey>IBM2149I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE POINTER as its first parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2150I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE POINTER as its second parameter. </name>
    <internalKey>IBM2150I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE POINTER as its second parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2151I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE NATIVE FIXED BIN(31) as its third parameter. </name>
    <internalKey>IBM2151I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE NATIVE FIXED BIN(31) as its third parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2152I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE POINTER as its fourth parameter. </name>
    <internalKey>IBM2152I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE POINTER as its fourth parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2153I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE NATIVE FIXED BIN(31) as its fifth parameter. </name>
    <internalKey>IBM2153I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE NATIVE FIXED BIN(31) as its fifth parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2154I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE POINTER as its second parameter. </name>
    <internalKey>IBM2154I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE POINTER as its second parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2155I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE NATIVE FIXED BIN(31) as its fourth parameter. </name>
    <internalKey>IBM2155I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE NATIVE FIXED BIN(31) as its fourth parameter. See the Programming Guide for more details. 91 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2156I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE NATIVE FIXED BIN(31) as its second parameter. </name>
    <internalKey>IBM2156I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE NATIVE FIXED BIN(31) as its second parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2157I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE CHAR(1) or BYVALUE WCHAR(1) as its second parameter. </name>
    <internalKey>IBM2157I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE CHAR (or BYVALUE WIDECHAR) of length one as its second parameter. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2158I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in has the wrong linkage. </name>
    <internalKey>IBM2158I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have the PL/I default linkage. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2159I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have the NODESCRIPTOR option. </name>
    <internalKey>IBM2159I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have the NODESCRIPTOR option. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2160I</key>
    <name>All members of the input structure to the BUILTIN name built-in must have computational type. </name>
    <internalKey>IBM2160I</internalKey>
    <description>The XMLCHAR built-in function cannot be applied to structures containing noncomputational types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2161I</key>
    <name>The input structure to the BUILTIN name built-in must not be a UNION or contain any UNIONs. </name>
    <internalKey>IBM2161I</internalKey>
    <description>The XMLCHAR built-in function cannot be applied to unions or to structures containing unions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2162I</key>
    <name>The input structure to the BUILTIN name built-in must not contain any GRAPHIC elements. </name>
    <internalKey>IBM2162I</internalKey>
    <description>The XMLCHAR built-in function cannot be applied to structures containing any GRAPHIC data. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2163I</key>
    <name>The input structure to the BUILTIN name built-in must not contain any UTF-16 elements. </name>
    <internalKey>IBM2163I</internalKey>
    <description>The XMLCHAR built-in function cannot be applied to structures containing any WIDECHAR or WIDEPIC data. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2164I</key>
    <name>The input structure to the BUILTIN name built-in must not contain any unnamed substructures. </name>
    <internalKey>IBM2164I</internalKey>
    <description>The XMLCHAR built-in function cannot be applied to structures containing substructures using an asterisk as a name. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2165I</key>
    <name>PRV support is provided only if the LIMITS(EXTNAME(7)) option is in effect. </name>
    <internalKey>IBM2165I</internalKey>
    <description>Support for long external names is incompatible with support for using the PRV to address CONTROLLED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2166I</key>
    <name>PRV support is provided only if the NORENT option is in effect. </name>
    <internalKey>IBM2166I</internalKey>
    <description>Support for the RENT option is incompatible with support for using the PRV to address CONTROLLED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2167I</key>
    <name>PRV support is provided only if the CMPAT(V1) or CMPAT(V2) option is in effect. </name>
    <internalKey>IBM2167I</internalKey>
    <description>Support for the CMPAT(LE) option is incompatible with support for using the PRV to address CONTROLLED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2170I</key>
    <name>Too many INTERNAL CONTROLLED variables. </name>
    <internalKey>IBM2170I</internalKey>
    <description>When using the PRV to address CONTROLLED variables, there may be no more than 568 INTERNAL CONTROLLED variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2171I</key>
    <name>Under the NOWRITABLE option, no FETCHABLE ENTRY may be declared at the PACKAGE level. </name>
    <internalKey>IBM2171I</internalKey>
    <description>Under the NOWRITABLE option, every FETCHABLE ENTRY constant must be declared inside a PROCEDURE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2172I</key>
    <name>Under the NOWRITABLE option, no FILE CONSTANT may be declared at the PACKAGE level. </name>
    <internalKey>IBM2172I</internalKey>
    <description>Under the NOWRITABLE option, every FILE CONSTANT must be declared inside a PROCEDURE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2173I</key>
    <name>Under the NOWRITABLE option, no CONTROLLED may be declared at the PACKAGE level. </name>
    <internalKey>IBM2173I</internalKey>
    <description>Under the NOWRITABLE option, every CONTROLLED variable must be declared inside a PROCEDURE. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2174I</key>
    <name>Result of REPLACEBY2 is too long. </name>
    <internalKey>IBM2174I</internalKey>
    <description>The length of the string literal produced by applying the REPLACEBY2 built-in function to 3 literals must not be greater than the maximum allowed for a character literal. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2175I</key>
    <name>The second and third arguments to REPLACEBY2 must be restricted expressions. </name>
    <internalKey>IBM2175I</internalKey>
    <description>The REPLACEBY2 built-in function currently supports only second and third arguments that have a length and value known at compile time. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2176I</key>
    <name>The result of the BUILTIN name built-in would require more than 32767 bytes. </name>
    <internalKey>IBM2176I</internalKey>
    <description>The HEX and HEXIMAGE built-in functions cannot be applied to strings using more than 16383 bytes of storage. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2177I</key>
    <name>The file filename is a PDS member and hence cannot be used for SYSADATA. </name>
    <internalKey>IBM2177I</internalKey>
    <description>The named file is the file intended to be used as the SYSADATA file, but such a file must not be a member of a PDS. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2178I</key>
    <name>INCLUDE statements are not supported when the LINEDIR option is in effect. </name>
    <internalKey>IBM2178I</internalKey>
    <description>When the LINEDIR option is in effect, your source must contain no INCLUDE statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2179I</key>
    <name>There is too little room between the margins for the LINE directive. The PPTRACE option will be turned off. </name>
    <internalKey>IBM2179I</internalKey>
    <description>The %LINE directive generated by the PPTRACE must fit on one line. You must either make the margins wide enough to allow this or make the source file names short enough. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2180I</key>
    <name>Use of the KEYED DIRECT file filename in a keyword statement without a KEY/KEYFROM clause is invalid. </name>
    <internalKey>IBM2180I</internalKey>
    <description>Any input/output operation using a KEYED DIRECT file must include the key of the record to which the the operation is to be applied. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2181I</key>
    <name>First argument to BUILTIN name built-in must have type CHARACTER. </name>
    <internalKey>IBM2181I</internalKey>
    <description>This applies to the PICSPEC built-in function, for example. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2182I</key>
    <name>Second argument to BUILTIN name built-in must be a constant. </name>
    <internalKey>IBM2182I</internalKey>
    <description>This applies to the PICSPEC built-in function, for example. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2183I</key>
    <name>The first argument to BUILTIN name built-in must have constant length equal to that of the second argument. </name>
    <internalKey>IBM2183I</internalKey>
    <description>This applies to the PICSPEC built-in function, for example. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2184I</key>
    <name>Compiler input files must have less then 1000000 lines. </name>
    <internalKey>IBM2184I</internalKey>
    <description>Break up the source files into smaller files. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2185I</key>
    <name>Argument to BUILTIN name built-in must have type REAL DECIMAL FLOAT, and the DFP option must be in effect. </name>
    <internalKey>IBM2185I</internalKey>
    <description>This applies to the ISFINITE and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2186I</key>
    <name>BUILTIN name is not supported for DFP. </name>
    <internalKey>IBM2186I</internalKey>
    <description>The named built-in function is not supported for float using DFP. This message applies, for instance, to the SQRTF built-in functions </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2187I</key>
    <name>The exponent in the literal value is too large for DECIMAL FLOAT with precision precision. </name>
    <internalKey>IBM2187I</internalKey>
    <description>A DFP literal value when adjusted to have no decimal point (e.g. 3.14E0 would be adjusted to 314E-2) must have an exponent no larger than the maximum for its precision. For precision &lt;= 7, the maximum is 90. For 7 &lt; precision &lt;= 16, the maximum is 369. For 16 &lt; precision, the maximum is 6111. 93 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2188I</key>
    <name>The exponent in the literal value is too small for DECIMAL FLOAT with precision precision. </name>
    <internalKey>IBM2188I</internalKey>
    <description>A DFP literal value when adjusted to have no decimal point (e.g. 3.14E0 would be adjusted to 314E-2) must have an exponent no smaller than the minimum for its precision. For precision &lt;= 7, the minimum is -95. For 7 &lt; precision &lt;= 16, the minimum is -383. For 16 &lt; precision, the minimum is -6143. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2189I</key>
    <name>Under CMPAT(V2) and CMPAT(LE), bounds must not be greater than +2147483647. </name>
    <internalKey>IBM2189I</internalKey>
    <description>Under CMPAT(V2) and CMPAT(LE), bounds must be between -2147483648 and +2147483647. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2190I</key>
    <name>Under CMPAT(V2) and CMPAT(LE), bounds must not be less than -2147483648. </name>
    <internalKey>IBM2190I</internalKey>
    <description>Under CMPAT(V2) and CMPAT(LE), bounds must be between -2147483648 and +2147483647. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2191I</key>
    <name>No valid character specified in the option option. </name>
    <internalKey>IBM2191I</internalKey>
    <description>You must specify at least one valid character in each of the OR, NOT and QUOTE or NAMES compiler options. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2192I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE POINTER as parameter number parameter-number . </name>
    <internalKey>IBM2192I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE POINTER in the specified parameter position. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2193I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE NATIVE FIXED BIN(31) as parameter number parameter-number . </name>
    <internalKey>IBM2193I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE NATIVE FIXED BIN(31) in the specified parameter position. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2194I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYADDR POINTER as parameter number parameter-number . </name>
    <internalKey>IBM2194I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYADDR POINTER in the specified parameter position. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2195I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYADDR NATIVE FIXED BIN(31) as parameter number parameter-number. </name>
    <internalKey>IBM2195I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYADDR NATIVE FIXED BIN(31) in the specified parameter position. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2196I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYVALUE ALIGNED BIT(8) as parameter number parameter-number . </name>
    <internalKey>IBM2196I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYVALUE ALIGNED BIT(8) in the specified parameter position. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2197I</key>
    <name>Argument to BUILTIN name built-in must have type CHAR or WIDECHAR. </name>
    <internalKey>IBM2197I</internalKey>
    <description>This applies to the UVALID and ULENGTH built-in functions, for example. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2198I</key>
    <name>First argument to BUILTIN name built-in must have type CHAR or WIDECHAR. </name>
    <internalKey>IBM2198I</internalKey>
    <description>This applies to the UPOS and UWIDTH built-in functions, for example. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2199I</key>
    <name>The run-time option XPLINK(ON) must be in effect if object code is to be generated. </name>
    <internalKey>IBM2199I</internalKey>
    <description>The compiler backend requires the XPLINK(ON) option to be in effect. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2200I</key>
    <name>DFP conversion from source type to target type failed with an operation exception. The most likely cause for this is lack of DFP hardware. </name>
    <internalKey>IBM2200I</internalKey>
    <description>The indicated conversion had a DFP source, target, or both but failed at compile time with an operation exception. These conversions require that the machine on which the compilation occurs have DFP hardware installed. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2201I</key>
    <name>First argument to BUILTIN name built-in must have type REAL DECIMAL FIXED, or REAL DECIMAL FLOAT, and in the latter case, the DFP option must be in effect. </name>
    <internalKey>IBM2201I</internalKey>
    <description>This applies to the ROUNDDEC and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2202I</key>
    <name>Use of the BUILTIN name built-in requires ARCH( level ) or greater. </name>
    <internalKey>IBM2202I</internalKey>
    <description>This applies to various built-in functions on some platforms. For example, on z/OS, MEMCU4* and MEMCU*4 require at least ARCH(7). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2203I</key>
    <name>The VALUE attribute may be used on a structure member only if it is used on all base members of that structure. </name>
    <internalKey>IBM2203I</internalKey>
    <description>If any leaf structure member has the VALUE attribute, then all must have the VALUE attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2204I</key>
    <name>The VALUE attribute may be used on a structure member only if no storage attribute is specified for the structure. </name>
    <internalKey>IBM2204I</internalKey>
    <description>It is invalid to specify the VALUE attribute for a member of a structure if the structure has a storage attribute such as BASED, CONTROLLED, etc. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2205I</key>
    <name>The VALUE attribute may be used on a structure member only if no dimension attributes are specified for its parents. </name>
    <internalKey>IBM2205I</internalKey>
    <description>It is invalid to specify the VALUE attribute for a member of a structure that has inherited dimensions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2206I</key>
    <name>The VALUE attribute conflicts with the DIMENSION attribute. </name>
    <internalKey>IBM2206I</internalKey>
    <description>It is invalid to specify the VALUE attribute for an array. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2207I</key>
    <name>The VALUE attribute may be used on a structure member only if no parent has the UNION attribute. </name>
    <internalKey>IBM2207I</internalKey>
    <description>It is invalid to specify the VALUE attribute for a member of a union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2208I</key>
    <name>References to a structure containing elements with the VALUE attribute are invalid. </name>
    <internalKey>IBM2208I</internalKey>
    <description>Only the leaf elements of such a structure may be referenced. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2209I</key>
    <name>Use of nonconstant extents in BASED variables without REFER is invalid except on scalars. </name>
    <internalKey>IBM2209I</internalKey>
    <description>Extents in BASED variables must all be constant except where the REFER option is used - unless the variable is a scalar. So, the first declare below is valid, while the second is invalid. dcl x based char(n); dcl y(n,m) based fixed bin(31); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2210I</key>
    <name>The VALUE type function cannot be applied to type name since that structure has no members with an INITIAL attribute. </name>
    <internalKey>IBM2210I</internalKey>
    <description>The VALUE type function can be applied only to those structure types that have at least one member with an INITIAL attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2211I</key>
    <name>Shift-out code has no closing shift-in code before the right margin. </name>
    <internalKey>IBM2211I</internalKey>
    <description>Every DBCS shift-out code between the margins must have a matching DBCS shift-in code also between the margins. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2212I</key>
    <name>Argument to the BUILTIN name built-in must be a structure. </name>
    <internalKey>IBM2212I</internalKey>
    <description>The argument to the named built-in subroutine must be a structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2213I</key>
    <name>Block contains too many label arrays. </name>
    <internalKey>IBM2213I</internalKey>
    <description>Procedures and begin blocks must contain fewer than 2048 label arrays. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2214I</key>
    <name>Attribute is invalid on structure parents. </name>
    <internalKey>IBM2214I</internalKey>
    <description>The XMLATTR and XMLOMIT attributes may be used only on base structure elements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2215I</key>
    <name>Attribute is invalid on unnamed structure elements. </name>
    <internalKey>IBM2215I</internalKey>
    <description>The XMLATTR and XMLOMIT attributes may be used only on named structure elements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2216I</key>
    <name>Attribute is invalid on arrays. </name>
    <internalKey>IBM2216I</internalKey>
    <description>The XMLATTR and XMLOMIT attributes may be used only on scalar structure elements. 95 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2217I</key>
    <name>XMLATTR is invalid if the previous element at that logical level does not also have the XMLATTR attribute. </name>
    <internalKey>IBM2217I</internalKey>
    <description>The XMLATTR attribute may be used only on a scalar structure element only if all its previous sister elements at the same logical level also had the XMLATTR attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2218I</key>
    <name>Attribute is invalid on non-native FLOAT elements. </name>
    <internalKey>IBM2218I</internalKey>
    <description>The XMLOMIT attribute may not be used on FLOAT elements using a data representation not supported by the hardware. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2219I</key>
    <name>Parameters declared as INONLY must not contain any elements declared with the ASSIGNABLE attribute. </name>
    <internalKey>IBM2219I</internalKey>
    <description>If a parameter is declared as INONLY, then the ASSIGNABLE attribute is invalid on it and all of the elements it contains. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2220I</key>
    <name>Parameters declared as OUTONLY must contain at least one element declared with the ASSIGNABLE attribute. </name>
    <internalKey>IBM2220I</internalKey>
    <description>If a parameter is declared as OUTONLY, then the NONASSIGNABLE attribute must not be specified on all of its elements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2221I</key>
    <name>A non-constant array extent in a BASED variable is invalid if the array has more than one dimension. </name>
    <internalKey>IBM2221I</internalKey>
    <description>The use of a non-constant extent in BASED variable without using REFER is limited. In an array, its use requires that the array has only one dimension. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2222I</key>
    <name>A non-constant array extent in a BASED variable is invalid if the array has a non-constant lower bound. </name>
    <internalKey>IBM2222I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In an array, its use requires that the array has a constant lower bound. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2223I</key>
    <name>A non-constant array extent in a BASED structure is invalid if any other fields in the structure have non-constant extents. </name>
    <internalKey>IBM2223I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In an array that is part of a structure, its use requires that no other field in the structure have non-constant extents. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2224I</key>
    <name>A non-constant AREA, BIT, GRAPHIC, or WIDECHAR extent in a BASED variable is invalid if the variable is an array element or part of a structure. </name>
    <internalKey>IBM2224I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In an AREA, BIT, GRAPHIC or WIDECHAR extent, its use requires that the AREA or string is a scalar. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2225I</key>
    <name>A non-constant CHARACTER extent in a BASED variable is invalid if the string is ALIGNED and either VARYING or VARYING4. </name>
    <internalKey>IBM2225I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In a CHARACTER extent, its use requires that the string be either UNALIGNED, NONVARYING or VARYINGZ. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2226I</key>
    <name>A non-constant array extent in a BASED variable is invalid if there are any sibling fields after the array or any of the array's parents. </name>
    <internalKey>IBM2226I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In an array, its use requires that the array and the array's parents have no sibling fields. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2227I</key>
    <name>A non-constant CHARACTER extent in a BASED structure is invalid if the string is a member of an array of structures. </name>
    <internalKey>IBM2227I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In a CHARACTER extent, its use requires that the string not be part of an array. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2228I</key>
    <name>A non-constant CHARACTER extent in a BASED structure is invalid unless the string is the last field in the structure and not part of a union. </name>
    <internalKey>IBM2228I</internalKey>
    <description>The use of non-constant extents in BASED variables without using REFER is limited. In a CHARACTER extent, its use requires that the string be the last element in the structure and not part of a union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2230I</key>
    <name>The argument to the BUILTIN name built-in must have the attributes REAL FIXED BIN and scale factor zero. </name>
    <internalKey>IBM2230I</internalKey>
    <description>This applies, for example, to the POPCNT built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2231I</key>
    <name>The BUILTIN name built-in is supported only with the native character set. </name>
    <internalKey>IBM2231I</internalKey>
    <description>The XMLCHAR built-in function cannot be used with DFT(EBCDIC) on Windows or AIX nor with DFT(ASCII) on the host. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2232I</key>
    <name>There must be only one target in a BY DIMACROSS assignment. </name>
    <internalKey>IBM2232I</internalKey>
    <description>Multiple targets are not permitted in BY DIMACROSS assignments. For example, the following is invalid. dcl 1 a, 2 a1 fixed bin, 2 a2 fixed bin; dcl 1 b like a; dcl 1 c(100) dimacross like a; a,b = c, by dimacross(jx); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2233I</key>
    <name>The target in a BY DIMACROSS assignment must be a structure reference. </name>
    <internalKey>IBM2233I</internalKey>
    <description>The target in a BY DIMACROSS assignment must not be an array of structures or a scalar. For example, the following is invalid. dcl 1 a(100), 2 a1 fixed bin, 2 a2 fixed bin; dcl 1 b(100) dimacross, 2 b1 fixed bin, 2 b2 fixed bin; a = b, by dimacross(1); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2234I</key>
    <name>No arrays are permitted in the source in a BY DIMACROSS assignment. </name>
    <internalKey>IBM2234I</internalKey>
    <description>The source in a BY DIMACROSS assignment must not include any array references. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2235I</key>
    <name>In a BY DIMACROSS assignment, the immediate children of any structure not declared with DIMACROSS must not be arrays. </name>
    <internalKey>IBM2235I</internalKey>
    <description>The immediate children of a structure used in a BY DIMACROSS assignment must be scalars or substructures, but not arrays unless the structure was declared with the DIMACROSS attribute. For example, the following is invalid. dcl 1 a, 2 a1(100) fixed bin, 2 a2(100) fixed bin; dcl 1 b(100) dimacross, 2 b1 fixed bin, 2 b2 fixed bin; a = b, by dimacross(1); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2236I</key>
    <name>BUILTIN name argument must have the DIMACROSS attribute. </name>
    <internalKey>IBM2236I</internalKey>
    <description>The named built-in function is valid only when applied to a reference to a variable declared with the DIMACROSS attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2237I</key>
    <name>The third argument to the ALLCOMPARE built-in must be a CHAR(2) constant. </name>
    <internalKey>IBM2237I</internalKey>
    <description>The third argument to the ALLCOMPARE built-in function must be a restricted expression with the attributes CHAR(2) NONVARYING. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2238I</key>
    <name>The third argument to the ALLCOMPARE built-in must specify the name of a comparison operator. </name>
    <internalKey>IBM2238I</internalKey>
    <description>When uppercased, the third argument to the ALLCOMPARE built-in function must be one of 'EQ', 'LT', 'LE', 'GE', 'GT', or 'NE'. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2239I</key>
    <name>Invalid use of unspecified STRUCT type type name. </name>
    <internalKey>IBM2239I</internalKey>
    <description>If a DEFINE STRUCT statement specifies no member names, then any attempt to dereference the type is invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2240I</key>
    <name>Arithmetic operations are not allowed on handles for unspecified structure definitions. </name>
    <internalKey>IBM2240I</internalKey>
    <description>The size of an unspecified structure is unknown, and hence all arithmetic operations on handles for it are ill-defined. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2241I</key>
    <name>The argument to the type function type function must be a specified structure type name. </name>
    <internalKey>IBM2241I</internalKey>
    <description>The argument to the named type function must be the name of a structure type that was fully specified. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2242I</key>
    <name>Subtraction of HANDLE from HANDLE is invalid unless both point to the same type. </name>
    <internalKey>IBM2242I</internalKey>
    <description>If h1 is a handle for structure type t1 and h2 is a handle for structure type t2, the h1-h2 is invalid unless t1 and t2 are the same. 97 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2243I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. RETURNS attributes do not match. </name>
    <internalKey>IBM2243I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2244I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. BYVALUE/BYADDR attributes in RETURNS do not match. </name>
    <internalKey>IBM2244I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2245I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. LINKAGE values do not match. </name>
    <internalKey>IBM2245I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2246I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. OPTIONS values do not match. </name>
    <internalKey>IBM2246I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2247I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Parameter counts do not match. </name>
    <internalKey>IBM2247I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2248I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. BYVALUE/BYADDR attributes in parameter parameter-number do not </name>
    <internalKey>IBM2248I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2249I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Number of dimensions for parameter parameter-number do not matc</name>
    <internalKey>IBM2249I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2250I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Lower bounds for parameter parameter-number do not match. </name>
    <internalKey>IBM2250I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2251I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Upper bounds for parameter parameter-number do not match. </name>
    <internalKey>IBM2251I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2252I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Alignment of parameter parameter-number does not match. </name>
    <internalKey>IBM2252I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2253I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Number and attributes of structure members in parameter paramet</name>
    <internalKey>IBM2253I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2254I</key>
    <name>The attributes derived from the PROCEDURE statement for the ENTRY constant variable name do not match those in its explicit declaration. Attributes of parameter parameter-number do not match. </name>
    <internalKey>IBM2254I</internalKey>
    <description>A label on a PROCEDURE statement constitutes a declaration for an ENTRY constant with that name. That name also appears in a DECLARE statement, but the attributes in those two declarations do not match. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2255I</key>
    <name>The argument to the BUILTIN name built-in must be numeric, bit, or character. </name>
    <internalKey>IBM2255I</internalKey>
    <description>This message applies to the UTF8 built-in function. GRAPHIC and non-computational arguments are not allowed. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2256I</key>
    <name>The result of the BUILTIN name built-in function would have a length greater than the the maximum allowed for a CHARACTER string. </name>
    <internalKey>IBM2256I</internalKey>
    <description>Conversion of CHAR or WCHAR to UTF-8 can produce a result string that is longer than the source string because some CHAR(1) and WCHAR(1) values can produce CHAR(2) or CHAR(3) strings when converted to UTF-8. If there are too many of these values in the source string then the target string would have a length greater than the the maximum allowed for a CHARACTER string. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2257I</key>
    <name>The argument to the BUILTIN name built-in function must hold valid UTF-16. </name>
    <internalKey>IBM2257I</internalKey>
    <description>This message applies to the UTF8 built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2258I</key>
    <name>The argument to the BUILTIN name built-in must have type CHARACTER. </name>
    <internalKey>IBM2258I</internalKey>
    <description>This message applies to the UTF8TOCHAR and UTF8TOWCHAR built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2259I</key>
    <name>The argument to the BUILTIN name built-in must have hold valid UTF-8. </name>
    <internalKey>IBM2259I</internalKey>
    <description>This message applies to the UTF8TOCHAR and UTF8TOWCHAR built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2260I</key>
    <name>INITIAL expressions in DEFINE STRUCT must not depend on any address values. </name>
    <internalKey>IBM2260I</internalKey>
    <description>These expressions must be simple restricted expressions. For example, ENTRY, FILE and LABEL constants must not be used in these INITIAL expressions </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2261I</key>
    <name>Overpunch and currency characters are not allowed in WIDEPIC specifications. </name>
    <internalKey>IBM2261I</internalKey>
    <description>These characters are allowed in PICTURE specifications, but not in WIDEPIC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2262I</key>
    <name>A and X characters are not allowed in WIDEPIC specifications. </name>
    <internalKey>IBM2262I</internalKey>
    <description>These characters are allowed in PICTURE specifications, but not in WIDEPIC. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2263I</key>
    <name>REFER objects must not be COMPLEX WIDEPIC. </name>
    <internalKey>IBM2263I</internalKey>
    <description>REFER objects should have the REAL attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2264I</key>
    <name>The attribute attribute is invalid in a LOCATES descriptor. </name>
    <internalKey>IBM2264I</internalKey>
    <description>The LOCATES descriptor may not specify a structure, union or array. The following code example is invalid: dcl b offset(a) locates( 1 union, 2 ptr, 2 ptr ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2265I</key>
    <name>Extents in LOCATES descriptors must be constants. </name>
    <internalKey>IBM2265I</internalKey>
    <description>In LOCATES descriptors, any string length and AREA size must be specified with a restricted expression that has computational type. 99 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2266I</key>
    <name>The argument to BUILTIN name built-in must have the LOCATES attribute. </name>
    <internalKey>IBM2266I</internalKey>
    <description>This rule applies to the LOCVAL and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2267I</key>
    <name>The first argument to BUILTIN name built-in must have the LOCATES attribute. </name>
    <internalKey>IBM2267I</internalKey>
    <description>This rule applies to the LOCNEWSPACE and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2268I</key>
    <name>Argument to the LOCVAL pseudovariable must have the LOCATES attribute. </name>
    <internalKey>IBM2268I</internalKey>
    <description>The LOCVAL pseudovariable can be applied only to variables with the LOCATES attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2269I</key>
    <name>LOCATES attribute is valid only with OFFSET. </name>
    <internalKey>IBM2269I</internalKey>
    <description>The LOCATES attribute cannot be used on any other types. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2270I</key>
    <name>Only one description is allowed in a LOCATES descriptor. </name>
    <internalKey>IBM2270I</internalKey>
    <description>A located type can specify only one value. The following declaration is not correct: dcl b offset(a) locates( ptr, ptr ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2271I</key>
    <name>The first argument to BUILTIN name built-in must be a scalar reference. </name>
    <internalKey>IBM2271I</internalKey>
    <description>This rule applies to the LOCNEWSPACE and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2272I</key>
    <name>The second argument to BUILTIN name built-in must be a scalar reference. </name>
    <internalKey>IBM2272I</internalKey>
    <description>This rule applies to the LOCNEWVALUE and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2273I</key>
    <name>The OFFSET argument to BUILTIN name built-in must have an AREA qualification. </name>
    <internalKey>IBM2273I</internalKey>
    <description>This rule applies to the LOCVAL and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2274I</key>
    <name>The second argument to BUILTIN name built-in must have the LOCATES attribute. </name>
    <internalKey>IBM2274I</internalKey>
    <description>This rule applies to the LOCNEWVALUE and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2275I</key>
    <name>Third argument to BUILTIN name built-in must have type AREA. </name>
    <internalKey>IBM2275I</internalKey>
    <description>This rule applies to the LOCNEWVALUE built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2276I</key>
    <name>The argument to BUILTIN name built-in must have the LOCATES attribute or contain subelements with the LOCATES attribute. </name>
    <internalKey>IBM2276I</internalKey>
    <description>This rule applies to the LOCSTG and similar built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2277I</key>
    <name>%INCLUDE statements are not allowed under NOINCLUDE. </name>
    <internalKey>IBM2277I</internalKey>
    <description>Under the NOINCLUDE compiler option, %INCLUDE statements are valid only if the MACRO preprocessor is used. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2278I</key>
    <name>Source is not valid UTF-8. </name>
    <internalKey>IBM2278I</internalKey>
    <description>The source file contains lines that would be rejected by the UVALID built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2279I</key>
    <name>option option contains invalid UTF-8. </name>
    <internalKey>IBM2279I</internalKey>
    <description>The specified option contains values that would be rejected by the UVALID built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2280I</key>
    <name>The corresponding characters in the two NAMES strings must have the same length. </name>
    <internalKey>IBM2280I</internalKey>
    <description>In the NAMES( 'abc', 'xyz' ) option, each of the UTF-8 characters in the first string must have a corresponding character of the same UTF-8 length in the second string. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2281I</key>
    <name>The first argument to BUILTIN name built-in must have computational type or ordinal type. </name>
    <internalKey>IBM2281I</internalKey>
    <description>An expression contains the named built-in function with the specified argument having a noncomputational type that is either not an ordinal type. This message applies to the INLIST and BETWEEN built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2282I</key>
    <name>REINIT reference must be a level 1 item. </name>
    <internalKey>IBM2282I</internalKey>
    <description>In the statement REINIT x, x must not be a structure or union member. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2283I</key>
    <name>REINIT references must be BASED, AUTO, CTL or STATIC. </name>
    <internalKey>IBM2283I</internalKey>
    <description>In the statement REINIT x, x must not be DEFINED, constant, or a parameter. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2284I</key>
    <name>The first and second arguments to the BUILTIN name built-in must have matching types. </name>
    <internalKey>IBM2284I</internalKey>
    <description>This message applies to the LOCNEWVALUE built-in functions. In LOCNEWVALUE( x, y ), if y has the attribute LOCATES( t ) where t is an ORDINAL or STRUCT type, then x must have the same type. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2285I</key>
    <name>The argument to the BUILTIN name built-in must have the attributes UNSIGNED REAL FIXED BIN(64,0). </name>
    <internalKey>IBM2285I</internalKey>
    <description>This applies, for example, to the PLISTCK and PLISTCKF built-in subroutines. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2286I</key>
    <name>The argument to the BUILTIN name built-in must have the attributes CHAR NONVARYING and length length. </name>
    <internalKey>IBM2286I</internalKey>
    <description>This applies, for example, to the PLISTCKE built-in subroutine where the argument must have length 16. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2287I</key>
    <name>Argument number argument number to the BUILTIN name built-in must contain only standard computational types. </name>
    <internalKey>IBM2287I</internalKey>
    <description>The JsonGetValue and similar built-in functions cannot be applied to aggregates or scalars containing noncomputational types or containing any COMPLEX numeric or any FIXED numeric with a scale factor that is either negative or larger than its preicison. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2288I</key>
    <name>Argument number argument number to the BUILTIN name built-in must not be a UNION or contain any UNIONs. </name>
    <internalKey>IBM2288I</internalKey>
    <description>The JsonGetValue and similar built-in functions cannot be applied to unions or to structures containing unions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2289I</key>
    <name>Argument number argument number to the BUILTIN name built-in must not contain any GRAPHIC elements. </name>
    <internalKey>IBM2289I</internalKey>
    <description>The JsonGetValue and similar built-in functions cannot be applied to aggregates or scalars containing GRAPHIC data. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2290I</key>
    <name>Member member-number in the event structure argument to the BUILTIN name built-in must have a BYADDR NATIVE FIXED BIN(63) as parameter number parameter-number. </name>
    <internalKey>IBM2290I</internalKey>
    <description>The indicated element of the structure supplying the event handlers for the SAX parser must have a BYADDR NATIVE FIXED BIN(63) in the specified parameter position. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2291I</key>
    <name>POINTER precision is invalid. </name>
    <internalKey>IBM2291I</internalKey>
    <description>In 64-bit mode, the only valid values for the POINTER precision are 32 and 64. Otherwise the only valid value is 32. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2292I</key>
    <name>Target in statement statement must not be the name of a PROC or ENTRY statement. </name>
    <internalKey>IBM2292I</internalKey>
    <description>The target in a FETCH or RELEASE statement must be outside the current compilation unit. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2293I</key>
    <name>The BUILTIN name built-in is not supported under CMPAT(V1). </name>
    <internalKey>IBM2293I</internalKey>
    <description>CMPAT(V2) or CMPAT(V3) must be used when compiling any code using this built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2294I</key>
    <name>A value greater than 32K for the STRING subooption of the LIMITS option is valid only under CMPAT(V3). </name>
    <internalKey>IBM2294I</internalKey>
    <description>Strings longer than 32767 are not supported under CMPAT(V1) or CMPAT(V2). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2295I</key>
    <name>A value greater than 32K for the STRING subooption of the LIMITS option is valid only under BIFPREC(31). </name>
    <internalKey>IBM2295I</internalKey>
    <description>Strings longer than 32767 are not supported under BIFPREC(15). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM2296I</key>
    <name>Argument number argument number to BUILTIN name built-in must have the same ordinal type as the first argument. </name>
    <internalKey>IBM2296I</internalKey>
    <description>An expression contains the named built-in function with the specified argument having either a non-ordinal type or an ordinal type that is not the same ordinal type as the first argument. This message applies to the INLIST and BETWEEN built-in functions. 101 Chapter 5. MACRO, CICS, and SQL Preprocessor Messages (3000-3999) </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3000I</key>
    <name>note </name>
    <internalKey>IBM3000I</internalKey>
    <description>This message is used to report DB2 or CICS backend messages with a return code of 0. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3019I</key>
    <name>Program contains no EXEC SQL statements requiring translation. </name>
    <internalKey>IBM3019I</internalKey>
    <description>The SQL suboption has been specified for the PP option, but the program contains no EXEC SQL statements other than possibly EXEC SQL INCLUDE statements. The DBRMLIB will not be updated. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3020I</key>
    <name>Comment spans line-count lines. </name>
    <internalKey>IBM3020I</internalKey>
    <description>A comment ends on a different line than it begins. This may indicate that an end-of-comment delimiter is missing. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3021I</key>
    <name>String spans line-count lines. </name>
    <internalKey>IBM3021I</internalKey>
    <description>A string ends on a different line than it begins. This may indicate that a closing quote is missing. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3024I</key>
    <name>note </name>
    <internalKey>IBM3024I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 0. </description>
    <severity>MINOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3250I</key>
    <name>note </name>
    <internalKey>IBM3250I</internalKey>
    <description>This message is used to report DB2 or CICS backend messages with a return code of 4. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3251I</key>
    <name>identifier is multiply defined, but with different attributes. The declaration is ignored. </name>
    <internalKey>IBM3251I</internalKey>
    <description>Attributes and declares must be consistent. %a: proc; %end; %dcl a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3252I</key>
    <name>The attribute attribute conflicts with previous attributes and is ignored. </name>
    <internalKey>IBM3252I</internalKey>
    <description>Attributes must be consistent. dcl a fixed char; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3253I</key>
    <name>Comment spans more than one file. </name>
    <internalKey>IBM3253I</internalKey>
    <description>A comment ends in a different file than it begins. This may indicate that an end-of-comment statement is missing. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3254I</key>
    <name>String spans more than one file. </name>
    <internalKey>IBM3254I</internalKey>
    <description>A string ends in a different file than it begins. This may indicate that a closing quote is missing. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3255I</key>
    <name>Delimiter missing between nondelimiter and nondelimiter. A blank is assumed. </name>
    <internalKey>IBM3255I</internalKey>
    <description>A delimiter (for example, a blank or a comma) is required between all identifiers and constants. dcl 1 a, 2 b, 3c; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3256I</key>
    <name>Multiple closure of groups. END statements will be inserted to close intervening groups. </name>
    <internalKey>IBM3256I</internalKey>
    <description>Using one END statement to close more than one group of statements is permitted, but it may indicate a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3257I</key>
    <name>Missing character assumed. </name>
    <internalKey>IBM3257I</internalKey>
    <description>The indicated character is missing, and there are no more characters in the source. The missing character has been inserted by the parser in order to correct your source. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3258I</key>
    <name>Missing character assumed before character. </name>
    <internalKey>IBM3258I</internalKey>
    <description>The indicated character is missing and has been inserted by the parser in order to correct your source. %dcl jump fixed; %skip %jump = 2; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3259I</key>
    <name>note </name>
    <internalKey>IBM3259I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 4. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3260I</key>
    <name>Syntax of the %CONTROL statement is incorrect. </name>
    <internalKey>IBM3260I</internalKey>
    <description>The %CONTROL statement must be followed by FORMAT or NOFORMAT option enclosed in parentheses and then a semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3261I</key>
    <name>The suboption suboption is not valid for the suboption option of the option option. </name>
    <internalKey>IBM3261I</internalKey>
    <description>A suboption of a suboption of an option is incorrect. The suboption may be unknown or outside the allowable range. *process deprecate(stmt(test)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3262I</key>
    <name>The suboption option of the option option must be followed by a (possibly empty) parenthesized list. </name>
    <internalKey>IBM3262I</internalKey>
    <description>A suboption of an option has been incorrectly specified. It must be followed by a left parenthesis and then a (possibly empty) list of items and a closing right parenthesis. *process deprecate(stmt); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3265I</key>
    <name>Number of lines specified with %SKIP must be between 0 and 999 inclusive. </name>
    <internalKey>IBM3265I</internalKey>
    <description>Skip amounts greater than 999 are not supported. %skip(2000); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3270I</key>
    <name>'EXEC CICS' encountered, but the CICS option is not in effect. Command ignored. </name>
    <internalKey>IBM3270I</internalKey>
    <description>The CICS option must be in effect if the source contains EXEC CICS statements. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3271I</key>
    <name>'EXEC CSPM' encountered, but the CSPM option is not in effect. Command ignored. </name>
    <internalKey>IBM3271I</internalKey>
    <description>The CSPM option must be in effect if the source contains EXEC CSPM statements. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3272I</key>
    <name>'EXEC DLI' encountered, but the DLI option is not in effect. Command ignored. </name>
    <internalKey>IBM3272I</internalKey>
    <description>The DLI option must be in effect if the source contains EXEC DLI statements. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3281I</key>
    <name>SELECT statement contains no WHEN or OTHERWISE clauses. </name>
    <internalKey>IBM3281I</internalKey>
    <description>WHEN or OTHERWISE clauses are not required on SELECT statements, but their absence may indicate a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3283I</key>
    <name>SELECT statement contains no WHEN clauses. </name>
    <internalKey>IBM3283I</internalKey>
    <description>SELECT statements do not require WHEN clauses, but their absence may indicate a coding error. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3285I</key>
    <name>FIXED BINARY constant contains too many digits. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM3285I</internalKey>
    <description>A FIXED BINARY constant must contain 31 or fewer digits. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3286I</key>
    <name>FIXED DECIMAL constant contains too many digits. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM3286I</internalKey>
    <description>The maximum precision for FIXED DECIMAL constants is specified by the FIXEDDEC suboption of the LIMITS compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3287I</key>
    <name>Mantissa in FLOAT BINARY constant contains more digits than the implementation maximum. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM3287I</internalKey>
    <description>Float binary constants are limited to 64 digits. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3288I</key>
    <name>Mantissa in FLOAT DECIMAL constant contains more digits than the implementation maximum. Excess nonsignificant digits will be ignored. </name>
    <internalKey>IBM3288I</internalKey>
    <description>Float decimal constants are limited to 18 digits. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3289I</key>
    <name>FLOAT literal is too big for its implicit precision. An appropriate HUGE value is assumed. </name>
    <internalKey>IBM3289I</internalKey>
    <description>The precision for a float literal is implied by the number of digits in its mantissa. For instance 1e99 is implicitly FLOAT DECIMAL(1), but the value 1e99 is larger than the largest value a FLOAT DECIMAL(1) can hold. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3291I</key>
    <name>The OPTIONS option option-name conflicts with the LANGLVL compiler option. The option will be applied. </name>
    <internalKey>IBM3291I</internalKey>
    <description>The named option is not part of the PL/I language definition as specified in the LANGLVL compiler option. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3292I</key>
    <name>suboption is not a valid suboption for option. </name>
    <internalKey>IBM3292I</internalKey>
    <description>The specified suboption is not one of the supported suboptions of the named option. *process pp(macro(’fixed(long)’)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3293I</key>
    <name>A required suboption is missing for the suboption option. </name>
    <internalKey>IBM3293I</internalKey>
    <description>The named option requires a suboption. *process pp(macro(’fixed’)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3294I</key>
    <name>A closing parenthesis is missing in the specification of the option option. One is assumed. </name>
    <internalKey>IBM3294I</internalKey>
    <description>A closing parenthesis is missing in the specification of the named option. *process pp(macro(’fixed(bin’)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3295I</key>
    <name>option is not a supported option. </name>
    <internalKey>IBM3295I</internalKey>
    <description>The named option is not, in fact, an option. *process pp(macro(’float’)); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3299I</key>
    <name>Syntax of the %LINE directive is incorrect. </name>
    <internalKey>IBM3299I</internalKey>
    <description>The %LINE directive must be followed, with optional intervening blanks, by a parenthesis, a line number, a comma, a file name and a closing parenthesis. %line( 19, test.pli ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3300I</key>
    <name>identifier has not been declared. CHARACTER attribute assumed. </name>
    <internalKey>IBM3300I</internalKey>
    <description>All variables should be declared. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3309I</key>
    <name>Comparison of BUILTIN name to a value it could not return is odd. </name>
    <internalKey>IBM3309I</internalKey>
    <description>This message points to a likely programming error. For example, comparing SYSPOINTERSIZE to the value 32 is almost certainly an error since the only values SYSPOINTERSIZE could return are 4 and 8. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3310I</key>
    <name>First argument to BUILTIN name built-in should have string type. </name>
    <internalKey>IBM3310I</internalKey>
    <description>To eliminate this message, apply the CHAR or BIT built-in function to the first argument. dcl i fixed bin; display( substr(i,4) ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3311I</key>
    <name>Argument number to the BUILTIN name built-in function is missing. A null value will be passed for the missing argument. </name>
    <internalKey>IBM3311I</internalKey>
    <description>An argument to the function reference is missing. A null string or zero will be passed, as appropriate, for the missing argument. %dcl a fixed; %a = max(n,); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3312I</key>
    <name>LEAVE will exit noniterative DO-group. </name>
    <internalKey>IBM3312I</internalKey>
    <description>This message is not produced if the LEAVE statement specifies a label. In the following loop, the LEAVE statement will cause only the immediately enclosing DO-group to be exited; the loop will not be exited. do i = 1 to n; if a(i) &gt; 0 then do; call f; leave; end; else; end; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3313I</key>
    <name>Result of comparison is always constant. </name>
    <internalKey>IBM3313I</internalKey>
    <description>This message is produced when a variable is compared to a constant equal to the largest or smallest value that the variable could assume. In the following loop, the variable x can never be greater than 99, and hence the implied comparison executed each time through the loop will always result in a '1'b. do x pic’99’; do x = 1 to 99; end; 105 </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3314I</key>
    <name>The reference reference could refer to a parent or its child, but the child is assumed. </name>
    <internalKey>IBM3314I</internalKey>
    <description>For a structure named X with first child named X, a reference to X would by PL/I rules be resolved to the parent. But references to structures containing structures are invalid in SQL statements and so the reference is assumed to refer to the child. The reference should be changed from X to X.X. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3315I</key>
    <name>The reference reference is an array of structures. Arrays of structures are not valid in SQL statements, but because this structure consists of only one element, the reference is treated as if it were</name>
    <internalKey>IBM3315I</internalKey>
    <description>If a dimensioned structure named A consists of just one child B, a reference to A is treated as a reference to A.B. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3316I</key>
    <name>The reference reference is a structure containing an array. Structures containing arrays are not valid in SQL statements, but because this structure consists of only one element, the reference is trea</name>
    <internalKey>IBM3316I</internalKey>
    <description>If a structure named A consists of just one child B and B is an array, a reference to A is treated as a reference to A.B. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3320I</key>
    <name>RETURNS attribute in ENTRY declare ignored. </name>
    <internalKey>IBM3320I</internalKey>
    <description>ENTRY declares should not specify a RETURNS attribute. In the example below, the "returns( char )" should be omitted. %dcl a entry returns( char ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3321I</key>
    <name>RETURNS option assumed to enclose attribute in PROCEDURE statement. </name>
    <internalKey>IBM3321I</internalKey>
    <description>In a PROCEDURE statement, any RETURNS attribute should be enclosed in parentheses following the RETURNS keyword. In the example below, the "char" attribute should be specified as "returns( char )". %a: proc char ; return( ’1729’ ); %end; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3322I</key>
    <name>Argument list for PROCEDURE identifier is missing. It will be invoked without any arguments. </name>
    <internalKey>IBM3322I</internalKey>
    <description>References in open code to PROCEDUREs that have parameters should always include at least an empty argument list. For example, the "display( a )" below should be "display( a() )". %a: proc( x ) char ; dcl x char; return( ’1729’ ); %end; %act a; display( a ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3323I</key>
    <name>Too few arguments for PROCEDURE identifier. Null values will be passed for the missing arguments. </name>
    <internalKey>IBM3323I</internalKey>
    <description>There are too few arguments for the specified procedure. Null strings or zeros will be passed, as appropriate, for the missing arguments. %a: proc( x ) char ; dcl x char; return( ’1729’ ); %end; %act a; display( a() ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3324I</key>
    <name>Too many arguments for PROCEDURE identifier. Excess ignored. </name>
    <internalKey>IBM3324I</internalKey>
    <description>There are too many arguments for the specified procedure. The excess arguments will be ignored. %a: proc( x ) char ; dcl x char; return( ’1729’ ); %end; %act a; display( a(1,2) ); </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3325I</key>
    <name>No data attributes specified in declare for identifier. </name>
    <internalKey>IBM3325I</internalKey>
    <description>Preprocessor variables should be declared with an attribute such as CHAR or FIXED. This message could indicate that there is an extraneous comma in the declare statement as in this example. %dcl a, char; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3326I</key>
    <name>The LIKE reference is neither a structure nor a union. </name>
    <internalKey>IBM3326I</internalKey>
    <description>The LIKE reference cannot be a scalar or an array of scalars. dcl a fixed bin, 1 b like a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3327I</key>
    <name>The LIKE reference is ambiguous. </name>
    <internalKey>IBM3327I</internalKey>
    <description>The LIKE reference needs enough qualification to be unique. dcl 1 x like b, 1 a, 2 b, 3 c, 3 d, 2 e, 3 f, 3 g, 1 h, 2 b, 3 j, 3 k; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3328I</key>
    <name>Neither the LIKE reference nor any of its substructures can be declared with the LIKE attribute. </name>
    <internalKey>IBM3328I</internalKey>
    <description>LIKE from LIKE is not supported. dcl 1 a, 2 b1 like c, 2 b2 like c, 1 c, 2 d fixed bin, 2 e fixed bin; dcl 1 x like a; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3329I</key>
    <name>The LIKE reference must not be a member of a structure or union declared with the LIKE attribute. </name>
    <internalKey>IBM3329I</internalKey>
    <description>LIKE from LIKE is not supported. dcl 1 a, 2 b1 like c, 2 b2 like c, 1 c, 2 d fixed bin, 2 e fixed bin; dcl 1 x like a.b1; </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3330I</key>
    <name>The LIKE reference is unknown. </name>
    <internalKey>IBM3330I</internalKey>
    <description>The LIKE reference must be known in the block containing the LIKE attribute specification. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3331I</key>
    <name>The INCLUDE file filename will be deprecated. </name>
    <internalKey>IBM3331I</internalKey>
    <description>The named INCLUDE file was specified in the INCLUDE suboption of the DEPRECATENEXT option, and so any attempt to include it is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3332I</key>
    <name>The END statement has no matching BEGIN, DO, PACKAGE, PROC, or SELECT. This may indicate a problem with the syntax of a previous statement. </name>
    <internalKey>IBM3332I</internalKey>
    <description>An END statement has been found that matches no previous statement. This may indicate that a previous statement has a syntax error such as a missing closing semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3333I</key>
    <name>One or more END statements are missing. This may indicate a problem with the syntax of a previous statement. </name>
    <internalKey>IBM3333I</internalKey>
    <description>The source ended without closing END statements for all the open statement groups. This may indicate that a previous statement has a syntax error such as a missing closing semicolon. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3334I</key>
    <name>The ENTRY named variable will be deprecated. </name>
    <internalKey>IBM3334I</internalKey>
    <description>The named ENTRY was specified in the ENTRY suboption of the DEPRECATENEXT option, and so any use of it is flagged. </description>
    <severity>MAJOR</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3500I</key>
    <name>note </name>
    <internalKey>IBM3500I</internalKey>
    <description>This message is used to report DB2 or CICS backend messages with a return code of 8. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3501I</key>
    <name>note </name>
    <internalKey>IBM3501I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 8. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3502I</key>
    <name>An integer with a K suffix must have no more than 7 digits. </name>
    <internalKey>IBM3502I</internalKey>
    <description>An integer of the form dddK must have no more than 7 digits. The specified value is replaced by 1K. 107 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3503I</key>
    <name>In an integer with a K suffix the digits must specify a value less than or equal to 2097152. </name>
    <internalKey>IBM3503I</internalKey>
    <description>The largest accepted value for an integer with a K suffix is 2097152K. The specified value is replaced by 2097151K. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3504I</key>
    <name>An integer with an M suffix must have no more than 4 digits. </name>
    <internalKey>IBM3504I</internalKey>
    <description>An integer of the form dddM must have no more than 4 digits. The specified value is replaced by 1M. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3505I</key>
    <name>In an integer with an M suffix the digits must specify a value less than or equal to 2048. </name>
    <internalKey>IBM3505I</internalKey>
    <description>The largest accepted value for an integer with an M suffix is 2048M. The specified value is replaced by 2047M. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3506I</key>
    <name>An integer with a G suffix must have only 1 digit. </name>
    <internalKey>IBM3506I</internalKey>
    <description>An integer of the form dddG must have no more than 1 digit. The specified value is replaced by 1G. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3507I</key>
    <name>In an integer with an G suffix the digits must specify a value less than or equal to 2. </name>
    <internalKey>IBM3507I</internalKey>
    <description>The largest accepted value for an integer with an G suffix is 2G. The specified value is replaced by 1G. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3508I</key>
    <name>Numeric precision of 0 replaced by 1. </name>
    <internalKey>IBM3508I</internalKey>
    <description>Numeric precisions must be positive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3509I</key>
    <name>DECLARE statement has invalid syntax. No variables in it may be used in EXEC SQL statements. </name>
    <internalKey>IBM3509I</internalKey>
    <description>Fix the DECLARE statement so that it is syntactically correct. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3510I</key>
    <name>keyword statement is not allowed where an executable statement is required. A null statement will be inserted before the keyword statement. </name>
    <internalKey>IBM3510I</internalKey>
    <description>In certain contexts, for example after an IF-THEN clause, only executable statements are permitted. A DECLARE, DEFINE, DEFAULT or FORMAT statement has been found in one of these contexts. A null statement, (a statement consisting of only a semicolon) will be inserted before the offending statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3511I</key>
    <name>COUNTER value would exceed 99999. It will be reset to 0. </name>
    <internalKey>IBM3511I</internalKey>
    <description>The COUNTER built-in function should not be invoked more than 99999 times. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3512I</key>
    <name>Multiple closure of groups is not allowed under RULES(NOMULTICLOSE). </name>
    <internalKey>IBM3512I</internalKey>
    <description>Under RULES(NOMULTICLOSE), there should be no multiple closure of groups in your source program. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3514I</key>
    <name>Second argument to BUILTIN name built-in is negative. It will be changed to 0. </name>
    <internalKey>IBM3514I</internalKey>
    <description>The second argument to built-in functions such as COPY and REPEAT must be nonnegative. x = copy( y, -1 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3515I</key>
    <name>Scale factor is bigger than 127. It is replaced by 127. </name>
    <internalKey>IBM3515I</internalKey>
    <description>Scale factors must be between -128 and 127 inclusive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3516I</key>
    <name>Scale factor is less than -128. It is replaced by -128. </name>
    <internalKey>IBM3516I</internalKey>
    <description>Scale factors must be between -128 and 127 inclusive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3517I</key>
    <name>Sole bound specified for dimension dimension number of array variable name is less than 1. An upper bound of 1 is assumed. </name>
    <internalKey>IBM3517I</internalKey>
    <description>The default lower bound is 1, but the upper bound must be greater than the lower bound. dcl x(-5) fixed bin; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3518I</key>
    <name>identifier does not conform to the NAMEPREFIX option. </name>
    <internalKey>IBM3518I</internalKey>
    <description>If the NAMEPREFIX option is specified, the names of all macro variables and procedures must start with the character specified in that option. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3519I</key>
    <name>Characters in B3 literals must be 0-7. </name>
    <internalKey>IBM3519I</internalKey>
    <description>In a B3 literal, each character must be either 0-7. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3520I</key>
    <name>Structure level of 0 replaced by 1. </name>
    <internalKey>IBM3520I</internalKey>
    <description>Structure level numbers must be positive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3521I</key>
    <name>Structure level greater than 255 specified. It is replaced by 255. </name>
    <internalKey>IBM3521I</internalKey>
    <description>The maximum structure level supported is 255. dcl 1 a, 256 b, 2 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3522I</key>
    <name>A DECIMAL exponent is required. </name>
    <internalKey>IBM3522I</internalKey>
    <description>An E in a FLOAT constant must be followed by at least one decimal digit (optionally preceded by a sign). </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3523I</key>
    <name>A second argument to the BUILTIN name built-in must be supplied for arrays with more than one dimension. A value of 1 is assumed. </name>
    <internalKey>IBM3523I</internalKey>
    <description>The LBOUND, HBOUND, and DIMENSION built-in functions require two arguments when applied to arrays having more than one dimension. dcl a(5,10) fixed bin; do i = 1 to lbound(a); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3524I</key>
    <name>Second argument to BUILTIN name built-in is not positive. A value of 1 is assumed. </name>
    <internalKey>IBM3524I</internalKey>
    <description>The DIMENSION, HBOUND and LBOUND built-in functions require that the second argument be positive. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3525I</key>
    <name>Second argument to BUILTIN name built-in is greater than the number of dimensions for the first argument. A value of dimension count is assumed. </name>
    <internalKey>IBM3525I</internalKey>
    <description>The second argument to the LBOUND, HBOUND, and DIMENSION built-in functions must be no greater than the number of dimensions of their array arguments. dcl a(5,10) fixed bin; do i = 1 to lbound(a,3); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3526I</key>
    <name>Repeated declaration of identifier is invalid and will be ignored. </name>
    <internalKey>IBM3526I</internalKey>
    <description>Level 1 variable names must not be repeated in the same block. dcl a char, a fixed; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3527I</key>
    <name>Missing THEN assumed. </name>
    <internalKey>IBM3527I</internalKey>
    <description>THEN keyword must be part of any IF statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3528I</key>
    <name>Duplicate specification of arithmetic precision. Subsequent specification ignored. </name>
    <internalKey>IBM3528I</internalKey>
    <description>The precision attribute must be specified only once in a DECLARE statement. dcl a fixed(15) bin(31); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3529I</key>
    <name>Scale factors are not allowed in FLOAT declarations. </name>
    <internalKey>IBM3529I</internalKey>
    <description>Scale factors are valid only in declarations of FIXED BIN or FIXED DEC. The first declaration below is invalid and should be changed to one of the subsequent declarations. dcl a1 float dec(15,2); dcl a2 fixed dec(15,2); dcl a3 float dec(15); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3530I</key>
    <name>identifier is an array. ACTIVATE and DEACTIVATE are invalid for arrays. </name>
    <internalKey>IBM3530I</internalKey>
    <description>Only scalars may be activated. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3531I</key>
    <name>identifier is a statement label. ACTIVATE and DEACTIVATE are invalid for labels. </name>
    <internalKey>IBM3531I</internalKey>
    <description>Labels may not be activated. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3533I</key>
    <name>THEN clause outside of an open IF statement is ignored. </name>
    <internalKey>IBM3533I</internalKey>
    <description>THEN clauses are valid only immediately after an IF &lt;expression&gt;. %if a &gt; b; %then; 109 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3534I</key>
    <name>ELSE clause outside of an open IF-THEN statement is ignored. </name>
    <internalKey>IBM3534I</internalKey>
    <description>ELSE clauses are valid only immediately after an IF-THEN statement. do; if a &gt; b then; end; else a = 0; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3536I</key>
    <name>END label is not a label on any open group. </name>
    <internalKey>IBM3536I</internalKey>
    <description>A Label on END statement must match a LABEL on an open DO, PROCEDURE, or SELECT statement. a: do; ... end b; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3537I</key>
    <name>An END statement may be missing after an OTHERWISE unit. One will be inserted. </name>
    <internalKey>IBM3537I</internalKey>
    <description>After an OTHERWISE unit in a SELECT statement, only an END statement is valid. select; when ( ... ) do; end; otherwise do; end; display( .... ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3538I</key>
    <name>%END statement found without any open %PROCEDURE, %DO or %SELECT statements. It will be ignored. </name>
    <internalKey>IBM3538I</internalKey>
    <description>Any %END statement should be part of a %PROCEDURE-%END, %DO-%END or %SELECT-%END group. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3539I</key>
    <name>STRINGSIZE condition raised while evaluating expression. Result is truncated. </name>
    <internalKey>IBM3539I</internalKey>
    <description>During the conversion of a user expression during the compilation, the target string was found to be shorter than the source, thus causing the STRINGSIZE condition to be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3540I</key>
    <name>STRINGRANGE condition raised while evaluating expression. Arguments are adjusted to fit. </name>
    <internalKey>IBM3540I</internalKey>
    <description>If all the arguments in a SUBSTR reference are constants or restricted expressions, the reference will be evaluated at compile- time and the STRINGRANGE condition will occur if the arguments do not comply with the rules described for the SUBSTR built-in function. a = substr( ’abcdef’, 5, 4 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3542I</key>
    <name>LEAVE/ITERATE label is not a label on any open DO group. </name>
    <internalKey>IBM3542I</internalKey>
    <description>LEAVE/ITERATE must specify a label on an open DO loop. %a: do jx = 1 to 1729; %leave b; %end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3543I</key>
    <name>ITERATE/LEAVE statement is invalid outside an open DO statement. The statement will be ignored. </name>
    <internalKey>IBM3543I</internalKey>
    <description>ITERATE/LEAVE statements are valid only inside DO groups. %a: do jx = 1 to 1729; %end; %leave a; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3544I</key>
    <name>GX literals should contain a multiple of 4 hex digits. </name>
    <internalKey>IBM3544I</internalKey>
    <description>GX literals must represent graphic strings and hence must contain a multiple of 4 hex digits. x = ’00’gx; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3545I</key>
    <name>Upper bound for dimension dimension number of array variable name is less than lower bound. Bounds will be reversed. </name>
    <internalKey>IBM3545I</internalKey>
    <description>A variable has been declared with an upper bound that is less than its lower bound. The upper and lower bounds will be swapped in order to correct this. For example, DECLARE x(3:1) will be changed to DECLARE x(1:3). </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3546I</key>
    <name>Identifier is too long. It will be collapsed to identifier. </name>
    <internalKey>IBM3546I</internalKey>
    <description>All identifiers must be contained in 31 bytes or less. PL/I DBCS identifiers must have 14 or fewer DBCS characters. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3547I</key>
    <name>B assumed to complete iSUB. </name>
    <internalKey>IBM3547I</internalKey>
    <description>There is no language element of the form 1su. dcl a(10) def b(1su, 1sub ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3548I</key>
    <name>Digit in BINARY constant is not zero or one. </name>
    <internalKey>IBM3548I</internalKey>
    <description>In a BINARY constant, each digit must be a zero or one. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3549I</key>
    <name>Characters in BIT literals must be 0 or 1. </name>
    <internalKey>IBM3549I</internalKey>
    <description>In a BIT literal, each character must be either zero or one. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3550I</key>
    <name>Character with decimal value n does not belong to the PL/I character set. It will be ignored. </name>
    <internalKey>IBM3550I</internalKey>
    <description>The indicated character is not part of the PL/I character set. This can occur if a program containing NOT or OR symbols is ported from another machine and those symbols are translated to a character that is not part of the PL/I character set. Using the NOT and OR compiler options can help avoid this problem. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3551I</key>
    <name>Characters in hex literals must be 0-9 or A-F. </name>
    <internalKey>IBM3551I</internalKey>
    <description>In a hex literal, each character must be either 0-9 or A-F. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3552I</key>
    <name>The statement element character is invalid. The statement will be ignored. </name>
    <internalKey>IBM3552I</internalKey>
    <description>The statement entered could not be parsed because the specified element is invalid. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3553I</key>
    <name>Use of underscore as initial character in an identifier accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3553I</internalKey>
    <description>Under LANGLVL(SAA), identifiers must start with an alphabetic character or with one of the extralingual characters. They may not start with an underscore. Under LANGLVL(SAA2), identifiers may start with an underscore, although names starting with _IBM are reserved for use by IBM. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3556I</key>
    <name>Character with decimal value n does not belong to the PL/I character set. It is assumed to be an OR symbol. </name>
    <internalKey>IBM3556I</internalKey>
    <description>The indicated character is not part of the PL/I character set, but was immediately followed by the same character. This can occur if a program containing an OR symbol is ported from another machine and this symbol is translated to a character that is not part of the PL/I character set. Using the OR compiler option can help avoid this problem. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3557I</key>
    <name>Character with decimal value n does not belong to the PL/I character set. It is assumed to be a NOT symbol. </name>
    <internalKey>IBM3557I</internalKey>
    <description>The indicated character is not part of the PL/I character set, but was immediately followed by an =, &lt; or &gt; symbol. This can occur if a program containing a NOT symbol is ported from another machine and this symbol is translated to a character that is not part of the PL/I character set. Using the NOT compiler option can help avoid this problem. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3558I</key>
    <name>WX literals should contain a multiple of 4 hex digits. </name>
    <internalKey>IBM3558I</internalKey>
    <description>WX literals must represent unicode strings and hence must contain a multiple of 4 hex digits. x = ’00’wx; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3565I</key>
    <name>Statement type resolution requires too many lexical units to be examined. The statement will be ignored. </name>
    <internalKey>IBM3565I</internalKey>
    <description>To determine if a statement is an assignment or another PL/I statement, many elements of the statement may need to be examined. If too many have to be examined, the compiler will flag the statement as in error. For instance, the following statement could be a DECLARE until the equal sign is encountered by the lexer. dcl ( a, b, c ) = d; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3567I</key>
    <name>Statements inside a SELECT must be preceded by a WHEN or an OTHERWISE clause. </name>
    <internalKey>IBM3567I</internalKey>
    <description>A WHEN or OTHERWISE might be missing. select; i = i + 1; when ( a &gt; 0 ) ... 111 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3570I</key>
    <name>Extent expression is negative. It will be replaced by the constant 1. </name>
    <internalKey>IBM3570I</internalKey>
    <description>Extents must be positive. dcl x char(-10); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3571I</key>
    <name>The SQL and PL/I float options are inconsistent. </name>
    <internalKey>IBM3571I</internalKey>
    <description>The compiler option DEFAULT(IEEE|HEXADEC) does not match the SQL preprocessor option FLOAT(IEEE|S390). Make sure they are consistent and resubmit your job. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3572I</key>
    <name>Initial level number in a structure is not 1. </name>
    <internalKey>IBM3572I</internalKey>
    <description>The level-1 DECLARE statement might be missing. dcl 2 a, 3 b, 3 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3573I</key>
    <name>Elements with level numbers greater than 1 follow an element without a level number. A level number of 1 is assumed. </name>
    <internalKey>IBM3573I</internalKey>
    <description>A structure level is probably missing. dcl a, 2 b, 2 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3574I</key>
    <name>Variables declared without a name must be structure members or followed by a substructure list. </name>
    <internalKey>IBM3574I</internalKey>
    <description>The use of an asterisk in place of a name is permitted only for structure or union names or for members of structures or unions. An asterisk must not be used for a level-1 structure name that specifies the LIKE attribute. dcl a fixed bin(15), * char(20) static init(’who can use me’); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3575I</key>
    <name>Duplicate specification of attribute. Subsequent specification ignored. </name>
    <internalKey>IBM3575I</internalKey>
    <description>Attributes such as CHAR must not be repeated for an element of a DECLARE statement. dcl a char(10) char(20); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3576I</key>
    <name>The SQL statement is empty and is ignored. </name>
    <internalKey>IBM3576I</internalKey>
    <description>EXEC SQL statements must consist of more than merely EXEC SQL. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3577I</key>
    <name>INCONLY option is ignored because preceded by other options. </name>
    <internalKey>IBM3577I</internalKey>
    <description>The INCONLY option must be specified without any other options. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3580I</key>
    <name>Parameter keyword may not be set more than once. First setting is assumed. </name>
    <internalKey>IBM3580I</internalKey>
    <description>In a statement-form procedure invocation, each parameter must be specified only once. Any subsequent specifications will be ignored. In the example code, 17 would be returned for both invocations of P. %p: proc( a ) stmt returns( char ); dcl a char; return( a ); %end; %act p; display( p a(17) a(29); ); display( p(17) a(29); ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3581I</key>
    <name>Unknown keyword in statement-form procedure invocation. keyword and any argument are ignored. </name>
    <internalKey>IBM3581I</internalKey>
    <description>In a statement-form procedure invocation, any keyword specified must be the name of a parameter for that procedure. %p: proc( a ) stmt returns( char ); dcl a char; return( a ); %end; %act p; display( p a(17) b(29); ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3582I</key>
    <name>Parameter identifier is not declared. </name>
    <internalKey>IBM3582I</internalKey>
    <description>Each parameter in a procedure should be declared. %a: proc( b, c ); dcl b fixed; %end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3583I</key>
    <name>Labels on keyword statements are invalid and ignored. </name>
    <internalKey>IBM3583I</internalKey>
    <description>Labels are not permitted on DECLARE statements or on WHEN and OTHERWISE clauses. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3589I</key>
    <name>The identifier identifier is not the name of a built-in function. The BUILTIN attribute will be ignored. </name>
    <internalKey>IBM3589I</internalKey>
    <description>The BUILTIN attribute can be applied only to identifiers that are the names of built-in functions or subroutines. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3590I</key>
    <name>The attribute keyword is not supported and will be ignored. </name>
    <internalKey>IBM3590I</internalKey>
    <description>The named attribute is not supported by the macro facility. %dcl a char external; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3591I</key>
    <name>Right parenthesis will be assumed at end of argument list. </name>
    <internalKey>IBM3591I</internalKey>
    <description>A right parenthesis is probably missing. If this occurs in the source, all the characters after the unmatched left parenthesis in the source will be interpreted as parameters to the function. If this occurs in a replacement string, all the characters after the unmatched left parenthesis in the string will be interpreted as parameters to the function. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3603I</key>
    <name>The end of the source was reached before the logical end of the program. Null statements and END statements will be inserted as necessary to complete the program. </name>
    <internalKey>IBM3603I</internalKey>
    <description>The source should contain END statements for all PROCEDUREs, DO groups, and SELECT statements, as well as statements for all IF-THEN and ELSE clauses. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3604I</key>
    <name>The procedure name proc-name has already been declared. The explicit declaration of the procedure name will not be accepted. </name>
    <internalKey>IBM3604I</internalKey>
    <description>Declarations for internal procedures are not permitted. a: proc; dcl b entry options(byvalue); b: proc; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3609I</key>
    <name>A SELECT statement may be missing. A SELECT statement, without an expression, will be inserted. </name>
    <internalKey>IBM3609I</internalKey>
    <description>A WHEN or OTHERWISE clause has been found outside of a SELECT statement. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3610I</key>
    <name>Semicolon inserted after ELSE keyword. </name>
    <internalKey>IBM3610I</internalKey>
    <description>An END statement enclosing a statement such as DO or SELECT has been found before the statement required after ELSE. do; if a &gt; b then ... else end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3612I</key>
    <name>Semicolon inserted after OTHERWISE keyword. </name>
    <internalKey>IBM3612I</internalKey>
    <description>An END statement might be misplaced or a semicolon might be missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3613I</key>
    <name>Semicolon inserted after THEN keyword. </name>
    <internalKey>IBM3613I</internalKey>
    <description>An END statement might be misplaced or a semicolon might be missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3614I</key>
    <name>Semicolon inserted after WHEN clause. </name>
    <internalKey>IBM3614I</internalKey>
    <description>An END statement might be misplaced or a semicolon might be missing. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3615I</key>
    <name>Source file does not end with the logical end of the program. </name>
    <internalKey>IBM3615I</internalKey>
    <description>The source file contains statements after the END statement that closed the first PACKAGE or PROCEDURE. These statements will be ignored, but their presence may indicate a programming error. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3616I</key>
    <name>Subscripts have been specified for the variable variable name, but it is not an array variable. </name>
    <internalKey>IBM3616I</internalKey>
    <description>Subscripts can be specified only for elements of an array. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3617I</key>
    <name>Second argument in SUBSTR reference is less than 1. It will be replaced by 1. </name>
    <internalKey>IBM3617I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. 113 </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3618I</key>
    <name>Second argument in SUBSTR reference is too big. It will be trimmed to fit. </name>
    <internalKey>IBM3618I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3619I</key>
    <name>Third argument in SUBSTR reference is less than 0. It will be replaced by 0. </name>
    <internalKey>IBM3619I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3620I</key>
    <name>Third argument in SUBSTR reference is too big. It will be trimmed to fit. </name>
    <internalKey>IBM3620I</internalKey>
    <description>Otherwise the STRINGRANGE condition would be raised. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3621I</key>
    <name>More than 15 dimensions have been specified. Excess will be ignored. </name>
    <internalKey>IBM3621I</internalKey>
    <description>The maximum number of dimensions allowed for a variable, including all inherited dimensions, is 15. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3624I</key>
    <name>End-of-comment marker found when there are no open comments. Marker will be ignored. </name>
    <internalKey>IBM3624I</internalKey>
    <description>An */ was found when there was no open comment. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3625I</key>
    <name>There is no compiler directive directive. Input up to the next semicolon will be ignored. </name>
    <internalKey>IBM3625I</internalKey>
    <description>See the Language Reference Manual for the list of supported compiler directives. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3626I</key>
    <name>Listing control statement must start with a percent symbol. </name>
    <internalKey>IBM3626I</internalKey>
    <description>A listing control statement, even when in a preprocessor procedure, must be preceded by a "%". %a: proc; skip; %end; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3628I</key>
    <name>X literals should contain a multiple of 2 hex digits. </name>
    <internalKey>IBM3628I</internalKey>
    <description>An X literal may not contain an odd number of digits. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3638I</key>
    <name>Excess arguments for ENTRY ENTRY name ignored. </name>
    <internalKey>IBM3638I</internalKey>
    <description>More arguments were specified in an ENTRY reference than were defined as parameters in that ENTRY's declaration. dcl e entry( fixed bin ); call e( 1, 2 ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3639I</key>
    <name>Excess arguments for BUILTIN name built-in ignored. </name>
    <internalKey>IBM3639I</internalKey>
    <description>More arguments were specified for the indicated built-in function than are supported by that built-in function. i = acos( j, k ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3640I</key>
    <name>The attribute attribute is invalid if it is not followed by an element with a greater logical level. </name>
    <internalKey>IBM3640I</internalKey>
    <description>The named attribute is valid only on parent structures. dcl 1 a, 2 b union, 2 c1 fixed bin(31), 2 c2 float bin(21), ... </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3641I</key>
    <name>Level number following LIKE specification is greater than the level number for the LIKE specification. LIKE attribute is ignored. </name>
    <internalKey>IBM3641I</internalKey>
    <description>LIKE cannot be specified on a parent structure or union. dcl 1 a like x, 2 b, 2 c, </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3650I</key>
    <name>keyword keyword accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3650I</internalKey>
    <description>The indicated keyword (UNSIGNED in the example below) is not defined in the SAA level-1 language. dcl x fixed bin unsigned; </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3651I</key>
    <name>Use of S, D and Q constants accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3651I</internalKey>
    <description>The definition of the SAA level-1 language does not include S, D, and Q floating-point constants. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3652I</key>
    <name>Use of underscores in constants accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3652I</internalKey>
    <description>The definition of the SAA level-1 language does not permit using underscores in numeric and hex constants. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3653I</key>
    <name>Use of asterisks for names in declares accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3653I</internalKey>
    <description>The definition of the SAA level-1 language does not permit using asterisks for structure element names. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3654I</key>
    <name>Use of XN constants accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3654I</internalKey>
    <description>The definition of the SAA level-1 language does not include XN constants. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3656I</key>
    <name>Use of 3 arguments with BUILTIN name built-in accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3656I</internalKey>
    <description>Under LANGLVL(SAA), the VERIFY and INDEX built-in functions are supposed to have exactly 2 arguments. i = verify( s, j, k ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3657I</key>
    <name>Use of 1 argument with BUILTIN name built-in accepted although invalid under LANGLVL(SAA). </name>
    <internalKey>IBM3657I</internalKey>
    <description>Under LANGLVL(SAA), the DIM, LBOUND and HBOUND built-in functions are supposed to have 2 arguments. i = dim( a ); </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3658I</key>
    <name>The INCLUDE file filename has been deprecated. </name>
    <internalKey>IBM3658I</internalKey>
    <description>The named INCLUDE file was specified in the INCLUDE suboption of the DEPRECATE option, and so any attempt to include it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3659I</key>
    <name>The EXEC SQL statement statement has been deprecated. </name>
    <internalKey>IBM3659I</internalKey>
    <description>The named statement was specified in the STMT suboption of the DEPRECATE option, and so any occurrence of it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3660I</key>
    <name>The ENTRY named variable has been deprecated. </name>
    <internalKey>IBM3660I</internalKey>
    <description>The named ENTRY was specified in the ENTRY suboption of the DEPRECATE option, and so any use of it is flagged. </description>
    <severity>CRITICAL</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3750I</key>
    <name>note </name>
    <internalKey>IBM3750I</internalKey>
    <description>This message is used to report DB2 or CICS backend messages with a return code of 12. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3751I</key>
    <name>A colon in an EXEC SQL statement must be followed by an identifier that starts a host variable reference. </name>
    <internalKey>IBM3751I</internalKey>
    <description>A colon in an EXEC SQL statement must be followed by a host variable reference, and such a reference must start with an identifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3752I</key>
    <name>Dot-qualified reference implies too many structure levels. </name>
    <internalKey>IBM3752I</internalKey>
    <description>Structures are limited to at most 15 logical levels, and so any dot-qualified reference must have at most 14 dots (or else it would imply the structure had at least 16 logical levels). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3753I</key>
    <name>Length in SQL TYPE IS type name is too large. </name>
    <internalKey>IBM3753I</internalKey>
    <description>The maximum length for BIN is 255 and for VARBINARY 32704. See the Programming Guide for the maximum lengths for BLOBs, CLOBs, and DBCLOBs. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3754I</key>
    <name>SQL TYPE IS type name must be followed by an opening left parenthesis. </name>
    <internalKey>IBM3754I</internalKey>
    <description>The correct syntax is SQL TYPE IS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3755I</key>
    <name>SQL TYPE IS type name must have an integer specifying its length after the opening left parenthesis. </name>
    <internalKey>IBM3755I</internalKey>
    <description>The correct syntax is SQL TYPE IS type( length ). 115 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3756I</key>
    <name>SQL TYPE IS type name must have a closing right parenthesis after the integer specifying its length. </name>
    <internalKey>IBM3756I</internalKey>
    <description>The correct syntax is SQL TYPE IS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3757I</key>
    <name>SQL TYPE IS XML AS type name must be followed by an opening left parenthesis. </name>
    <internalKey>IBM3757I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3758I</key>
    <name>SQL TYPE IS XML AS type name must have an integer specifying its length after the opening left parenthesis. </name>
    <internalKey>IBM3758I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3759I</key>
    <name>SQL TYPE IS XML AS type name must have a closing right parenthesis after the integer specifying its length. </name>
    <internalKey>IBM3759I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3760I</key>
    <name>Too few arguments have been specified for the ENTRY ENTRY name. </name>
    <internalKey>IBM3760I</internalKey>
    <description>The number of arguments must match the number of parameters in the ENTRY declaration. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3761I</key>
    <name>Procedures may not be nested. </name>
    <internalKey>IBM3761I</internalKey>
    <description>Macro procedures may not be nested. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3762I</key>
    <name>No percent statements are allowed inside procedures. </name>
    <internalKey>IBM3762I</internalKey>
    <description>Inside a procedure, statements should not begin with a percent. The %DCL in the example below should be just DCL. %a: proc( x ) returns( char ); %dcl x char; return( ’&lt;’ || x || ’&gt;’ ); %end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3763I</key>
    <name>Not enough virtual memory is available to continue the compile. </name>
    <internalKey>IBM3763I</internalKey>
    <description>The compilation requires more virtual memory than is available. It may help to specify one or more of the following compiler options: NOINSOURCE, NOXREF, NOATTRIBUTES, and/or NOAGGREGATE </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3764I</key>
    <name>BUILTIN name argument must be a parameter. </name>
    <internalKey>IBM3764I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not a parameter. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3765I</key>
    <name>BUILTIN name argument must be a reference. </name>
    <internalKey>IBM3765I</internalKey>
    <description>An expression contains the named built-in function with an argument that is not a reference. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3766I</key>
    <name>Aggregate contains more than 15 logical levels. </name>
    <internalKey>IBM3766I</internalKey>
    <description>The maximum physical level allowed is 255, but the maximum logical level is 15. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3767I</key>
    <name>Length in SQL TYPE IS type name must be greater than zero. </name>
    <internalKey>IBM3767I</internalKey>
    <description>The length in BIN, VARBIN, BLOB, CLOB, and DBCLOB types must be positive. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3768I</key>
    <name>The use of asterisks as subscripts is not permitted in the macro facility. </name>
    <internalKey>IBM3768I</internalKey>
    <description>In the macro facility, all subscripts must be scalar expressions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3769I</key>
    <name>Argument to BUILTIN name built-in must have type CHARACTER(1) NONVARYING. </name>
    <internalKey>IBM3769I</internalKey>
    <description>This applies to the RANK built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3770I</key>
    <name>First argument to BUILTIN name built-in must be an array. </name>
    <internalKey>IBM3770I</internalKey>
    <description>An expression contains the named built-in function with a first argument that is not an array. This message applies, for instance, to the DIMENSION, HBOUND, and LBOUND built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3771I</key>
    <name>note </name>
    <internalKey>IBM3771I</internalKey>
    <description>This message is used by %NOTE statements with a return code of 12. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3772I</key>
    <name>Third argument to BUILTIN name built-in would force STRINGRANGE. </name>
    <internalKey>IBM3772I</internalKey>
    <description>If a third argument is given for one of the built-in functions INDEX or VERIFY, it must be positive. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3773I</key>
    <name>Second argument to BUILTIN name built-in must be nonnegative. </name>
    <internalKey>IBM3773I</internalKey>
    <description>The second argument for the built-in functions CHARACTER, BIT, and GRAPHIC must be zero or greater. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3774I</key>
    <name>Too few arguments have been specified for the BUILTIN name built-in. </name>
    <internalKey>IBM3774I</internalKey>
    <description>Supply the minimum number of arguments required. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3775I</key>
    <name>The preprocessor name preprocessor requires the DFT(EBCDIC) option. </name>
    <internalKey>IBM3775I</internalKey>
    <description>The use of the DFT(ASCII) option with either the CICS or SQL preprocessor is not supported. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3778I</key>
    <name>Syntax of the %INCLUDE statement is incorrect. </name>
    <internalKey>IBM3778I</internalKey>
    <description>%INCLUDE must be followed by a name and either a semicolon or else a second name in parenthesis and then a semicolon. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3779I</key>
    <name>File specification after %INCLUDE is too long. </name>
    <internalKey>IBM3779I</internalKey>
    <description>The maximum length of the file specification is 8 characters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3780I</key>
    <name>File specification missing after %INCLUDE. </name>
    <internalKey>IBM3780I</internalKey>
    <description>%INCLUDE must be followed by a file name, not just a semicolon. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3781I</key>
    <name>Procedures may have no more than 63 parameters. </name>
    <internalKey>IBM3781I</internalKey>
    <description>The excess parameters will be removed from the proc statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3782I</key>
    <name>SQL TYPE IS XML must be followed by the keyword AS. </name>
    <internalKey>IBM3782I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3783I</key>
    <name>SQL TYPE IS XML AS must be followed by a valid type name. </name>
    <internalKey>IBM3783I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3784I</key>
    <name>SQL TYPE IS TABLE must be followed by the keyword LIKE. </name>
    <internalKey>IBM3784I</internalKey>
    <description>The correct syntax is SQL TYPE IS TABLE LIKE table-name AS LOCATOR. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3785I</key>
    <name>SQL TYPE IS TABLE LIKE must be followed by a table name. </name>
    <internalKey>IBM3785I</internalKey>
    <description>The correct syntax is SQL TYPE IS TABLE LIKE table-name AS LOCATOR. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3786I</key>
    <name>SQL TYPE IS TABLE LIKE must be followed by the keyword AS after the table name. </name>
    <internalKey>IBM3786I</internalKey>
    <description>The correct syntax is SQL TYPE IS TABLE LIKE table-name AS LOCATOR. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3787I</key>
    <name>SQL TYPE IS TABLE must be followed by the keyword LOCATOR after the table name and the AS keyword. </name>
    <internalKey>IBM3787I</internalKey>
    <description>The correct syntax is SQL TYPE IS TABLE LIKE table-name AS LOCATOR. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3788I</key>
    <name>SQL TYPE IS must be followed by a valid type name. </name>
    <internalKey>IBM3788I</internalKey>
    <description>The keywords SQL TYPE IS must be followed by a type name such as XML. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3789I</key>
    <name>Index number index number into the variable variable name is less than the lower bound for that dimension. </name>
    <internalKey>IBM3789I</internalKey>
    <description>Executing such a statement would most likely cause a protection exception. %dcl a(5:10) fixed; %a(1) = 0; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3790I</key>
    <name>Index number index number into the variable variable name is greater than the upper bound for that dimension. </name>
    <internalKey>IBM3790I</internalKey>
    <description>Executing such a statement would most likely cause a protection exception. %dcl a(5:10) fixed; %a(20) = 0; 117 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3791I</key>
    <name>Each dimension of an array must contain no more than 2147483647 elements. </name>
    <internalKey>IBM3791I</internalKey>
    <description>It must be possible to compute the value of the DIMENSION built-in function for an array. For example, in DECLARE A(x:y), (y-x+1) must be less than 214748648. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3792I</key>
    <name>Array variable name has too many elements. Bounds set to 1. </name>
    <internalKey>IBM3792I</internalKey>
    <description>Arrays are limited to 2**20 elements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3793I</key>
    <name>Too few subscripts specified for the variable variable name. </name>
    <internalKey>IBM3793I</internalKey>
    <description>The number of subscripts given for a variable must match that variable's number of dimensions </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3794I</key>
    <name>Too many subscripts specified for the variable variable name. </name>
    <internalKey>IBM3794I</internalKey>
    <description>The number of subscripts given for a variable must match that variable's number of dimensions </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3795I</key>
    <name>Shift-out code has no closing shift-in code before the right margin. </name>
    <internalKey>IBM3795I</internalKey>
    <description>Every DBCS shift-out code between the margins must have a matching DBCS shift-in code also between the margins. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3796I</key>
    <name>Array expressions cannot be assigned to non-arrays, and if any target in a multiple assignment is an array, then all the targets must be arrays. </name>
    <internalKey>IBM3796I</internalKey>
    <description>Array expressions may not, for instance, be assigned to structures or scalars. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3797I</key>
    <name>RETURN statement without an expression is invalid inside a PROCEDURE that specified the RETURNS attribute. </name>
    <internalKey>IBM3797I</internalKey>
    <description>All RETURN statements inside functions must specify a value to be returned. %a: proc returns( fixed ); return; %end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3798I</key>
    <name>RETURN statement with an expression is invalid inside a PROCEDURE that did not specify the RETURNS attribute. </name>
    <internalKey>IBM3798I</internalKey>
    <description>A statement of the form RETURN(x) is valid inside only PROCEDUREs that are defined with a RETURNS attribute. %a: proc; return( ’this is invalid’ ); %end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3799I</key>
    <name>The DECLARE statement for the host variable reference is not inside an SQL DECLARE SECTION. </name>
    <internalKey>IBM3799I</internalKey>
    <description>Under the SQL option STDSQL(YES), all host variables must be declared between SQL BEGIN DECLARE SECTION and SQL END DECLARE SECTION statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3800I</key>
    <name>Function function name contains no RETURN statement. </name>
    <internalKey>IBM3800I</internalKey>
    <description>Functions must contain at least one RETURN statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3801I</key>
    <name>Target in assignment is invalid. </name>
    <internalKey>IBM3801I</internalKey>
    <description>The target in an assignment must be character or fixed element reference. Pseudovariables are not supported. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3802I</key>
    <name>Statement labels may not be used in expressions. </name>
    <internalKey>IBM3802I</internalKey>
    <description>Statement labels must be used only in GOTO, LEAVE and ITERATE statements. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3803I</key>
    <name>Target in concatenate-equals assignment must have type char. </name>
    <internalKey>IBM3803I</internalKey>
    <description>Compound concatenate assignments with fixed targets are not supported. %dcl a fixed; %a = ’0’; %a ||= ’1’; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3804I</key>
    <name>Target in arithmetic-equals assignment must have type fixed. </name>
    <internalKey>IBM3804I</internalKey>
    <description>Compound arithmetic assignments with character targets are not supported. %dcl a char; %a = ’0’; %a += ’1’; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3805I</key>
    <name>SQL TYPE IS XML type must be followed by the keyword LARGE. </name>
    <internalKey>IBM3805I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type LARGE OBJECT( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3806I</key>
    <name>SQL TYPE IS XML type LARGE must be followed by the keyword OBJECT. </name>
    <internalKey>IBM3806I</internalKey>
    <description>The correct syntax is SQL TYPE IS XML AS type LARGE OBJECT( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3807I</key>
    <name>SQL TYPE IS CHARACTER must be followed by the keyword LARGE. </name>
    <internalKey>IBM3807I</internalKey>
    <description>The correct syntax is SQL TYPE IS CHARACTER LARGE OBJECT( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3808I</key>
    <name>SQL TYPE IS BINARY must be followed by the keyword LARGE or by a length enclosed in parentheses. </name>
    <internalKey>IBM3808I</internalKey>
    <description>The correct syntax is SQL TYPE IS BINARY LARGE OBJECT( length ) or SQL TYPE IS BINARY( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3809I</key>
    <name>SQL TYPE IS type LARGE must be followed by the keyword OBJECT. </name>
    <internalKey>IBM3809I</internalKey>
    <description>The correct syntax is SQL TYPE IS type LARGE OBJECT( length ). </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3810I</key>
    <name>Statement has too many labels. </name>
    <internalKey>IBM3810I</internalKey>
    <description>The compiler's limit on the number of labels on a statement has been exceeded. Reduce the number of labels on the statement. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3811I</key>
    <name>Expression contains too many nested subexpressions. </name>
    <internalKey>IBM3811I</internalKey>
    <description>The compiler's space for evaluating expressions has been exhausted. Rewrite the expression in terms of simpler expressions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3812I</key>
    <name>Result of concatenating a string of length string length to a string of length string length would produce a string that is too long. </name>
    <internalKey>IBM3812I</internalKey>
    <description>The result of a concatenation must not have a length greater than the maximum allowed for a string. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3813I</key>
    <name>Result of BUILTIN name applied repetition value times to a string of length string length would produce a string that is too long. </name>
    <internalKey>IBM3813I</internalKey>
    <description>The result of COPY and REPEAT must not have a length greater than the maximum allowed for a string. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3814I</key>
    <name>Unsupported use of aggregate expression. </name>
    <internalKey>IBM3814I</internalKey>
    <description>The only valid aggregate expression is the use of an array name as the first argument to the HBOUND or LBOUND built-in functions. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3815I</key>
    <name>Operand in bit operation must have length less than 32768. </name>
    <internalKey>IBM3815I</internalKey>
    <description>Bit operations are limited to strings of length 32767 or less. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3816I</key>
    <name>Second and third arguments to the TRANSLATE built-in function must have length less than 32768. </name>
    <internalKey>IBM3816I</internalKey>
    <description>The TRANSLATE built-in function is not supported if the second or third argument is longer than 32767 characters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3817I</key>
    <name>Result of BUILTIN name would exceed maximum string length. </name>
    <internalKey>IBM3817I</internalKey>
    <description>The result of a COMMENT or QUOTE built-in function must not be a string that would have length greater than the supported maximum. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3820I</key>
    <name>Under the INCONLY option, the use of INCLUDE or XINCLUDE as a macro procedure name is invalid unless the colon follows immediately after the name. </name>
    <internalKey>IBM3820I</internalKey>
    <description>If you must use INCLUDE or XINCLUDE as a macro name, put the colon on the same line as the name. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3821I</key>
    <name>Under the INCONLY option, the use of INCLUDE or XINCLUDE as a macro statement label is invalid unless the colon follows immediately after the name. </name>
    <internalKey>IBM3821I</internalKey>
    <description>If you must use INCLUDE or XINCLUDE as a macro statement label, put the colon on the same line as the name. 119 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3822I</key>
    <name>Under the INCONLY option, the use of INCLUDE or XINCLUDE as a macro variable that is the target of an assignment is invalid unless the equals sign follows immediately after the name. </name>
    <internalKey>IBM3822I</internalKey>
    <description>If you must use INCLUDE or XINCLUDE as a macro variable name, put the equals sign in the assignment on the same line as the name. For example, change the first assignment below into the second. %xinclude = 17; %xinclude = 17; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3837I</key>
    <name>GOTO target is inside a (different) DO loop. </name>
    <internalKey>IBM3837I</internalKey>
    <description>The target of a GOTO cannot be inside a DO loop unless the GOTO itself is in the same DO loop. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3841I</key>
    <name>The INCLUDE file include-file-name could not be opened. </name>
    <internalKey>IBM3841I</internalKey>
    <description>The INCLUDE file could not be found, or if found, it could not be opened. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3842I</key>
    <name>Statements are nested too deep. </name>
    <internalKey>IBM3842I</internalKey>
    <description>The nesting of PROCEDURE, DO, SELECT and similar statements is greater than that supported by the compiler. Rewrite the program so that it is less complicated. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3844I</key>
    <name>The function name built-in is not supported. </name>
    <internalKey>IBM3844I</internalKey>
    <description>Support for the indicated built-in function has been discontinued. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3846I</key>
    <name>The keyword statement is not supported. </name>
    <internalKey>IBM3846I</internalKey>
    <description>Support for the indicated statement has been discontinued. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3848I</key>
    <name>Use of iSUB is not supported. </name>
    <internalKey>IBM3848I</internalKey>
    <description>iSUB is only supported in syntax checking. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3853I</key>
    <name>Nesting of DO statements exceeds the maximum. </name>
    <internalKey>IBM3853I</internalKey>
    <description>DO statements can be nested only 100 deep. Simplify the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3854I</key>
    <name>Nesting of IF statements exceeds the maximum. </name>
    <internalKey>IBM3854I</internalKey>
    <description>IF statements can be nested only 100 deep. Simplify the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3855I</key>
    <name>Nesting of SELECT statements exceeds the maximum. </name>
    <internalKey>IBM3855I</internalKey>
    <description>SELECT statements can be nested only 50 deep. Simplify the program. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3856I</key>
    <name>Nesting of blocks exceeds the maximum. </name>
    <internalKey>IBM3856I</internalKey>
    <description>Blocks must be nested only 30 deep. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3870I</key>
    <name>The FETCH of the CICS backend failed. </name>
    <internalKey>IBM3870I</internalKey>
    <description>Check that the CICS modules are accessible, otherwise report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3871I</key>
    <name>The CICS backend reported an internal error while attempting to perform its initialization. </name>
    <internalKey>IBM3871I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3872I</key>
    <name>The CICS backend reported an internal error while attempting to parse its options. </name>
    <internalKey>IBM3872I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3873I</key>
    <name>The CICS backend reported an internal error while attempting to build and emit the local declares. </name>
    <internalKey>IBM3873I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3874I</key>
    <name>The CICS backend reported an internal error while attempting to translate an EXEC statement. </name>
    <internalKey>IBM3874I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3875I</key>
    <name>The CICS backend reported an internal error while attempting to translate a CICS macro (such as DFHVALUE). </name>
    <internalKey>IBM3875I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3876I</key>
    <name>The CICS backend reported an internal error while attempting to perform its termination. </name>
    <internalKey>IBM3876I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3877I</key>
    <name>The SQL backend reported an internal error while attempting to perform its initialization. </name>
    <internalKey>IBM3877I</internalKey>
    <description>Report this error to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3878I</key>
    <name>SQL initialization did not complete successfully. </name>
    <internalKey>IBM3878I</internalKey>
    <description>See the additional messages produced by the SQL backend. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3880I</key>
    <name>The reference reference could not be resolved. </name>
    <internalKey>IBM3880I</internalKey>
    <description>All SQL host variables must be declared within the current block scope. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3881I</key>
    <name>The reference reference is ambiguous. </name>
    <internalKey>IBM3881I</internalKey>
    <description>All SQL host variables must be unambiguous. This can be fixed by supplying enough structure qualification. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3882I</key>
    <name>The indicator array reference must have only one dimension. </name>
    <internalKey>IBM3882I</internalKey>
    <description>An indicator array in an EXEC SQL statement must not be multi-dimensional. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3883I</key>
    <name>The indicator array reference must have constant bounds. </name>
    <internalKey>IBM3883I</internalKey>
    <description>An indicator array in an EXEC SQL statement must have bounds that are specified simply as optionally signed integers. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3884I</key>
    <name>The indicator variable reference is used with a structure and hence must be an array or a structure. </name>
    <internalKey>IBM3884I</internalKey>
    <description>An indicator variable for a structure in an EXEC SQL statement must be an array or a structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3885I</key>
    <name>The host variable host-variable must have only one dimension. </name>
    <internalKey>IBM3885I</internalKey>
    <description>A host variable in an EXEC SQL statement must not be multi-dimensional. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3886I</key>
    <name>The host variable host-variable must have constant bounds. </name>
    <internalKey>IBM3886I</internalKey>
    <description>A host variable in an EXEC SQL statement must have bounds that are specified simply as optionally signed integers. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3887I</key>
    <name>The host variable host-variable must be CONNECTED. </name>
    <internalKey>IBM3887I</internalKey>
    <description>A host variable in an EXEC SQL statement must be one-dimensional and that dimension must not be specified on a parent unless the parent has the DIMACROSS attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3888I</key>
    <name>The reference host-reference has no corresponding DB2 type. </name>
    <internalKey>IBM3888I</internalKey>
    <description>All SQL host variables must have a corresponding DB2 type. For example, while FIXED DEC(7,-2) is valid in a PL/I declaration, there is no corresponding DB2 type because DB2 requires that in FIXED DEC(p,q), q is non-negative and no greater than p. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3889I</key>
    <name>The reference host-reference is a union and thus must not be used as a host variable. </name>
    <internalKey>IBM3889I</internalKey>
    <description>All SQL host variables must have a corresponding DB2 type. There is no type matching a union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3890I</key>
    <name>The reference host-reference is an array of structures and thus must not be used as a host variable. </name>
    <internalKey>IBM3890I</internalKey>
    <description>A structure may be used as a host variable only if it is not an array. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3891I</key>
    <name>Since the structure reference host-reference contains an array, it must not have an indicator that is a scalar or an array of scalars. </name>
    <internalKey>IBM3891I</internalKey>
    <description>A structure containing an array may be used as a host variable with an indicator variable only if that indicator variable is a similar structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3892I</key>
    <name>The reference host-reference contains a substructure and thus must not be used as a host variable. </name>
    <internalKey>IBM3892I</internalKey>
    <description>A structure may be used as a host variable only if none of its members are structures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3893I</key>
    <name>The reference host-reference contains unnamed elements and thus must not be used as a host variable. </name>
    <internalKey>IBM3893I</internalKey>
    <description>A structure may be used as a host variable only if all of its members are named. 121 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3894I</key>
    <name>The indicator variable reference must be FIXED BIN(15). </name>
    <internalKey>IBM3894I</internalKey>
    <description>An indicator variable must be a native, real halfword integer. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3895I</key>
    <name>The indicator variable reference is used with an array and hence must be an array as well. </name>
    <internalKey>IBM3895I</internalKey>
    <description>An indicator variable in an EXEC SQL statement must be an array if it is used with an array. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3896I</key>
    <name>The VALUE reference host-reference could not be reduced to a character literal and thus must not be used as a host variable. </name>
    <internalKey>IBM3896I</internalKey>
    <description>A reference with the VALUE attribute may be used as a host variable with the SQL characterl type if it can be reduced to a CHARACTER literal. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3897I</key>
    <name>The VALUE reference host-reference could not be reduced to a numeric literal and thus must not be used as a host variable. </name>
    <internalKey>IBM3897I</internalKey>
    <description>A reference with the VALUE attribute may be used as a host variable with the SQL integer or decimal type if it can be reduced to a REAL FIXED literal. See the Programming Guide for more details. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3898I</key>
    <name>The VALUE reference host-reference does not have character, integer or decimal type and thus must not be used as a host variable. </name>
    <internalKey>IBM3898I</internalKey>
    <description>A reference with the VALUE attribute may be used as a host variable only if it has a SQL type of character, integer or decimal. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3899I</key>
    <name>The reference reference name is ambiguous. </name>
    <internalKey>IBM3899I</internalKey>
    <description>Enough qualification must be provided to make any reference unique. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3900I</key>
    <name>The dot-qualified reference reference name is unknown. </name>
    <internalKey>IBM3900I</internalKey>
    <description>The named reference is not a member of any structure or union declared in the block in which it is referenced or declared in any block containing that block. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3901I</key>
    <name>The element reference name in the indicator structure must have the same array bounds as the corresponding element in the host structure. </name>
    <internalKey>IBM3901I</internalKey>
    <description>In :x:y, if x and y are both structures, then for any element of y that is an array, the corresponding element of x must be an array with the same bounds and vice versa. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3902I</key>
    <name>Argument to the BUILTIN name built-in must be a structure. </name>
    <internalKey>IBM3902I</internalKey>
    <description>The argument to the named built-in subroutine must be a structure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3903I</key>
    <name>The indicator reference name must not be a uinon. </name>
    <internalKey>IBM3903I</internalKey>
    <description>In :x:y, y must not be a union. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3909I</key>
    <name>The attribute attribute conflicts with the attribute attribute. </name>
    <internalKey>IBM3909I</internalKey>
    <description>The named attributes, for example PARAMETER and INITIAL, are mutually exclusive. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3911I</key>
    <name>The statement label identifier has already been declared. </name>
    <internalKey>IBM3911I</internalKey>
    <description>All statement labels in any block must be unique. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3914I</key>
    <name>GOTO target must be a LABEL reference. </name>
    <internalKey>IBM3914I</internalKey>
    <description>x in GOTO x must have type LABEL. x must not have type FORMAT. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3915I</key>
    <name>GOTO target must be a scalar. </name>
    <internalKey>IBM3915I</internalKey>
    <description>x in GOTO x must not be an array. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3916I</key>
    <name>The procedure proc-name has already been defined. </name>
    <internalKey>IBM3916I</internalKey>
    <description>Sister procedures must have different names. % b: proc; % end; % b: proc; % end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3917I</key>
    <name>Program contains no valid source lines. </name>
    <internalKey>IBM3917I</internalKey>
    <description>The source contains either no statements or all statements that it contains are invalid. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3920I</key>
    <name>FIXED BINARY constant contains too many digits. </name>
    <internalKey>IBM3920I</internalKey>
    <description>A FIXED BINARY constant must contain 31 or fewer digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3921I</key>
    <name>FIXED DECIMAL constant contains too many significant digits. </name>
    <internalKey>IBM3921I</internalKey>
    <description>The maximum precision of FIXED DECIMAL constants is set by the FIXEDDEC suboption of the LIMITS compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3922I</key>
    <name>Exponent in FLOAT BINARY constant contains more digits than the implementation maximum. </name>
    <internalKey>IBM3922I</internalKey>
    <description>The exponent in a FLOAT BINARY constant may contain no more than 5 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3923I</key>
    <name>Mantissa in FLOAT BINARY constant contains more significant digits than the implementation maximum. </name>
    <internalKey>IBM3923I</internalKey>
    <description>The mantissa in a FLOAT BINARY constant may contain no more than 64 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3924I</key>
    <name>Exponent in FLOAT DECIMAL constant contains more digits than the implementation maximum. </name>
    <internalKey>IBM3924I</internalKey>
    <description>The exponent in a FLOAT BINARY constant may contain no more than 4 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3925I</key>
    <name>Mantissa in FLOAT DECIMAL constant contains more significant digits than the implementation maximum. </name>
    <internalKey>IBM3925I</internalKey>
    <description>The mantissa in a FLOAT BINARY constant may contain no more than 18 digits. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3926I</key>
    <name>Constants must not exceed 30720 bytes. </name>
    <internalKey>IBM3926I</internalKey>
    <description>The number of bytes used to represent a constant in your program must not exceed 30720. This limit holds even for bit strings where the internal representation will consume only one-eighth the number of bytes as the external representation does. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3927I</key>
    <name>Numeric constants must be real, unscaled and fixed. </name>
    <internalKey>IBM3927I</internalKey>
    <description>Any complex, scaled or floating point constant will be converted to an integer value. %a = 3.1415; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3928I</key>
    <name>Only B, BX and X string suffixes are supported. </name>
    <internalKey>IBM3928I</internalKey>
    <description>G, GX, M, A and E string suffixes are not supported. %a = ’31’e; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3929I</key>
    <name>EXEC SQL statement must be in a PROCEDURE. </name>
    <internalKey>IBM3929I</internalKey>
    <description>The only EXEC SQL statements allowed at the PACKAGE level are EXEC SQL BEGIN DECLARE SECTION, EXEC SQL END DECLARE SECTION, nonexecutable EXEC SQL DECLARE, and EXEC SQL INCLUDE other than EXEC SQL INCLUDE SQLCA and EXEC SQL INCLUDE SQLDA. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3930I</key>
    <name>Invalid syntax in statement-form of procedure invocation. Text up to next semicolon will be ignored. </name>
    <internalKey>IBM3930I</internalKey>
    <description>In the invocation of a statement-form procedure, all characters that are not part of comments or key names should be enclosed in parentheses following one of the keys. For example, the "+" in the display statement below should not be present. %a: proc( x ) stmt returns( char ); dcl x char; return( 1729 ); %end; %act a; display( a + x(5); ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3931I</key>
    <name>Under the FIXED(DEC) option, decimal constants must have no more than 5 digits. </name>
    <internalKey>IBM3931I</internalKey>
    <description>Under the FIXED(BIN), decimal constants that represent any valid FIXED BIN(31) number are supported. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3934I</key>
    <name>EXEC SQL INCLUDE statement has incorrect syntax. </name>
    <internalKey>IBM3934I</internalKey>
    <description>EXEC SQL INCLUDE must be followed by one identifier and then by a semicolon. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3935I</key>
    <name>The FETCH of the SQL backend failed. </name>
    <internalKey>IBM3935I</internalKey>
    <description>Check that the SQL modules are accessible, otherwise report this error to IBM. 123 </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3936I</key>
    <name>The SQL backend must be from DB2 V9 or later. </name>
    <internalKey>IBM3936I</internalKey>
    <description>Switch to a more current level of DB2. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3937I</key>
    <name>The EXEC SQL statement is too long. </name>
    <internalKey>IBM3937I</internalKey>
    <description>The EXEC SQL statement must be less than 500K bytes long. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3938I</key>
    <name>The EXEC SQL statement has too many host variables </name>
    <internalKey>IBM3938I</internalKey>
    <description>The EXEC SQL statement must use no more than 1500 host variables. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3939I</key>
    <name>The DBNAME option must specify a valid database name. </name>
    <internalKey>IBM3939I</internalKey>
    <description>When invoking the SQL preprocessor on Windows or AIX, the DBNAME option must be specified, and the option must specify a valid database name. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3943I</key>
    <name>The number of error messages allowed by the FLAG option has been exceeded. </name>
    <internalKey>IBM3943I</internalKey>
    <description>Compilation will terminate when the number of messages has exceeded the limit set in the FLAG compiler option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3948I</key>
    <name>condition-name condition with ONCODE=oncode-value raised while evaluating expression. </name>
    <internalKey>IBM3948I</internalKey>
    <description>Evaluation of an expression raised the named condition. %a = a / 0; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3949I</key>
    <name>Parameter name identifier appears more than once in parameter list. </name>
    <internalKey>IBM3949I</internalKey>
    <description>Each identifier in a parameter list must be unique. a: proc( b, c, b ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3956I</key>
    <name>ITERATE is valid only for iterative DO-groups. </name>
    <internalKey>IBM3956I</internalKey>
    <description>ITERATE is not valid inside type-I do groups. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3957I</key>
    <name>RETURN statement outside of a PROCEDURE is invalid. </name>
    <internalKey>IBM3957I</internalKey>
    <description>RETURN statements are valid only inside procedures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3958I</key>
    <name>INCLUDE statement inside of a PROCEDURE is invalid. </name>
    <internalKey>IBM3958I</internalKey>
    <description>INCLUDE statements are permitted only outside any preprocessor procedures. %a: proc; include sample; %end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3959I</key>
    <name>Length of parameter exceeds 32767 bytes. </name>
    <internalKey>IBM3959I</internalKey>
    <description>Parameters to macro procedures must be no longer than 32767 bytes. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3960I</key>
    <name>End-of-source has been encountered after an unmatched comment marker. </name>
    <internalKey>IBM3960I</internalKey>
    <description>An end-of-comment marker is probably missing. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3961I</key>
    <name>End-of-source has been encountered after an unmatched quote. </name>
    <internalKey>IBM3961I</internalKey>
    <description>A closing quote is probably missing. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3962I</key>
    <name>Replacement value contains no end-of-comment delimiter. A comment delimiter will be assumed at the end of the replacement value. </name>
    <internalKey>IBM3962I</internalKey>
    <description>An end-of-comment marker is probably missing. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3963I</key>
    <name>Replacement value contains no end-of-string delimiter. A string delimiter will be assumed at the end of the replacement value. </name>
    <internalKey>IBM3963I</internalKey>
    <description>A closing quote is probably missing. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3964I</key>
    <name>ANSWER statement outside of a PROCEDURE is invalid. </name>
    <internalKey>IBM3964I</internalKey>
    <description>ANSWER statements are valid only inside procedures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3965I</key>
    <name>ANSWER statement inside of a PROCEDURE with RETURNS is invalid. </name>
    <internalKey>IBM3965I</internalKey>
    <description>ANSWER statements are not valid inside functions. %a: proc returns( char ); answer( ’this is invalid’ ); return( ’this is ok however’ ); %end; %b: proc; answer( ’this is valid’ ); %end; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3966I</key>
    <name>Source has caused too many rescans. </name>
    <internalKey>IBM3966I</internalKey>
    <description>A rescan of a replacement string or a rescan of a string returned by a preprocessor has caused further replacement leading to another rescan etc., and the maximum depth of rescanning was exceeded. For instance, the following macro, which is meant to count the number of dcl statements in a compilation, would produce this message. If the %ACTIVATE statement specified NORESCAN, it would work correctly. %dcl dcl_Count fixed; %dcl_Count = 0; %dcl: proc returns( char ); dcl_count = dcl_count + 1; return( ’dcl’ ); %end; %activate dcl; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3967I</key>
    <name>CALL statement outside of a PROCEDURE is invalid. </name>
    <internalKey>IBM3967I</internalKey>
    <description>CALL statements are valid only when they are inside macro procedures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3968I</key>
    <name>CALL reference is undefined. </name>
    <internalKey>IBM3968I</internalKey>
    <description>CALL reference must be a declared macro procedure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3969I</key>
    <name>CALL reference is not a macro entry. </name>
    <internalKey>IBM3969I</internalKey>
    <description>CALL reference must be a declared macro procedure. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3970I</key>
    <name>CALL reference must not be a function. </name>
    <internalKey>IBM3970I</internalKey>
    <description>A CALL reference must not have the RETURNS attribute. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3971I</key>
    <name>CALL reference must not have the STATEMENT option. </name>
    <internalKey>IBM3971I</internalKey>
    <description>A CALL reference must not have the STATEMENT option. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3974I</key>
    <name>Every shift-in character after the left margin of a source line must have a matching shift-out character before the right margin of the same line. </name>
    <internalKey>IBM3974I</internalKey>
    <description>DBCS shift codes must be paired. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3975I</key>
    <name>Every shift-in character within a string generated for rescan must have a matching shift-out character within that same string. </name>
    <internalKey>IBM3975I</internalKey>
    <description>DBCS shift codes must be paired. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3976I</key>
    <name>DBCS characters are allowed only in G and M constants. </name>
    <internalKey>IBM3976I</internalKey>
    <description>Hex strings (strings ending in one of the suffixes X, BX, B4, GX or XN), bit strings, (strings ending in the suffix B), and character strings not ending in the suffix M must contain only SBCS characters. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3977I</key>
    <name>SBCS characters are not allowed in G constants. </name>
    <internalKey>IBM3977I</internalKey>
    <description>Mixed SBCS and DBCS is allowed only in M constants. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3978I</key>
    <name>Invalid use of SBCS encoded as DBCS. </name>
    <internalKey>IBM3978I</internalKey>
    <description>Outside of comments, SBCS can be encoded as DBCS only as part of an identifier. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3980I</key>
    <name>Recursion of procedures is not allowed. </name>
    <internalKey>IBM3980I</internalKey>
    <description>A procedure must not invoke itself directly or indirectly. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3981I</key>
    <name>BUILTIN function may not be used outside a procedure. </name>
    <internalKey>IBM3981I</internalKey>
    <description>The named built-in function may be used only inside procedures. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3982I</key>
    <name>Procedure procedure-name is undefined and cannot be invoked. </name>
    <internalKey>IBM3982I</internalKey>
    <description>A procedure must be defined (correctly) before it can be invoked. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3983I</key>
    <name>Premature end-of-source in scan. </name>
    <internalKey>IBM3983I</internalKey>
    <description>The source ended during a scan when a right parenthesis or semicolon was required. %a: proc() stmt returns( char ); return( ’1729’ ); %end; 125 %dcl a entry; a /* and no more source follows */ </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3984I</key>
    <name>File filename could not be opened. </name>
    <internalKey>IBM3984I</internalKey>
    <description>The named source file could not be opened. Make sure that the file is named correctly, that it exists and that it is readable. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3985I</key>
    <name>Semicolon found before required closing right parenthesis. </name>
    <internalKey>IBM3985I</internalKey>
    <description>A statement contained a semicolon before a right parenthesis which is needed to match an earlier left parenthesis in the statement. select( a ; ); </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3986I</key>
    <name>IF statement syntax is invalid. </name>
    <internalKey>IBM3986I</internalKey>
    <description>A statement that appears to be an IF statement has invalid syntax. if a &gt; 0 ; then </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3987I</key>
    <name>Statement must start with a keyword or assignment target. </name>
    <internalKey>IBM3987I</internalKey>
    <description>After any condition prefixes and labels, statements must start with either a keyword or, if the statement is an assignment statement, it must start with an identifier or BIND reference. The flagged statement starts with some other lexical element. This may indicate that a semicolon that is meant for the previous statement is misplaced or that an element of this statement has been erroneously omitted. a =0 b; = a; </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3993I</key>
    <name>Internal preprocessor error: assertion failed on line source line in procedure name in package name </name>
    <internalKey>IBM3993I</internalKey>
    <description>This message indicates that there is an error in the preprocessor. Report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3994I</key>
    <name>Source is not valid UTF-8. </name>
    <internalKey>IBM3994I</internalKey>
    <description>The source file contains lines that would be rejected by the UVALID built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3995I</key>
    <name>Generated text contains invalid UTF-8. </name>
    <internalKey>IBM3995I</internalKey>
    <description>The text produced by an ANSWER or RETURNS statement would be rejected by the UVALID built-in function. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3996I</key>
    <name>Internal preprocessor error: protection exception in module name. </name>
    <internalKey>IBM3996I</internalKey>
    <description>This message indicates that there is an error in the preprocessor. Report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3997I</key>
    <name>Internal preprocessor error: no WHEN clause satisfied within module name. </name>
    <internalKey>IBM3997I</internalKey>
    <description>This message indicates that there is an error in the preprocessor. Report the problem to IBM. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
<rule>
    <key>IBM3998I</key>
    <name>note </name>
    <internalKey>IBM3998I</internalKey>
    <description>This message is used to report DB2 or CICS backend messages with a return code of 16. </description>
    <severity>BLOCKER</severity>
    <cardinality>SINGLE</cardinality>
    <status>READY</status>
    <tag>zdev</tag>
    <remediationFunction>CONSTANT_ISSUE</remediationFunction>
    <remediationFunctionBaseEffort>1h</remediationFunctionBaseEffort>
</rule>
</plicomp-rules>
